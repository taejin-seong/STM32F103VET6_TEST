
stm32f103ve_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800aa90  0800aa90  0001aa90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af80  0800af80  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800af80  0800af80  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af80  0800af80  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800af88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000210  0800b198  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800b198  00020584  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f9d1  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cc  00000000  00000000  0003fc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00043cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  000450f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e252  00000000  00000000  00046378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d197  00000000  00000000  000645ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fcd2  00000000  00000000  00081761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  00121488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000210 	.word	0x20000210
 8000204:	00000000 	.word	0x00000000
 8000208:	0800aa74 	.word	0x0800aa74

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000214 	.word	0x20000214
 8000224:	0800aa74 	.word	0x0800aa74

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <apInit>:
// TODO: 실전 함수



 void apInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	   uartOpen(_DEF_UART1, 115200); //UART 개통
 800106c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001070:	2000      	movs	r0, #0
 8001072:	f001 fac1 	bl	80025f8 <uartOpen>

	   NRF24L01_RX_Mode();
	   uartPrintf(_DEF_UART1, "Enter data receiving mode\n");
*/

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	0000      	movs	r0, r0
 800107c:	0000      	movs	r0, r0
	...

08001080 <apMain>:


void apMain(void)
{
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	b09b      	sub	sp, #108	; 0x6c
 8001086:	af06      	add	r7, sp, #24
	  int16_t Angle_Ax, Angle_Ay, Angle_Gx, Angle_Gy, Angle_Gz; //Angle_Az,
	  int16_t Roll, Pitch, Yaw, Yaw_G, Yaw_M;

	  int32_t dt,pre_msec;

	 calibrate(&Base_Ax, &Base_Ay, &Base_Az, &Base_Gx, &Base_Gy, &Base_Gz);
 8001088:	f107 0612 	add.w	r6, r7, #18
 800108c:	f107 0214 	add.w	r2, r7, #20
 8001090:	f107 0116 	add.w	r1, r7, #22
 8001094:	f107 0018 	add.w	r0, r7, #24
 8001098:	f107 030e 	add.w	r3, r7, #14
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4633      	mov	r3, r6
 80010a6:	f000 ff63 	bl	8001f70 <calibrate>


			/* TODO: MPU9250: 변환행렬로 지자계 각도 비보정  */


			dt = (millis()-pre_msec)/1000.0; //단위시간 변화량
 80010aa:	f000 fa0e 	bl	80014ca <millis>
 80010ae:	4602      	mov	r2, r0
 80010b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa01 	bl	80004bc <__aeabi_ui2d>
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	4bda      	ldr	r3, [pc, #872]	; (8001428 <apMain+0x3a8>)
 80010c0:	f7ff fba0 	bl	8000804 <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd20 	bl	8000b10 <__aeabi_d2iz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
		  pre_msec = millis();
 80010d4:	f000 f9f9 	bl	80014ca <millis>
 80010d8:	4603      	mov	r3, r0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44


			MPU6050_GetData_Axis(&Ac_X, &Ac_Y, &Ac_Z, &Gy_X, &Gy_Y, &Gy_Z, &Ma_X, &Ma_Y, &Ma_Z);
 80010dc:	f107 0624 	add.w	r6, r7, #36	; 0x24
 80010e0:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80010e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010e8:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 80010ec:	f107 031a 	add.w	r3, r7, #26
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	f107 031e 	add.w	r3, r7, #30
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	4633      	mov	r3, r6
 800110c:	f000 fe2a 	bl	8001d64 <MPU6050_GetData_Axis>

			Las_Angle_Gx = Roll;	//최근값 누적
 8001110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001114:	87fb      	strh	r3, [r7, #62]	; 0x3e
			Las_Angle_Gy = Pitch;
 8001116:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800111a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			Las_Angle_Gz = Yaw;
 800111c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001120:	877b      	strh	r3, [r7, #58]	; 0x3a

			Gy_X = (Gy_X - Base_Gx)/ 131;
 8001122:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001126:	461a      	mov	r2, r3
 8001128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4abf      	ldr	r2, [pc, #764]	; (800142c <apMain+0x3ac>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	1152      	asrs	r2, r2, #5
 8001136:	17db      	asrs	r3, r3, #31
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b21b      	sxth	r3, r3
 800113c:	84bb      	strh	r3, [r7, #36]	; 0x24
			Gy_Y = (Gy_Y - Base_Gy)/ 131;
 800113e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001142:	461a      	mov	r2, r3
 8001144:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4ab8      	ldr	r2, [pc, #736]	; (800142c <apMain+0x3ac>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b21b      	sxth	r3, r3
 8001158:	847b      	strh	r3, [r7, #34]	; 0x22
			Gy_Z = (Gy_Z - Base_Gz)/ 131;
 800115a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800115e:	461a      	mov	r2, r3
 8001160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4ab1      	ldr	r2, [pc, #708]	; (800142c <apMain+0x3ac>)
 8001168:	fb82 1203 	smull	r1, r2, r2, r3
 800116c:	1152      	asrs	r2, r2, #5
 800116e:	17db      	asrs	r3, r3, #31
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	b21b      	sxth	r3, r3
 8001174:	843b      	strh	r3, [r7, #32]


			Angle_Ax = atan(-1.000 * Ac_Y / sqrt( pow(Ac_X,2) + pow(Ac_Z,2) ) ) * RAD2DEG;
 8001176:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9ae 	bl	80004dc <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4690      	mov	r8, r2
 8001186:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800118a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9a4 	bl	80004dc <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119c:	f008 fbe0 	bl	8009960 <pow>
 80011a0:	4682      	mov	sl, r0
 80011a2:	468b      	mov	fp, r1
 80011a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f997 	bl	80004dc <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b6:	f008 fbd3 	bl	8009960 <pow>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4650      	mov	r0, sl
 80011c0:	4659      	mov	r1, fp
 80011c2:	f7ff f83f 	bl	8000244 <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f008 fc73 	bl	8009ab8 <sqrt>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff fb13 	bl	8000804 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f008 fa2b 	bl	8009640 <atan>
 80011ea:	a389      	add	r3, pc, #548	; (adr r3, 8001410 <apMain+0x390>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff f9de 	bl	80005b0 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc88 	bl	8000b10 <__aeabi_d2iz>
 8001200:	4603      	mov	r3, r0
 8001202:	873b      	strh	r3, [r7, #56]	; 0x38
			Angle_Ay = atan(Ac_X / sqrt( pow(Ac_Y,2) + pow(Ac_Z,2) ) ) * RAD2DEG;
 8001204:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f967 	bl	80004dc <__aeabi_i2d>
 800120e:	4682      	mov	sl, r0
 8001210:	468b      	mov	fp, r1
 8001212:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f960 	bl	80004dc <__aeabi_i2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001224:	f008 fb9c 	bl	8009960 <pow>
 8001228:	e9c7 0100 	strd	r0, r1, [r7]
 800122c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f953 	bl	80004dc <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123e:	f008 fb8f 	bl	8009960 <pow>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124a:	f7fe fffb 	bl	8000244 <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f008 fc2f 	bl	8009ab8 <sqrt>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4650      	mov	r0, sl
 8001260:	4659      	mov	r1, fp
 8001262:	f7ff facf 	bl	8000804 <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f008 f9e7 	bl	8009640 <atan>
 8001272:	a367      	add	r3, pc, #412	; (adr r3, 8001410 <apMain+0x390>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc44 	bl	8000b10 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	86fb      	strh	r3, [r7, #54]	; 0x36

			Angle_Gx = Gy_X * dt + Las_Angle_Gx;
 800128c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128e:	b29b      	uxth	r3, r3
 8001290:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001294:	b292      	uxth	r2, r2
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800129e:	4413      	add	r3, r2
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	86bb      	strh	r3, [r7, #52]	; 0x34
			Angle_Gy = Gy_Y * dt + Las_Angle_Gy;
 80012a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80012ac:	b292      	uxth	r2, r2
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	867b      	strh	r3, [r7, #50]	; 0x32
			Angle_Gz = Gy_Z * dt + Las_Angle_Gz;
 80012bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80012c4:	b292      	uxth	r2, r2
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012ce:	4413      	add	r3, r2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	863b      	strh	r3, [r7, #48]	; 0x30

		 dt = 0.000;
 80012d4:	2300      	movs	r3, #0
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40

		 Roll  = Alpha * Angle_Gx + (1.000 - Alpha) * Angle_Ax;
 80012d8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fcf9 	bl	8000cd4 <__aeabi_i2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4952      	ldr	r1, [pc, #328]	; (8001430 <apMain+0x3b0>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd48 	bl	8000d7c <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f906 	bl	8000500 <__aeabi_f2d>
 80012f4:	4682      	mov	sl, r0
 80012f6:	468b      	mov	fp, r1
 80012f8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8ed 	bl	80004dc <__aeabi_i2d>
 8001302:	a345      	add	r3, pc, #276	; (adr r3, 8001418 <apMain+0x398>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f952 	bl	80005b0 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4650      	mov	r0, sl
 8001312:	4659      	mov	r1, fp
 8001314:	f7fe ff96 	bl	8000244 <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fbf6 	bl	8000b10 <__aeabi_d2iz>
 8001324:	4603      	mov	r3, r0
 8001326:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		 Pitch = Alpha * Angle_Gy + (1.000 - Alpha) * Angle_Ay;
 800132a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fcd0 	bl	8000cd4 <__aeabi_i2f>
 8001334:	4603      	mov	r3, r0
 8001336:	493e      	ldr	r1, [pc, #248]	; (8001430 <apMain+0x3b0>)
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd1f 	bl	8000d7c <__aeabi_fmul>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f8dd 	bl	8000500 <__aeabi_f2d>
 8001346:	4682      	mov	sl, r0
 8001348:	468b      	mov	fp, r1
 800134a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8c4 	bl	80004dc <__aeabi_i2d>
 8001354:	a330      	add	r3, pc, #192	; (adr r3, 8001418 <apMain+0x398>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f929 	bl	80005b0 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4650      	mov	r0, sl
 8001364:	4659      	mov	r1, fp
 8001366:	f7fe ff6d 	bl	8000244 <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fbcd 	bl	8000b10 <__aeabi_d2iz>
 8001376:	4603      	mov	r3, r0
 8001378:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	   Yaw_G =  Angle_Gz;
 800137c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800137e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	   Yaw_M =  -atan2(Ma_X, Ma_Y) * RAD2DEG;
 8001380:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8a9 	bl	80004dc <__aeabi_i2d>
 800138a:	4682      	mov	sl, r0
 800138c:	468b      	mov	fp, r1
 800138e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8a2 	bl	80004dc <__aeabi_i2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4650      	mov	r0, sl
 800139e:	4659      	mov	r1, fp
 80013a0:	f008 fadb 	bl	800995a <atan2>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013ae:	a318      	add	r3, pc, #96	; (adr r3, 8001410 <apMain+0x390>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f8fa 	bl	80005b0 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fba4 	bl	8000b10 <__aeabi_d2iz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	85bb      	strh	r3, [r7, #44]	; 0x2c

		 Yaw = Beta * Yaw_G + (1.000 - Beta) * Yaw_M;
 80013cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc7f 	bl	8000cd4 <__aeabi_i2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4916      	ldr	r1, [pc, #88]	; (8001434 <apMain+0x3b4>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fcce 	bl	8000d7c <__aeabi_fmul>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f88c 	bl	8000500 <__aeabi_f2d>
 80013e8:	4682      	mov	sl, r0
 80013ea:	468b      	mov	fp, r1
 80013ec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f873 	bl	80004dc <__aeabi_i2d>
 80013f6:	a30a      	add	r3, pc, #40	; (adr r3, 8001420 <apMain+0x3a0>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8d8 	bl	80005b0 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4650      	mov	r0, sl
 8001406:	4659      	mov	r1, fp
 8001408:	e016      	b.n	8001438 <apMain+0x3b8>
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	20000000 	.word	0x20000000
 8001414:	404ca5dc 	.word	0x404ca5dc
 8001418:	00000000 	.word	0x00000000
 800141c:	3fa47ae2 	.word	0x3fa47ae2
 8001420:	00000000 	.word	0x00000000
 8001424:	3fb47ae1 	.word	0x3fb47ae1
 8001428:	408f4000 	.word	0x408f4000
 800142c:	3e88cb3d 	.word	0x3e88cb3d
 8001430:	3f75c28f 	.word	0x3f75c28f
 8001434:	3f6b851f 	.word	0x3f6b851f
 8001438:	f7fe ff04 	bl	8000244 <__adddf3>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb64 	bl	8000b10 <__aeabi_d2iz>
 8001448:	4603      	mov	r3, r0
 800144a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		 uartPrintf(_DEF_UART1, "Roll:%d, Pitch %d, Yaw:%d , Yaw_G:%d, Yaw_M:%d \r\n", Roll, Pitch, Yaw, Yaw_G, Yaw_M);
 800144e:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8001452:	f9b7 604c 	ldrsh.w	r6, [r7, #76]	; 0x4c
 8001456:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800145a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800145e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001462:	9102      	str	r1, [sp, #8]
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4633      	mov	r3, r6
 800146a:	4602      	mov	r2, r0
 800146c:	4903      	ldr	r1, [pc, #12]	; (800147c <apMain+0x3fc>)
 800146e:	2000      	movs	r0, #0
 8001470:	f001 f970 	bl	8002754 <uartPrintf>
		 delay(5);
 8001474:	2005      	movs	r0, #5
 8001476:	f000 f81d 	bl	80014b4 <delay>
			dt = (millis()-pre_msec)/1000.0; //단위시간 변화량
 800147a:	e616      	b.n	80010aa <apMain+0x2a>
 800147c:	0800aa90 	.word	0x0800aa90

08001480 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	  HAL_Init();
 8001486:	f001 fa3f 	bl	8002908 <HAL_Init>
	  SystemClock_Config();
 800148a:	f000 f825 	bl	80014d8 <SystemClock_Config>

	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <bspInit+0x30>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <bspInit+0x30>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <bspInit+0x30>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]


}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <delay>:


void delay(uint32_t ms)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f001 fa85 	bl	80029cc <HAL_Delay>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <millis>:


uint32_t millis(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0

	return HAL_GetTick();
 80014ce:	f001 fa73 	bl	80029b8 <HAL_GetTick>
 80014d2:	4603      	mov	r3, r0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SystemClock_Config>:




void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 f9ec 	bl	80068c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001516:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fad7 	bl	8004ad4 <HAL_RCC_OscConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800152c:	f000 f819 	bl	8001562 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001530:	230f      	movs	r3, #15
 8001532:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fd42 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001556:	f000 f804 	bl	8001562 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3740      	adds	r7, #64	; 0x40
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001566:	b672      	cpsid	i
}
 8001568:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156a:	e7fe      	b.n	800156a <Error_Handler+0x8>

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <HAL_MspInit+0x5c>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <HAL_MspInit+0x5c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <HAL_MspInit+0x5c>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_MspInit+0x5c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_MspInit+0x60>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_MspInit+0x60>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <NMI_Handler+0x4>

080015d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <MemManage_Handler+0x4>

080015e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <UsageFault_Handler+0x4>

080015ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f001 f9bd 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Channel5_IRQHandler+0x10>)
 8001626:	f001 fce1 	bl	8002fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200004ec 	.word	0x200004ec

08001634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <USART1_IRQHandler+0x10>)
 800163a:	f004 fd69 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000530 	.word	0x20000530

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <_kill>:

int _kill(int pid, int sig)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001660:	f005 f906 	bl	8006870 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	2216      	movs	r2, #22
 8001668:	601a      	str	r2, [r3, #0]
	return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_exit>:

void _exit (int status)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800167e:	f04f 31ff 	mov.w	r1, #4294967295
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffe7 	bl	8001656 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001688:	e7fe      	b.n	8001688 <_exit+0x12>

0800168a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00a      	b.n	80016b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169c:	f3af 8000 	nop.w
 80016a0:	4601      	mov	r1, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbf0      	blt.n	800169c <_read+0x12>
	}

return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e009      	b.n	80016ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	60ba      	str	r2, [r7, #8]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3301      	adds	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbf1      	blt.n	80016d6 <_write+0x12>
	}
	return len;
 80016f2:	687b      	ldr	r3, [r7, #4]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_close>:

int _close(int file)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	return -1;
 8001704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	605a      	str	r2, [r3, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <_isatty>:

int _isatty(int file)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	return 1;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f005 f870 	bl	8006870 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20010000 	.word	0x20010000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	2000022c 	.word	0x2000022c
 80017c4:	20000588 	.word	0x20000588

080017c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017d6:	e003      	b.n	80017e0 <LoopCopyDataInit>

080017d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017de:	3104      	adds	r1, #4

080017e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017e8:	d3f6      	bcc.n	80017d8 <CopyDataInit>
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017ec:	e002      	b.n	80017f4 <LoopFillZerobss>

080017ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017f0:	f842 3b04 	str.w	r3, [r2], #4

080017f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017f8:	d3f9      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fa:	f7ff ffe5 	bl	80017c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f005 f83d 	bl	800687c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f005 f829 	bl	8006858 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r3, =_sidata
 8001808:	0800af88 	.word	0x0800af88
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001810:	20000210 	.word	0x20000210
  ldr r2, =_sbss
 8001814:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 8001818:	20000584 	.word	0x20000584

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>

0800181e <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]

	bool ret = true;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]

	p_node->in  = 0;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	60da      	str	r2, [r3, #12]

	return ret;
 8001846:	7dfb      	ldrb	r3, [r7, #23]
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
	...

08001854 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_I2C2_Init+0x50>)
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <MX_I2C2_Init+0x54>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_I2C2_Init+0x58>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_I2C2_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_I2C2_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_I2C2_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_I2C2_Init+0x50>)
 8001892:	f001 ffc1 	bl	8003818 <HAL_I2C_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800189c:	f7ff fe61 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000368 	.word	0x20000368
 80018a8:	40005800 	.word	0x40005800
 80018ac:	00061a80 	.word	0x00061a80

080018b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_I2C_MspInit+0x74>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d124      	bne.n	800191a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_I2C_MspInit+0x78>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_I2C_MspInit+0x78>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_I2C_MspInit+0x78>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ee:	2312      	movs	r3, #18
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <HAL_I2C_MspInit+0x7c>)
 80018fe:	f001 fddf 	bl	80034c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_I2C_MspInit+0x78>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_I2C_MspInit+0x78>)
 8001908:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_I2C_MspInit+0x78>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40005800 	.word	0x40005800
 8001928:	40021000 	.word	0x40021000
 800192c:	40010c00 	.word	0x40010c00

08001930 <LedInit>:




bool LedInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
	bool ret = true;
 8001936:	2301      	movs	r3, #1
 8001938:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2302      	movs	r3, #2
 8001950:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e016      	b.n	8001986 <LedInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <LedInit+0x68>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4413      	add	r3, r2
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001964:	4a0c      	ldr	r2, [pc, #48]	; (8001998 <LedInit+0x68>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800196c:	463a      	mov	r2, r7
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fda5 	bl	80034c0 <HAL_GPIO_Init>

		  LedOff(i);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f80e 	bl	800199c <LedOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b01      	cmp	r3, #1
 800198a:	dde5      	ble.n	8001958 <LedInit+0x28>

	  }
	return ret;
 800198c:	7cfb      	ldrb	r3, [r7, #19]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000004 	.word	0x20000004

0800199c <LedOff>:
}



void LedOff(uint8_t ch)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d811      	bhi.n	80019d0 <LedOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <LedOff+0x3c>)
 80019b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <LedOff+0x3c>)
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	8899      	ldrh	r1, [r3, #4]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <LedOff+0x3c>)
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	79db      	ldrb	r3, [r3, #7]
 80019c8:	461a      	mov	r2, r3
 80019ca:	f001 ff0d 	bl	80037e8 <HAL_GPIO_WritePin>
 80019ce:	e000      	b.n	80019d2 <LedOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80019d0:	bf00      	nop

}
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000004 	.word	0x20000004

080019dc <motorInit>:
		};



bool motorInit(uint8_t duty)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]

	  bool ret = true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	76fb      	strb	r3, [r7, #27]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]


	  /*Configure GPIO pin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]

	  /* InitStruct	pin, gpio  */
	  for (int i=0; i<MOTOR_MAX_CH; i++) // 입력된  MOTOR 채널 수 만큼 구성된 Pin,Port를 설정합니다.
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	e014      	b.n	8001a34 <motorInit+0x58>
	  {
		  // GPIO_PIN_XX 값을 MOTOR 테이블에 받아옵니다.
		  GPIO_InitStruct.Pin = Motor_Table[i].Pin;
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <motorInit+0x88>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	889b      	ldrh	r3, [r3, #4]
 8001a14:	60bb      	str	r3, [r7, #8]

		  // GPIOX 값을 MOTOR 테이블에 받아옵니다.
		  HAL_GPIO_Init(Motor_Table[i].Port, &GPIO_InitStruct);
 8001a16:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <motorInit+0x88>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 fd4b 	bl	80034c0 <HAL_GPIO_Init>

		  // 초기설정으로 일단 MOTOR를 정지시킵니다.
		  Stop();
 8001a2a:	f000 f81f 	bl	8001a6c <Stop>
	  for (int i=0; i<MOTOR_MAX_CH; i++) // 입력된  MOTOR 채널 수 만큼 구성된 Pin,Port를 설정합니다.
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	dde7      	ble.n	8001a0a <motorInit+0x2e>
	  HAL_TIM_PWM_Start(&MOTOR_TIM_PORT, MOTOR_TIM2_CH);
	  __HAL_TIM_SetCompare(&MOTOR_TIM_PORT, MOTOR_TIM2_CH, duty);
#endif

#ifdef MOTOR_TIM3_CH
	  HAL_TIM_PWM_Start(&MOTOR_TIM_PORT, MOTOR_TIM3_CH);
 8001a3a:	2108      	movs	r1, #8
 8001a3c:	480a      	ldr	r0, [pc, #40]	; (8001a68 <motorInit+0x8c>)
 8001a3e:	f003 fd37 	bl	80054b0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SetCompare(&MOTOR_TIM_PORT, MOTOR_TIM3_CH, duty);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <motorInit+0x8c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

#ifdef MOTOR_TIM4_CH
	  HAL_TIM_PWM_Start(&MOTOR_TIM_PORT, MOTOR_TIM4_CH);
 8001a4a:	210c      	movs	r1, #12
 8001a4c:	4806      	ldr	r0, [pc, #24]	; (8001a68 <motorInit+0x8c>)
 8001a4e:	f003 fd2f 	bl	80054b0 <HAL_TIM_PWM_Start>
	  __HAL_TIM_SetCompare(&MOTOR_TIM_PORT, MOTOR_TIM4_CH, duty);
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <motorInit+0x8c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&MOTOR_TIM_PORT, MOTOR_TIMALL_CH);
	  __HAL_TIM_SetCompare(&MOTOR_TIM_PORT, MOTOR_TIMALL_CH, duty);
#endif


	  return ret;
 8001a5a:	7efb      	ldrb	r3, [r7, #27]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000014 	.word	0x20000014
 8001a68:	2000045c 	.word	0x2000045c

08001a6c <Stop>:

}


void Stop(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(Motor_Table[0].Port, Motor_Table[0].Pin, Motor_Table[0].PinState_OFF);
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <Stop+0x50>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <Stop+0x50>)
 8001a76:	8891      	ldrh	r1, [r2, #4]
 8001a78:	4a10      	ldr	r2, [pc, #64]	; (8001abc <Stop+0x50>)
 8001a7a:	79d2      	ldrb	r2, [r2, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 feb3 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Table[1].Port, Motor_Table[1].Pin, Motor_Table[1].PinState_OFF);
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <Stop+0x50>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <Stop+0x50>)
 8001a88:	8991      	ldrh	r1, [r2, #12]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <Stop+0x50>)
 8001a8c:	7bd2      	ldrb	r2, [r2, #15]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 feaa 	bl	80037e8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(Motor_Table[2].Port, Motor_Table[2].Pin, Motor_Table[2].PinState_OFF);
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <Stop+0x50>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <Stop+0x50>)
 8001a9a:	8a91      	ldrh	r1, [r2, #20]
 8001a9c:	4a07      	ldr	r2, [pc, #28]	; (8001abc <Stop+0x50>)
 8001a9e:	7dd2      	ldrb	r2, [r2, #23]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fea1 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Table[3].Port, Motor_Table[3].Pin, Motor_Table[3].PinState_OFF);
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <Stop+0x50>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <Stop+0x50>)
 8001aac:	8b91      	ldrh	r1, [r2, #28]
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <Stop+0x50>)
 8001ab0:	7fd2      	ldrb	r2, [r2, #31]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fe98 	bl	80037e8 <HAL_GPIO_WritePin>

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000014 	.word	0x20000014

08001ac0 <MPU_I2C_Write>:
	else
		return false;
}

void MPU_I2C_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
 8001acc:	4613      	mov	r3, r2
 8001ace:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&_MPU9250_I2C,_dev_add,WriteAddr,I2C_MEMADD_SIZE_8BIT,pBuffer,NumByteToWrite,HAL_MAX_DELAY);
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	883b      	ldrh	r3, [r7, #0]
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	21d0      	movs	r1, #208	; 0xd0
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <MPU_I2C_Write+0x34>)
 8001ae8:	f002 fb38 	bl	800415c <HAL_I2C_Mem_Write>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000368 	.word	0x20000368

08001af8 <MPU_I2C_Read>:

void MPU_I2C_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	4613      	mov	r3, r2
 8001b06:	803b      	strh	r3, [r7, #0]
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&_MPU9250_I2C,_dev_add,&data,1,HAL_MAX_DELAY);
 8001b12:	f107 020f 	add.w	r2, r7, #15
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	21d0      	movs	r1, #208	; 0xd0
 8001b20:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MPU_I2C_Read+0x48>)
 8001b22:	f001 ffbd 	bl	8003aa0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&_MPU9250_I2C,_dev_add,pBuffer,NumByteToRead,HAL_MAX_DELAY);
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	21d0      	movs	r1, #208	; 0xd0
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MPU_I2C_Read+0x48>)
 8001b34:	f002 f8b2 	bl	8003c9c <HAL_I2C_Master_Receive>
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000368 	.word	0x20000368

08001b44 <writeRegister>:



/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71bb      	strb	r3, [r7, #6]

	MPU_I2C_Write(&data, subAddress, 1);
 8001b54:	79f9      	ldrb	r1, [r7, #7]
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffb0 	bl	8001ac0 <MPU_I2C_Write>
	HAL_Delay(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f000 ff33 	bl	80029cc <HAL_Delay>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	603a      	str	r2, [r7, #0]
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71bb      	strb	r3, [r7, #6]

	MPU_I2C_Read(dest, subAddress, count);
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4619      	mov	r1, r3
 8001b86:	6838      	ldr	r0, [r7, #0]
 8001b88:	f7ff ffb6 	bl	8001af8 <MPU_I2C_Read>

}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	71fb      	strb	r3, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	2025      	movs	r0, #37	; 0x25
 8001ba8:	f7ff ffcc 	bl	8001b44 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2026      	movs	r0, #38	; 0x26
 8001bb2:	f7ff ffc7 	bl	8001b44 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8001bb6:	79bb      	ldrb	r3, [r7, #6]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	2063      	movs	r0, #99	; 0x63
 8001bbc:	f7ff ffc2 	bl	8001b44 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001bc0:	2181      	movs	r1, #129	; 0x81
 8001bc2:	2027      	movs	r0, #39	; 0x27
 8001bc4:	f7ff ffbe 	bl	8001b44 <writeRegister>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	603a      	str	r2, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001be0:	218c      	movs	r1, #140	; 0x8c
 8001be2:	2025      	movs	r0, #37	; 0x25
 8001be4:	f7ff ffae 	bl	8001b44 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4619      	mov	r1, r3
 8001bec:	2026      	movs	r0, #38	; 0x26
 8001bee:	f7ff ffa9 	bl	8001b44 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2027      	movs	r0, #39	; 0x27
 8001bfe:	f7ff ffa1 	bl	8001b44 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 fee2 	bl	80029cc <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	2049      	movs	r0, #73	; 0x49
 8001c10:	f7ff ffad 	bl	8001b6e <readRegisters>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <whoAmI+0x18>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2075      	movs	r0, #117	; 0x75
 8001c26:	f7ff ffa2 	bl	8001b6e <readRegisters>

	// return the register value
	return _buffer[0];
 8001c2a:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <whoAmI+0x18>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000230 	.word	0x20000230

08001c38 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <whoAmIAK8963+0x18>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff ffc5 	bl	8001bd0 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8001c46:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <whoAmIAK8963+0x18>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000230 	.word	0x20000230

08001c54 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	206b      	movs	r0, #107	; 0x6b
 8001c5e:	f7ff ff71 	bl	8001b44 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001c62:	2120      	movs	r1, #32
 8001c64:	206a      	movs	r0, #106	; 0x6a
 8001c66:	f7ff ff6d 	bl	8001b44 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8001c6a:	210d      	movs	r1, #13
 8001c6c:	2024      	movs	r0, #36	; 0x24
 8001c6e:	f7ff ff69 	bl	8001b44 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001c72:	2100      	movs	r1, #0
 8001c74:	200a      	movs	r0, #10
 8001c76:	f7ff ff8d 	bl	8001b94 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	206b      	movs	r0, #107	; 0x6b
 8001c7e:	f7ff ff61 	bl	8001b44 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8001c82:	200a      	movs	r0, #10
 8001c84:	f000 fea2 	bl	80029cc <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8001c88:	2101      	movs	r1, #1
 8001c8a:	200b      	movs	r0, #11
 8001c8c:	f7ff ff82 	bl	8001b94 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001c90:	2101      	movs	r1, #1
 8001c92:	206b      	movs	r0, #107	; 0x6b
 8001c94:	f7ff ff56 	bl	8001b44 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8001c98:	f7ff ffc0 	bl	8001c1c <whoAmI>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) && ( who != 0x73))
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b71      	cmp	r3, #113	; 0x71
 8001ca4:	d004      	beq.n	8001cb0 <MPU9250_Init+0x5c>
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b73      	cmp	r3, #115	; 0x73
 8001caa:	d001      	beq.n	8001cb0 <MPU9250_Init+0x5c>
	{
		return 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e051      	b.n	8001d54 <MPU9250_Init+0x100>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	206c      	movs	r0, #108	; 0x6c
 8001cb4:	f7ff ff46 	bl	8001b44 <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8001cb8:	2118      	movs	r1, #24
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f7ff ff42 	bl	8001b44 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201b      	movs	r0, #27
 8001cc4:	f7ff ff3e 	bl	8001b44 <writeRegister>

	// setting bandwidth to 184Hz as default
	//TODO: 21-03-21 STJ 수정 184Hz에서 10Hz로
	writeRegister(ACCEL_CONFIG2,DLPF_10); //184
 8001cc8:	2105      	movs	r1, #5
 8001cca:	201d      	movs	r0, #29
 8001ccc:	f7ff ff3a 	bl	8001b44 <writeRegister>

	// setting gyro bandwidth to 184Hz
	//TODO: 21-03-21 STJ 수정 184Hz에서 10Hz로
	writeRegister(CONFIG_M,DLPF_10); //184
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	201a      	movs	r0, #26
 8001cd4:	f7ff ff36 	bl	8001b44 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2019      	movs	r0, #25
 8001cdc:	f7ff ff32 	bl	8001b44 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	206a      	movs	r0, #106	; 0x6a
 8001ce4:	f7ff ff2e 	bl	8001b44 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8001ce8:	210d      	movs	r1, #13
 8001cea:	2024      	movs	r0, #36	; 0x24
 8001cec:	f7ff ff2a 	bl	8001b44 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001cf0:	f7ff ffa2 	bl	8001c38 <whoAmIAK8963>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b48      	cmp	r3, #72	; 0x48
 8001cf8:	d001      	beq.n	8001cfe <MPU9250_Init+0xaa>
	{
		return 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e02a      	b.n	8001d54 <MPU9250_Init+0x100>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	200a      	movs	r0, #10
 8001d02:	f7ff ff47 	bl	8001b94 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001d06:	2064      	movs	r0, #100	; 0x64
 8001d08:	f000 fe60 	bl	80029cc <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f7ff ff40 	bl	8001b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001d14:	2064      	movs	r0, #100	; 0x64
 8001d16:	f000 fe59 	bl	80029cc <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <MPU9250_Init+0x108>)
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff ff56 	bl	8001bd0 <readAK8963Registers>


	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001d24:	2100      	movs	r1, #0
 8001d26:	200a      	movs	r0, #10
 8001d28:	f7ff ff34 	bl	8001b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001d2c:	2064      	movs	r0, #100	; 0x64
 8001d2e:	f000 fe4d 	bl	80029cc <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 8001d32:	2116      	movs	r1, #22
 8001d34:	200a      	movs	r0, #10
 8001d36:	f7ff ff2d 	bl	8001b94 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001d3a:	2064      	movs	r0, #100	; 0x64
 8001d3c:	f000 fe46 	bl	80029cc <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8001d40:	2101      	movs	r1, #1
 8001d42:	206b      	movs	r0, #107	; 0x6b
 8001d44:	f7ff fefe 	bl	8001b44 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <MPU9250_Init+0x10c>)
 8001d4a:	2107      	movs	r1, #7
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f7ff ff3f 	bl	8001bd0 <readAK8963Registers>

	// successful init, return 0
	return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000248 	.word	0x20000248
 8001d60:	20000230 	.word	0x20000230

08001d64 <MPU6050_GetData_Axis>:


/* 상보 필터 계산을 위한 축 구하기 함수*/

void MPU6050_GetData_Axis(int16_t* Ac_X, int16_t* Ac_Y, int16_t* Ac_Z, int16_t* Gy_X, int16_t* Gy_Y, int16_t* Gy_Z, int16_t* Ma_X,int16_t* Ma_Y, int16_t* Ma_Z)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b08f      	sub	sp, #60	; 0x3c
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]

	uint8_t Buffer[19] = {0};
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	f8c3 200b 	str.w	r2, [r3, #11]
	int16_t InBuffer[8] = {0};
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]

	readRegisters(ACCEL_OUT, 19, Buffer);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2113      	movs	r1, #19
 8001d9c:	203b      	movs	r0, #59	; 0x3b
 8001d9e:	f7ff fee6 	bl	8001b6e <readRegisters>


	/* 가속도계 */
	InBuffer[0] = (((int16_t)Buffer[0]) << 8) | Buffer[1];
 8001da2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	82bb      	strh	r3, [r7, #20]
	InBuffer[1] = (((int16_t)Buffer[2]) << 8) | Buffer[3];
 8001db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	82fb      	strh	r3, [r7, #22]
	InBuffer[2] = (((int16_t)Buffer[4]) << 8) | Buffer[5];
 8001dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	833b      	strh	r3, [r7, #24]

	/* 자이로계 */
	InBuffer[3] = (((int16_t)Buffer[8]) << 8) |  Buffer[9];
 8001dde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	837b      	strh	r3, [r7, #26]
	InBuffer[4] = (((int16_t)Buffer[10]) << 8) | Buffer[11];
 8001df2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	83bb      	strh	r3, [r7, #28]
	InBuffer[5] = (((int16_t)Buffer[12]) << 8) | Buffer[13];
 8001e06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	83fb      	strh	r3, [r7, #30]

	/* 지자기계 */
	InBuffer[6] = (((int16_t)Buffer[15]) << 8) | Buffer[14];
 8001e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	843b      	strh	r3, [r7, #32]
	InBuffer[7] = (((int16_t)Buffer[17]) << 8) | Buffer[16];
 8001e2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	847b      	strh	r3, [r7, #34]	; 0x22
	InBuffer[8] = (((int16_t)Buffer[19]) << 8) | Buffer[18];
 8001e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	84bb      	strh	r3, [r7, #36]	; 0x24



	/* 가속도  스케일 비조정  */
    *Ac_X = *(InBuffer + 0);
 8001e56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	801a      	strh	r2, [r3, #0]
	*Ac_Y = *(InBuffer + 1);
 8001e5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	801a      	strh	r2, [r3, #0]
	*Ac_Z = *(InBuffer + 2);
 8001e66:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	801a      	strh	r2, [r3, #0]

	/* 자이로 스케일 비조정 */
	*Gy_X = *(InBuffer + 3);
 8001e6e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	801a      	strh	r2, [r3, #0]
	*Gy_Y = *(InBuffer + 4);
 8001e76:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7c:	801a      	strh	r2, [r3, #0]
	*Gy_Z = *(InBuffer + 5);
 8001e7e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e84:	801a      	strh	r2, [r3, #0]

	/* 지자계 스케일 조정 */
	*Ma_X = *(InBuffer + 6)* ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f);
 8001e86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ff22 	bl	8000cd4 <__aeabi_i2f>
 8001e90:	4604      	mov	r4, r0
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <MPU6050_GetData_Axis+0x208>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	3b80      	subs	r3, #128	; 0x80
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff1b 	bl	8000cd4 <__aeabi_i2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff f81d 	bl	8000ee4 <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fe5b 	bl	8000b6c <__addsf3>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f7fe ff5e 	bl	8000d7c <__aeabi_fmul>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f8aa 	bl	800101c <__aeabi_f2iz>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ece:	801a      	strh	r2, [r3, #0]
	*Ma_Y = *(InBuffer + 7)* ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f);
 8001ed0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fefd 	bl	8000cd4 <__aeabi_i2f>
 8001eda:	4604      	mov	r4, r0
 8001edc:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <MPU6050_GetData_Axis+0x208>)
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	3b80      	subs	r3, #128	; 0x80
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fef6 	bl	8000cd4 <__aeabi_i2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fff8 	bl	8000ee4 <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe36 	bl	8000b6c <__addsf3>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7fe ff39 	bl	8000d7c <__aeabi_fmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f885 	bl	800101c <__aeabi_f2iz>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b21a      	sxth	r2, r3
 8001f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f18:	801a      	strh	r2, [r3, #0]
	*Ma_Z = *(InBuffer + 8)* ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f);
 8001f1a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fed8 	bl	8000cd4 <__aeabi_i2f>
 8001f24:	4604      	mov	r4, r0
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MPU6050_GetData_Axis+0x208>)
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	3b80      	subs	r3, #128	; 0x80
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fed1 	bl	8000cd4 <__aeabi_i2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ffd3 	bl	8000ee4 <__aeabi_fdiv>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fe11 	bl	8000b6c <__addsf3>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7fe ff14 	bl	8000d7c <__aeabi_fmul>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f860 	bl	800101c <__aeabi_f2iz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f62:	801a      	strh	r2, [r3, #0]


}
 8001f64:	bf00      	nop
 8001f66:	373c      	adds	r7, #60	; 0x3c
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	20000248 	.word	0x20000248

08001f70 <calibrate>:


 void calibrate(int16_t* Base_Ax , int16_t* Base_Ay, int16_t* Base_Az, int16_t*Base_Gx, int16_t* Base_Gy, int16_t* Base_Gz)	//초기값 읽기
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b095      	sub	sp, #84	; 0x54
 8001f74:	af06      	add	r7, sp, #24
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
	int8_t   cal = 10;
 8001f7e:	230a      	movs	r3, #10
 8001f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t  Ac_X,    Ac_Y,   Ac_Z,   Gy_X,   Gy_Y,   Gy_Z ;
	int16_t	 TempAx , TempAy, TempAz, TempGx, TempGy, TempGz, TempMx, TempMy, TempMz;

	for(int i=0; i<cal; i++)	//평균
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f88:	e04d      	b.n	8002026 <calibrate+0xb6>
	{
		 MPU6050_GetData_Axis(&TempAx, &TempAy, &TempAz, &TempGx, &TempGy, &TempGz, &TempMx, &TempMy, &TempMz);
 8001f8a:	f107 041e 	add.w	r4, r7, #30
 8001f8e:	f107 0220 	add.w	r2, r7, #32
 8001f92:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001f96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	9304      	str	r3, [sp, #16]
 8001fa0:	f107 0316 	add.w	r3, r7, #22
 8001fa4:	9303      	str	r3, [sp, #12]
 8001fa6:	f107 0318 	add.w	r3, r7, #24
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	f107 031a 	add.w	r3, r7, #26
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	4623      	mov	r3, r4
 8001fba:	f7ff fed3 	bl	8001d64 <MPU6050_GetData_Axis>

		 Ac_X  +=  -TempAx - 16383;
 8001fbe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8001fce:	3b3f      	subs	r3, #63	; 0x3f
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	86fb      	strh	r3, [r7, #54]	; 0x36
		 Ac_Y  +=  -TempAy;
 8001fd4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	86bb      	strh	r3, [r7, #52]	; 0x34
		 Ac_Z  +=   TempAz;
 8001fe2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001fe4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	867b      	strh	r3, [r7, #50]	; 0x32

		 Gy_X  +=   TempGx;
 8001ff0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001ff2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	863b      	strh	r3, [r7, #48]	; 0x30
		 Gy_Y  +=   TempGy;
 8001ffe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002000:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002004:	b29b      	uxth	r3, r3
 8002006:	4413      	add	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 Gy_Z  +=   TempGz;
 800200c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800200e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	85bb      	strh	r3, [r7, #44]	; 0x2c

		 delay(100);
 800201a:	2064      	movs	r0, #100	; 0x64
 800201c:	f7ff fa4a 	bl	80014b4 <delay>
	for(int i=0; i<cal; i++)	//평균
 8002020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002022:	3301      	adds	r3, #1
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
 8002026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800202a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800202c:	429a      	cmp	r2, r3
 800202e:	dbac      	blt.n	8001f8a <calibrate+0x1a>
	}

	Ac_X /= cal;
 8002030:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002038:	fb92 f3f3 	sdiv	r3, r2, r3
 800203c:	86fb      	strh	r3, [r7, #54]	; 0x36
	Ac_Y /= cal;
 800203e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002046:	fb92 f3f3 	sdiv	r3, r2, r3
 800204a:	86bb      	strh	r3, [r7, #52]	; 0x34
	Ac_Z /= cal;
 800204c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002050:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002054:	fb92 f3f3 	sdiv	r3, r2, r3
 8002058:	867b      	strh	r3, [r7, #50]	; 0x32

	Gy_X /= cal;
 800205a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800205e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002062:	fb92 f3f3 	sdiv	r3, r2, r3
 8002066:	863b      	strh	r3, [r7, #48]	; 0x30
	Gy_Y /= cal;
 8002068:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800206c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002070:	fb92 f3f3 	sdiv	r3, r2, r3
 8002074:	85fb      	strh	r3, [r7, #46]	; 0x2e
	Gy_Z /= cal;
 8002076:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800207a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800207e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002082:	85bb      	strh	r3, [r7, #44]	; 0x2c

	*Base_Ax = Ac_X;	//초기 값으로 저장
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002088:	801a      	strh	r2, [r3, #0]
	*Base_Ay = Ac_Y;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800208e:	801a      	strh	r2, [r3, #0]
	*Base_Az = Ac_Z;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002094:	801a      	strh	r2, [r3, #0]

	*Base_Gx = Gy_X;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800209a:	801a      	strh	r2, [r3, #0]
	*Base_Gy = Gy_Y;
 800209c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80020a0:	801a      	strh	r2, [r3, #0]
	*Base_Gz = Gy_Z;
 80020a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80020a6:	801a      	strh	r2, [r3, #0]


}
 80020a8:	bf00      	nop
 80020aa:	373c      	adds	r7, #60	; 0x3c
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}

080020b0 <NRF24L01_Init>:



/* TODO: nRF24L01 Pin 변경 시 헤더파일만 변경하면 됨 (2)*/
void NRF24L01_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
     /* 클럭 활성화는  bsp.c 에서 처리 함*/

     GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]

     /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(NRF24L01_CE_PORT , NRF24L01_CE_PIN , GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2120      	movs	r1, #32
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <NRF24L01_Init+0x60>)
 80020c8:	f001 fb8e 	bl	80037e8 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2110      	movs	r1, #16
 80020d0:	480f      	ldr	r0, [pc, #60]	; (8002110 <NRF24L01_Init+0x60>)
 80020d2:	f001 fb89 	bl	80037e8 <HAL_GPIO_WritePin>

     /*Configure GPIO pins : PBPin PBPin */
     GPIO_InitStruct.Pin = NRF24L01_CE_PIN|NRF24L01_SPI_CS_PIN;
 80020d6:	2330      	movs	r3, #48	; 0x30
 80020d8:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2302      	movs	r3, #2
 80020e4:	60fb      	str	r3, [r7, #12]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	463b      	mov	r3, r7
 80020e8:	4619      	mov	r1, r3
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <NRF24L01_Init+0x60>)
 80020ec:	f001 f9e8 	bl	80034c0 <HAL_GPIO_Init>

     /*Configure GPIO pin : PtPin */
     GPIO_InitStruct.Pin =  NRF24L01_IRQ_PIN;
 80020f0:	2308      	movs	r3, #8
 80020f2:	603b      	str	r3, [r7, #0]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f8:	2301      	movs	r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
     HAL_GPIO_Init(NRF24L01_IRQ_PORT , &GPIO_InitStruct);
 80020fc:	463b      	mov	r3, r7
 80020fe:	4619      	mov	r1, r3
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <NRF24L01_Init+0x60>)
 8002102:	f001 f9dd 	bl	80034c0 <HAL_GPIO_Init>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40010c00 	.word	0x40010c00

08002114 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <MX_SPI1_Init+0x64>)
 800211a:	4a18      	ldr	r2, [pc, #96]	; (800217c <MX_SPI1_Init+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_SPI1_Init+0x64>)
 8002120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_SPI1_Init+0x64>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <MX_SPI1_Init+0x64>)
 800212e:	2200      	movs	r2, #0
 8002130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_SPI1_Init+0x64>)
 8002134:	2200      	movs	r2, #0
 8002136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_SPI1_Init+0x64>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_SPI1_Init+0x64>)
 8002140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_SPI1_Init+0x64>)
 8002148:	2210      	movs	r2, #16
 800214a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_SPI1_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_SPI1_Init+0x64>)
 8002160:	220a      	movs	r2, #10
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <MX_SPI1_Init+0x64>)
 8002166:	f003 f8cf 	bl	8005308 <HAL_SPI_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002170:	f7ff f9f7 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200003bc 	.word	0x200003bc
 800217c:	40013000 	.word	0x40013000

08002180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_SPI_MspInit+0x88>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12f      	bne.n	8002200 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_SPI_MspInit+0x8c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021d0:	23a0      	movs	r3, #160	; 0xa0
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	480b      	ldr	r0, [pc, #44]	; (8002210 <HAL_SPI_MspInit+0x90>)
 80021e4:	f001 f96c 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021e8:	2340      	movs	r3, #64	; 0x40
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_SPI_MspInit+0x90>)
 80021fc:	f001 f960 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013000 	.word	0x40013000
 800220c:	40021000 	.word	0x40021000
 8002210:	40010800 	.word	0x40010800

08002214 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	; 0x30
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	2224      	movs	r2, #36	; 0x24
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fb4e 	bl	80068c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <MX_TIM2_Init+0xa4>)
 8002232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002238:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <MX_TIM2_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <MX_TIM2_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 560-1;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <MX_TIM2_Init+0xa4>)
 8002246:	f240 222f 	movw	r2, #559	; 0x22f
 800224a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <MX_TIM2_Init+0xa4>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <MX_TIM2_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002258:	2303      	movs	r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <MX_TIM2_Init+0xa4>)
 8002284:	f003 f9ce 	bl	8005624 <HAL_TIM_Encoder_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800228e:	f7ff f968 	bl	8001562 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4806      	ldr	r0, [pc, #24]	; (80022b8 <MX_TIM2_Init+0xa4>)
 80022a0:	f003 fd6a 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022aa:	f7ff f95a 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	3730      	adds	r7, #48	; 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200004a4 	.word	0x200004a4

080022bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c2:	f107 0320 	add.w	r3, r7, #32
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]
 80022da:	615a      	str	r2, [r3, #20]
 80022dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_TIM3_Init+0xc0>)
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <MX_TIM3_Init+0xc4>)
 80022e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <MX_TIM3_Init+0xc0>)
 80022e6:	2247      	movs	r2, #71	; 0x47
 80022e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_TIM3_Init+0xc0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <MX_TIM3_Init+0xc0>)
 80022f2:	2264      	movs	r2, #100	; 0x64
 80022f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_TIM3_Init+0xc0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <MX_TIM3_Init+0xc0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002302:	481e      	ldr	r0, [pc, #120]	; (800237c <MX_TIM3_Init+0xc0>)
 8002304:	f003 f884 	bl	8005410 <HAL_TIM_PWM_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800230e:	f7ff f928 	bl	8001562 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	4619      	mov	r1, r3
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <MX_TIM3_Init+0xc0>)
 8002322:	f003 fd29 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800232c:	f7ff f919 	bl	8001562 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002330:	2360      	movs	r3, #96	; 0x60
 8002332:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002334:	2332      	movs	r3, #50	; 0x32
 8002336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2208      	movs	r2, #8
 8002344:	4619      	mov	r1, r3
 8002346:	480d      	ldr	r0, [pc, #52]	; (800237c <MX_TIM3_Init+0xc0>)
 8002348:	f003 fa0e 	bl	8005768 <HAL_TIM_PWM_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002352:	f7ff f906 	bl	8001562 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	220c      	movs	r2, #12
 800235a:	4619      	mov	r1, r3
 800235c:	4807      	ldr	r0, [pc, #28]	; (800237c <MX_TIM3_Init+0xc0>)
 800235e:	f003 fa03 	bl	8005768 <HAL_TIM_PWM_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002368:	f7ff f8fb 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <MX_TIM3_Init+0xc0>)
 800236e:	f000 f8f7 	bl	8002560 <HAL_TIM_MspPostInit>

}
 8002372:	bf00      	nop
 8002374:	3728      	adds	r7, #40	; 0x28
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000045c 	.word	0x2000045c
 8002380:	40000400 	.word	0x40000400

08002384 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f004 fa96 	bl	80068c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023a2:	4a21      	ldr	r2, [pc, #132]	; (8002428 <MX_TIM4_Init+0xa4>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 560-1;
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023b4:	f240 222f 	movw	r2, #559	; 0x22f
 80023b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023c6:	2303      	movs	r3, #3
 80023c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023de:	2301      	movs	r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <MX_TIM4_Init+0xa0>)
 80023f2:	f003 f917 	bl	8005624 <HAL_TIM_Encoder_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80023fc:	f7ff f8b1 	bl	8001562 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	4619      	mov	r1, r3
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_TIM4_Init+0xa0>)
 800240e:	f003 fcb3 	bl	8005d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002418:	f7ff f8a3 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000414 	.word	0x20000414
 8002428:	40000800 	.word	0x40000800

0800242c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	; 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d124      	bne.n	8002496 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	61d3      	str	r3, [r2, #28]
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a29      	ldr	r2, [pc, #164]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800247c:	2303      	movs	r3, #3
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	4821      	ldr	r0, [pc, #132]	; (8002514 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002490:	f001 f816 	bl	80034c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002494:	e037      	b.n	8002506 <HAL_TIM_Encoder_MspInit+0xda>
  else if(tim_encoderHandle->Instance==TIM4)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_TIM_Encoder_MspInit+0xec>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d132      	bne.n	8002506 <HAL_TIM_Encoder_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a1a      	ldr	r2, [pc, #104]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024be:	f043 0320 	orr.w	r3, r3, #32
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_TIM_Encoder_MspInit+0xe4>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80024d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	4619      	mov	r1, r3
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <HAL_TIM_Encoder_MspInit+0xf0>)
 80024e6:	f000 ffeb 	bl	80034c0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_TIM_Encoder_MspInit+0xf4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	6053      	str	r3, [r2, #4]
}
 8002506:	bf00      	nop
 8002508:	3730      	adds	r7, #48	; 0x30
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	40010800 	.word	0x40010800
 8002518:	40000800 	.word	0x40000800
 800251c:	40011400 	.word	0x40011400
 8002520:	40010000 	.word	0x40010000

08002524 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x34>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d10b      	bne.n	800254e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_TIM_PWM_MspInit+0x38>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_TIM_PWM_MspInit+0x38>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_TIM_PWM_MspInit+0x38>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40000400 	.word	0x40000400
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_TIM_MspPostInit+0x58>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d117      	bne.n	80025b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_TIM_MspPostInit+0x5c>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_TIM_MspPostInit+0x5c>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_TIM_MspPostInit+0x5c>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002598:	2303      	movs	r3, #3
 800259a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4619      	mov	r1, r3
 80025aa:	4805      	ldr	r0, [pc, #20]	; (80025c0 <HAL_TIM_MspPostInit+0x60>)
 80025ac:	f000 ff88 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010c00 	.word	0x40010c00

080025c4 <uartInit>:
DMA_HandleTypeDef hdma_usart1_rx;



bool uartInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	e007      	b.n	80025e0 <uartInit+0x1c>
	{
		is_open[i] = false;
 80025d0:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <uartInit+0x30>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH; i++)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3301      	adds	r3, #1
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	ddf4      	ble.n	80025d0 <uartInit+0xc>
	}

	return true;
 80025e6:	2301      	movs	r3, #1

}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000024c 	.word	0x2000024c

080025f8 <uartOpen>:



bool uartOpen(uint8_t ch , uint32_t baud)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d16d      	bne.n	80026ea <uartOpen+0xf2>
	{
		case _DEF_UART1:

			  huart1.Instance 			 = USART1;
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <uartOpen+0xfc>)
 8002610:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <uartOpen+0x100>)
 8002612:	601a      	str	r2, [r3, #0]
			  huart1.Init.BaudRate 		 = baud;
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <uartOpen+0xfc>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6053      	str	r3, [r2, #4]
			  huart1.Init.WordLength 	 = UART_WORDLENGTH_8B;
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <uartOpen+0xfc>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
			  huart1.Init.StopBits 		 = UART_STOPBITS_1;
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <uartOpen+0xfc>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
			  huart1.Init.Parity 		 = UART_PARITY_NONE;
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <uartOpen+0xfc>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
			  huart1.Init.Mode 			 = UART_MODE_TX_RX;
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <uartOpen+0xfc>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
			  huart1.Init.HwFlowCtl		 = UART_HWCONTROL_NONE;
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <uartOpen+0xfc>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
			  huart1.Init.OverSampling 	 = UART_OVERSAMPLING_16;
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <uartOpen+0xfc>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]

			  HAL_UART_Init(&huart1);
 800263e:	482d      	ldr	r0, [pc, #180]	; (80026f4 <uartOpen+0xfc>)
 8002640:	f003 fc06 	bl	8005e50 <HAL_UART_Init>

			  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <uartOpen+0x104>)
 800264a:	4413      	add	r3, r2
 800264c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002650:	492b      	ldr	r1, [pc, #172]	; (8002700 <uartOpen+0x108>)
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f8e3 	bl	800181e <qbufferCreate>

			  __HAL_RCC_DMA1_CLK_ENABLE();
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <uartOpen+0x10c>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	4a29      	ldr	r2, [pc, #164]	; (8002704 <uartOpen+0x10c>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6153      	str	r3, [r2, #20]
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <uartOpen+0x10c>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]

			  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	200f      	movs	r0, #15
 8002676:	f000 faa4 	bl	8002bc2 <HAL_NVIC_SetPriority>
			  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800267a:	200f      	movs	r0, #15
 800267c:	f000 fabd 	bl	8002bfa <HAL_NVIC_EnableIRQ>




			  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002680:	481c      	ldr	r0, [pc, #112]	; (80026f4 <uartOpen+0xfc>)
 8002682:	f003 fbe5 	bl	8005e50 <HAL_UART_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <uartOpen+0x9a>
			  {
			   ret = false;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]

				  }
				  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
				  qbuffer[ch].out = qbuffer[ch].in;
			  }
			break;
 8002690:	e02a      	b.n	80026e8 <uartOpen+0xf0>
				  ret = true;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
				  is_open[ch] = true;
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <uartOpen+0x110>)
 800269a:	2101      	movs	r1, #1
 800269c:	54d1      	strb	r1, [r2, r3]
				  if(HAL_UART_Receive_DMA(&huart1, (uint8_t*)&rx_buf[0], 256) != HAL_OK) /* 수신: Interrupt 방식에서  DMA 방식으로 수정 */
 800269e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a2:	4917      	ldr	r1, [pc, #92]	; (8002700 <uartOpen+0x108>)
 80026a4:	4813      	ldr	r0, [pc, #76]	; (80026f4 <uartOpen+0xfc>)
 80026a6:	f003 fcb3 	bl	8006010 <HAL_UART_Receive_DMA>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <uartOpen+0xbc>
					  ret = false;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
				  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <uartOpen+0x104>)
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	3308      	adds	r3, #8
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <uartOpen+0x114>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	1a8a      	subs	r2, r1, r2
 80026ca:	490c      	ldr	r1, [pc, #48]	; (80026fc <uartOpen+0x104>)
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	440b      	add	r3, r1
 80026d0:	601a      	str	r2, [r3, #0]
				  qbuffer[ch].out = qbuffer[ch].in;
 80026d2:	79fa      	ldrb	r2, [r7, #7]
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4909      	ldr	r1, [pc, #36]	; (80026fc <uartOpen+0x104>)
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	440a      	add	r2, r1
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4907      	ldr	r1, [pc, #28]	; (80026fc <uartOpen+0x104>)
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	440b      	add	r3, r1
 80026e4:	3304      	adds	r3, #4
 80026e6:	601a      	str	r2, [r3, #0]
			break;
 80026e8:	bf00      	nop
	}


	return ret;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000530 	.word	0x20000530
 80026f8:	40013800 	.word	0x40013800
 80026fc:	20000250 	.word	0x20000250
 8002700:	20000260 	.word	0x20000260
 8002704:	40021000 	.word	0x40021000
 8002708:	2000024c 	.word	0x2000024c
 800270c:	200004ec 	.word	0x200004ec

08002710 <uartWrite>:

}


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	73fb      	strb	r3, [r7, #15]
		uint32_t ret = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
		HAL_StatusTypeDef status;

		switch(ch)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10e      	bne.n	8002746 <uartWrite+0x36>
		{
			case _DEF_UART1:
			    status =  HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2364      	movs	r3, #100	; 0x64
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <uartWrite+0x40>)
 8002732:	f003 fbda 	bl	8005eea <HAL_UART_Transmit>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]
			    if(status == HAL_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <uartWrite+0x34>
			    {
			    	ret = length;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	617b      	str	r3, [r7, #20]
			    }
				break;
 8002744:	bf00      	nop
		}
		return ret;
 8002746:	697b      	ldr	r3, [r7, #20]

}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000530 	.word	0x20000530

08002754 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8002754:	b40e      	push	{r1, r2, r3}
 8002756:	b580      	push	{r7, lr}
 8002758:	b0c7      	sub	sp, #284	; 0x11c
 800275a:	af00      	add	r7, sp, #0
 800275c:	4602      	mov	r2, r0
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;

	uint32_t ret;

	va_start(args, fmt);
 8002762:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	601a      	str	r2, [r3, #0]

	len = vsnprintf(buf, 256, fmt, args);
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	f107 0010 	add.w	r0, r7, #16
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800277a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277e:	f004 fd35 	bl	80071ec <vsniprintf>
 8002782:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret =  uartWrite(ch, (uint8_t *)buf, len);
 8002786:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800278a:	f107 0110 	add.w	r1, r7, #16
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ffbc 	bl	8002710 <uartWrite>
 8002798:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 800279c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80027a6:	46bd      	mov	sp, r7
 80027a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027ac:	b003      	add	sp, #12
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART1)
   {

   }
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   {
	 qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
	 HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1],1);
   }
#endif
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_UART_MspInit+0xe8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d15f      	bne.n	80028b4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_UART_MspInit+0xec>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <HAL_UART_MspInit+0xec>)
 80027fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_UART_MspInit+0xec>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_UART_MspInit+0xec>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a2b      	ldr	r2, [pc, #172]	; (80028c0 <HAL_UART_MspInit+0xec>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_UART_MspInit+0xec>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	4619      	mov	r1, r3
 8002838:	4822      	ldr	r0, [pc, #136]	; (80028c4 <HAL_UART_MspInit+0xf0>)
 800283a:	f000 fe41 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800283e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4619      	mov	r1, r3
 8002852:	481c      	ldr	r0, [pc, #112]	; (80028c4 <HAL_UART_MspInit+0xf0>)
 8002854:	f000 fe34 	bl	80034c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 800285a:	4a1c      	ldr	r2, [pc, #112]	; (80028cc <HAL_UART_MspInit+0xf8>)
 800285c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 800287e:	2220      	movs	r2, #32
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002888:	480f      	ldr	r0, [pc, #60]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 800288a:	f000 f9d1 	bl	8002c30 <HAL_DMA_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002894:	f7fe fe65 	bl	8001562 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
 800289e:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_UART_MspInit+0xf4>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2025      	movs	r0, #37	; 0x25
 80028aa:	f000 f98a 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ae:	2025      	movs	r0, #37	; 0x25
 80028b0:	f000 f9a3 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028b4:	bf00      	nop
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010800 	.word	0x40010800
 80028c8:	200004ec 	.word	0x200004ec
 80028cc:	40020058 	.word	0x40020058

080028d0 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	bspInit();
 80028d4:	f7fe fdd4 	bl	8001480 <bspInit>

	//TODO: HW 설정 (3)
	uartInit();
 80028d8:	f7ff fe74 	bl	80025c4 <uartInit>

	MX_TIM2_Init();
 80028dc:	f7ff fc9a 	bl	8002214 <MX_TIM2_Init>
	MX_TIM3_Init();
 80028e0:	f7ff fcec 	bl	80022bc <MX_TIM3_Init>
	MX_TIM4_Init();
 80028e4:	f7ff fd4e 	bl	8002384 <MX_TIM4_Init>
	MX_I2C2_Init();
 80028e8:	f7fe ffb4 	bl	8001854 <MX_I2C2_Init>
	MX_SPI1_Init();
 80028ec:	f7ff fc12 	bl	8002114 <MX_SPI1_Init>
	motorInit(100); //duty ratio 0~100
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	f7ff f873 	bl	80019dc <motorInit>
	MPU9250_Init();
 80028f6:	f7ff f9ad 	bl	8001c54 <MPU9250_Init>
	NRF24L01_Init();
 80028fa:	f7ff fbd9 	bl	80020b0 <NRF24L01_Init>
	LedInit();
 80028fe:	f7ff f817 	bl	8001930 <LedInit>

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_Init+0x28>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <HAL_Init+0x28>)
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f947 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	2000      	movs	r0, #0
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7fe fe22 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f95f 	bl	8002c16 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f927 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	; (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000000 	.word	0x20000000
 800298c:	20000038 	.word	0x20000038
 8002990:	20000034 	.word	0x20000034

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x1c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x20>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <HAL_IncTick+0x20>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000038 	.word	0x20000038
 80029b4:	20000570 	.word	0x20000570

080029b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_GetTick+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000570 	.word	0x20000570

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fff0 	bl	80029b8 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffe0 	bl	80029b8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000038 	.word	0x20000038

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4906      	ldr	r1, [pc, #24]	; (8002aac <__NVIC_EnableIRQ+0x34>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff90 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff2d 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff42 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff90 	bl	8002b04 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5f 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff35 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e059      	b.n	8002cfa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_DMA_Init+0xd4>)
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d80f      	bhi.n	8002c72 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_DMA_Init+0xd8>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	; (8002d0c <HAL_DMA_Init+0xdc>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a28      	ldr	r2, [pc, #160]	; (8002d10 <HAL_DMA_Init+0xe0>)
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c70:	e00e      	b.n	8002c90 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_DMA_Init+0xe4>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_DMA_Init+0xdc>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_DMA_Init+0xe8>)
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ca6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002caa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40020407 	.word	0x40020407
 8002d08:	bffdfff8 	.word	0xbffdfff8
 8002d0c:	cccccccd 	.word	0xcccccccd
 8002d10:	40020000 	.word	0x40020000
 8002d14:	bffdfbf8 	.word	0xbffdfbf8
 8002d18:	40020400 	.word	0x40020400

08002d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Start_IT+0x20>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e04a      	b.n	8002dd2 <HAL_DMA_Start_IT+0xb6>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d13a      	bne.n	8002dc4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fb76 	bl	8003464 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 020e 	orr.w	r2, r2, #14
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e00f      	b.n	8002db2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0204 	bic.w	r2, r2, #4
 8002da0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 020a 	orr.w	r2, r2, #10
 8002db0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e005      	b.n	8002dd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e0d6      	b.n	8002fac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020e 	bic.w	r2, r2, #14
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d958      	bls.n	8002edc <HAL_DMA_Abort_IT+0x100>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a63      	ldr	r2, [pc, #396]	; (8002fbc <HAL_DMA_Abort_IT+0x1e0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04f      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0xf8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d048      	beq.n	8002ed0 <HAL_DMA_Abort_IT+0xf4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d040      	beq.n	8002eca <HAL_DMA_Abort_IT+0xee>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d038      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xe8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a5d      	ldr	r2, [pc, #372]	; (8002fcc <HAL_DMA_Abort_IT+0x1f0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d030      	beq.n	8002ebe <HAL_DMA_Abort_IT+0xe2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5b      	ldr	r2, [pc, #364]	; (8002fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d028      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0xdc>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a53      	ldr	r2, [pc, #332]	; (8002fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d020      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0xd6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_DMA_Abort_IT+0xd2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_Abort_IT+0xce>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a54      	ldr	r2, [pc, #336]	; (8002fdc <HAL_DMA_Abort_IT+0x200>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a53      	ldr	r2, [pc, #332]	; (8002fe0 <HAL_DMA_Abort_IT+0x204>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d102      	bne.n	8002e9e <HAL_DMA_Abort_IT+0xc2>
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	e01b      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	e018      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ea8:	e015      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002eaa:	2310      	movs	r3, #16
 8002eac:	e013      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e011      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb6:	e00e      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ebc:	e00b      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec2:	e008      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec8:	e005      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ece:	e002      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	e000      	b.n	8002ed6 <HAL_DMA_Abort_IT+0xfa>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_DMA_Abort_IT+0x208>)
 8002ed8:	6053      	str	r3, [r2, #4]
 8002eda:	e057      	b.n	8002f8c <HAL_DMA_Abort_IT+0x1b0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a36      	ldr	r2, [pc, #216]	; (8002fbc <HAL_DMA_Abort_IT+0x1e0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04f      	beq.n	8002f86 <HAL_DMA_Abort_IT+0x1aa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d048      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x1a6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x1a0>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a32      	ldr	r2, [pc, #200]	; (8002fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d038      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x19a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_DMA_Abort_IT+0x1f0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d030      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x194>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d028      	beq.n	8002f6a <HAL_DMA_Abort_IT+0x18e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d020      	beq.n	8002f64 <HAL_DMA_Abort_IT+0x188>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d019      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x184>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a29      	ldr	r2, [pc, #164]	; (8002fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d012      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x180>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a28      	ldr	r2, [pc, #160]	; (8002fdc <HAL_DMA_Abort_IT+0x200>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00a      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x17a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <HAL_DMA_Abort_IT+0x204>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d102      	bne.n	8002f50 <HAL_DMA_Abort_IT+0x174>
 8002f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4e:	e01b      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f54:	e018      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f5a:	e015      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	e013      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e011      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f68:	e00e      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f6e:	e00b      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f74:	e008      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f7a:	e005      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f80:	e002      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f82:	2310      	movs	r3, #16
 8002f84:	e000      	b.n	8002f88 <HAL_DMA_Abort_IT+0x1ac>
 8002f86:	2301      	movs	r3, #1
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_DMA_Abort_IT+0x20c>)
 8002f8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    } 
  }
  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40020080 	.word	0x40020080
 8002fbc:	40020008 	.word	0x40020008
 8002fc0:	4002001c 	.word	0x4002001c
 8002fc4:	40020030 	.word	0x40020030
 8002fc8:	40020044 	.word	0x40020044
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	4002006c 	.word	0x4002006c
 8002fd4:	40020408 	.word	0x40020408
 8002fd8:	4002041c 	.word	0x4002041c
 8002fdc:	40020430 	.word	0x40020430
 8002fe0:	40020444 	.word	0x40020444
 8002fe4:	40020400 	.word	0x40020400
 8002fe8:	40020000 	.word	0x40020000

08002fec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2204      	movs	r2, #4
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80d6 	beq.w	80031c2 <HAL_DMA_IRQHandler+0x1d6>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80d0 	beq.w	80031c2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b9b      	ldr	r3, [pc, #620]	; (80032b4 <HAL_DMA_IRQHandler+0x2c8>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d958      	bls.n	80030fe <HAL_DMA_IRQHandler+0x112>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a99      	ldr	r2, [pc, #612]	; (80032b8 <HAL_DMA_IRQHandler+0x2cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d04f      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x10a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a98      	ldr	r2, [pc, #608]	; (80032bc <HAL_DMA_IRQHandler+0x2d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d048      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x106>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a96      	ldr	r2, [pc, #600]	; (80032c0 <HAL_DMA_IRQHandler+0x2d4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d040      	beq.n	80030ec <HAL_DMA_IRQHandler+0x100>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a95      	ldr	r2, [pc, #596]	; (80032c4 <HAL_DMA_IRQHandler+0x2d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d038      	beq.n	80030e6 <HAL_DMA_IRQHandler+0xfa>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a93      	ldr	r2, [pc, #588]	; (80032c8 <HAL_DMA_IRQHandler+0x2dc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d030      	beq.n	80030e0 <HAL_DMA_IRQHandler+0xf4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_DMA_IRQHandler+0x2e0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d028      	beq.n	80030da <HAL_DMA_IRQHandler+0xee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a89      	ldr	r2, [pc, #548]	; (80032b4 <HAL_DMA_IRQHandler+0x2c8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d020      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xe8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a8e      	ldr	r2, [pc, #568]	; (80032d0 <HAL_DMA_IRQHandler+0x2e4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d019      	beq.n	80030d0 <HAL_DMA_IRQHandler+0xe4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8c      	ldr	r2, [pc, #560]	; (80032d4 <HAL_DMA_IRQHandler+0x2e8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d012      	beq.n	80030cc <HAL_DMA_IRQHandler+0xe0>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a8b      	ldr	r2, [pc, #556]	; (80032d8 <HAL_DMA_IRQHandler+0x2ec>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00a      	beq.n	80030c6 <HAL_DMA_IRQHandler+0xda>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a89      	ldr	r2, [pc, #548]	; (80032dc <HAL_DMA_IRQHandler+0x2f0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d102      	bne.n	80030c0 <HAL_DMA_IRQHandler+0xd4>
 80030ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030be:	e01b      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030c4:	e018      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ca:	e015      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	e013      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e011      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030d8:	e00e      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030de:	e00b      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030e4:	e008      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030ea:	e005      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f0:	e002      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030f2:	2340      	movs	r3, #64	; 0x40
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_IRQHandler+0x10c>
 80030f6:	2304      	movs	r3, #4
 80030f8:	4a79      	ldr	r2, [pc, #484]	; (80032e0 <HAL_DMA_IRQHandler+0x2f4>)
 80030fa:	6053      	str	r3, [r2, #4]
 80030fc:	e057      	b.n	80031ae <HAL_DMA_IRQHandler+0x1c2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6d      	ldr	r2, [pc, #436]	; (80032b8 <HAL_DMA_IRQHandler+0x2cc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04f      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x1bc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6b      	ldr	r2, [pc, #428]	; (80032bc <HAL_DMA_IRQHandler+0x2d0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d048      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x1b8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6a      	ldr	r2, [pc, #424]	; (80032c0 <HAL_DMA_IRQHandler+0x2d4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_DMA_IRQHandler+0x1b2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a68      	ldr	r2, [pc, #416]	; (80032c4 <HAL_DMA_IRQHandler+0x2d8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d038      	beq.n	8003198 <HAL_DMA_IRQHandler+0x1ac>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <HAL_DMA_IRQHandler+0x2dc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d030      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1a6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_DMA_IRQHandler+0x2e0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d028      	beq.n	800318c <HAL_DMA_IRQHandler+0x1a0>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5d      	ldr	r2, [pc, #372]	; (80032b4 <HAL_DMA_IRQHandler+0x2c8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d020      	beq.n	8003186 <HAL_DMA_IRQHandler+0x19a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a61      	ldr	r2, [pc, #388]	; (80032d0 <HAL_DMA_IRQHandler+0x2e4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d019      	beq.n	8003182 <HAL_DMA_IRQHandler+0x196>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a60      	ldr	r2, [pc, #384]	; (80032d4 <HAL_DMA_IRQHandler+0x2e8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d012      	beq.n	800317e <HAL_DMA_IRQHandler+0x192>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5e      	ldr	r2, [pc, #376]	; (80032d8 <HAL_DMA_IRQHandler+0x2ec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00a      	beq.n	8003178 <HAL_DMA_IRQHandler+0x18c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_DMA_IRQHandler+0x2f0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d102      	bne.n	8003172 <HAL_DMA_IRQHandler+0x186>
 800316c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003170:	e01b      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003172:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003176:	e018      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317c:	e015      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	e013      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003182:	2304      	movs	r3, #4
 8003184:	e011      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003186:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800318a:	e00e      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 800318c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003190:	e00b      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003192:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003196:	e008      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 8003198:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800319c:	e005      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 800319e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a2:	e002      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 80031a4:	2340      	movs	r3, #64	; 0x40
 80031a6:	e000      	b.n	80031aa <HAL_DMA_IRQHandler+0x1be>
 80031a8:	2304      	movs	r3, #4
 80031aa:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_DMA_IRQHandler+0x2f8>)
 80031ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8136 	beq.w	8003424 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	e130      	b.n	8003424 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2202      	movs	r2, #2
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80f8 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x3d8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80f2 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10b      	bne.n	8003206 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 020a 	bic.w	r2, r2, #10
 80031fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_DMA_IRQHandler+0x2c8>)
 800320e:	429a      	cmp	r2, r3
 8003210:	d973      	bls.n	80032fa <HAL_DMA_IRQHandler+0x30e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <HAL_DMA_IRQHandler+0x2cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d06a      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x306>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <HAL_DMA_IRQHandler+0x2d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d063      	beq.n	80032ee <HAL_DMA_IRQHandler+0x302>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <HAL_DMA_IRQHandler+0x2d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d05b      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x2fc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <HAL_DMA_IRQHandler+0x2d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d038      	beq.n	80032ac <HAL_DMA_IRQHandler+0x2c0>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <HAL_DMA_IRQHandler+0x2dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d030      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x2ba>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <HAL_DMA_IRQHandler+0x2e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d028      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x2b4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_DMA_IRQHandler+0x2c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d020      	beq.n	800329a <HAL_DMA_IRQHandler+0x2ae>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1c      	ldr	r2, [pc, #112]	; (80032d0 <HAL_DMA_IRQHandler+0x2e4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_DMA_IRQHandler+0x2aa>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_DMA_IRQHandler+0x2e8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d012      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2a6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <HAL_DMA_IRQHandler+0x2ec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00a      	beq.n	800328c <HAL_DMA_IRQHandler+0x2a0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <HAL_DMA_IRQHandler+0x2f0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d102      	bne.n	8003286 <HAL_DMA_IRQHandler+0x29a>
 8003280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003284:	e036      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 8003286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328a:	e033      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 800328c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003290:	e030      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 8003292:	2320      	movs	r3, #32
 8003294:	e02e      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 8003296:	2302      	movs	r3, #2
 8003298:	e02c      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	e029      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032a4:	e026      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032aa:	e023      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b0:	e020      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032b2:	bf00      	nop
 80032b4:	40020080 	.word	0x40020080
 80032b8:	40020008 	.word	0x40020008
 80032bc:	4002001c 	.word	0x4002001c
 80032c0:	40020030 	.word	0x40020030
 80032c4:	40020044 	.word	0x40020044
 80032c8:	40020058 	.word	0x40020058
 80032cc:	4002006c 	.word	0x4002006c
 80032d0:	40020408 	.word	0x40020408
 80032d4:	4002041c 	.word	0x4002041c
 80032d8:	40020430 	.word	0x40020430
 80032dc:	40020444 	.word	0x40020444
 80032e0:	40020400 	.word	0x40020400
 80032e4:	40020000 	.word	0x40020000
 80032e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ec:	e002      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032ee:	2320      	movs	r3, #32
 80032f0:	e000      	b.n	80032f4 <HAL_DMA_IRQHandler+0x308>
 80032f2:	2302      	movs	r3, #2
 80032f4:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_DMA_IRQHandler+0x444>)
 80032f6:	6053      	str	r3, [r2, #4]
 80032f8:	e057      	b.n	80033aa <HAL_DMA_IRQHandler+0x3be>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_DMA_IRQHandler+0x448>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04f      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x3b8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4b      	ldr	r2, [pc, #300]	; (8003438 <HAL_DMA_IRQHandler+0x44c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d048      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x3b4>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a4a      	ldr	r2, [pc, #296]	; (800343c <HAL_DMA_IRQHandler+0x450>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d040      	beq.n	800339a <HAL_DMA_IRQHandler+0x3ae>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a48      	ldr	r2, [pc, #288]	; (8003440 <HAL_DMA_IRQHandler+0x454>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d038      	beq.n	8003394 <HAL_DMA_IRQHandler+0x3a8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a47      	ldr	r2, [pc, #284]	; (8003444 <HAL_DMA_IRQHandler+0x458>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d030      	beq.n	800338e <HAL_DMA_IRQHandler+0x3a2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a45      	ldr	r2, [pc, #276]	; (8003448 <HAL_DMA_IRQHandler+0x45c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d028      	beq.n	8003388 <HAL_DMA_IRQHandler+0x39c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a44      	ldr	r2, [pc, #272]	; (800344c <HAL_DMA_IRQHandler+0x460>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d020      	beq.n	8003382 <HAL_DMA_IRQHandler+0x396>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a42      	ldr	r2, [pc, #264]	; (8003450 <HAL_DMA_IRQHandler+0x464>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_DMA_IRQHandler+0x392>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a41      	ldr	r2, [pc, #260]	; (8003454 <HAL_DMA_IRQHandler+0x468>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d012      	beq.n	800337a <HAL_DMA_IRQHandler+0x38e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <HAL_DMA_IRQHandler+0x46c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00a      	beq.n	8003374 <HAL_DMA_IRQHandler+0x388>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3e      	ldr	r2, [pc, #248]	; (800345c <HAL_DMA_IRQHandler+0x470>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_DMA_IRQHandler+0x382>
 8003368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336c:	e01b      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	e018      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 8003374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003378:	e015      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 800337a:	2320      	movs	r3, #32
 800337c:	e013      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 800337e:	2302      	movs	r3, #2
 8003380:	e011      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	e00e      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 8003388:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800338c:	e00b      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 800338e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003392:	e008      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 8003394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003398:	e005      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 800339a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800339e:	e002      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 80033a0:	2320      	movs	r3, #32
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_IRQHandler+0x3ba>
 80033a4:	2302      	movs	r3, #2
 80033a6:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <HAL_DMA_IRQHandler+0x474>)
 80033a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d034      	beq.n	8003424 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033c2:	e02f      	b.n	8003424 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2208      	movs	r2, #8
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_DMA_IRQHandler+0x43a>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020e 	bic.w	r2, r2, #14
 80033ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f202 	lsl.w	r2, r1, r2
 80033fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
    }
  }
  return;
 8003424:	bf00      	nop
 8003426:	bf00      	nop
}
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40020400 	.word	0x40020400
 8003434:	40020008 	.word	0x40020008
 8003438:	4002001c 	.word	0x4002001c
 800343c:	40020030 	.word	0x40020030
 8003440:	40020044 	.word	0x40020044
 8003444:	40020058 	.word	0x40020058
 8003448:	4002006c 	.word	0x4002006c
 800344c:	40020080 	.word	0x40020080
 8003450:	40020408 	.word	0x40020408
 8003454:	4002041c 	.word	0x4002041c
 8003458:	40020430 	.word	0x40020430
 800345c:	40020444 	.word	0x40020444
 8003460:	40020000 	.word	0x40020000

08003464 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2101      	movs	r1, #1
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b10      	cmp	r3, #16
 8003490:	d108      	bne.n	80034a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034a2:	e007      	b.n	80034b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b08b      	sub	sp, #44	; 0x2c
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034d2:	e179      	b.n	80037c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034d4:	2201      	movs	r2, #1
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	f040 8168 	bne.w	80037c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4aa0      	ldr	r2, [pc, #640]	; (8003778 <HAL_GPIO_Init+0x2b8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05e      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 80034fc:	4a9e      	ldr	r2, [pc, #632]	; (8003778 <HAL_GPIO_Init+0x2b8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d875      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003502:	4a9e      	ldr	r2, [pc, #632]	; (800377c <HAL_GPIO_Init+0x2bc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d058      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003508:	4a9c      	ldr	r2, [pc, #624]	; (800377c <HAL_GPIO_Init+0x2bc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d86f      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800350e:	4a9c      	ldr	r2, [pc, #624]	; (8003780 <HAL_GPIO_Init+0x2c0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d052      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003514:	4a9a      	ldr	r2, [pc, #616]	; (8003780 <HAL_GPIO_Init+0x2c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d869      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800351a:	4a9a      	ldr	r2, [pc, #616]	; (8003784 <HAL_GPIO_Init+0x2c4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04c      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 8003520:	4a98      	ldr	r2, [pc, #608]	; (8003784 <HAL_GPIO_Init+0x2c4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d863      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003526:	4a98      	ldr	r2, [pc, #608]	; (8003788 <HAL_GPIO_Init+0x2c8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d046      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
 800352c:	4a96      	ldr	r2, [pc, #600]	; (8003788 <HAL_GPIO_Init+0x2c8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d85d      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 8003532:	2b12      	cmp	r3, #18
 8003534:	d82a      	bhi.n	800358c <HAL_GPIO_Init+0xcc>
 8003536:	2b12      	cmp	r3, #18
 8003538:	d859      	bhi.n	80035ee <HAL_GPIO_Init+0x12e>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <HAL_GPIO_Init+0x80>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	080035bb 	.word	0x080035bb
 8003544:	08003595 	.word	0x08003595
 8003548:	080035a7 	.word	0x080035a7
 800354c:	080035e9 	.word	0x080035e9
 8003550:	080035ef 	.word	0x080035ef
 8003554:	080035ef 	.word	0x080035ef
 8003558:	080035ef 	.word	0x080035ef
 800355c:	080035ef 	.word	0x080035ef
 8003560:	080035ef 	.word	0x080035ef
 8003564:	080035ef 	.word	0x080035ef
 8003568:	080035ef 	.word	0x080035ef
 800356c:	080035ef 	.word	0x080035ef
 8003570:	080035ef 	.word	0x080035ef
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035ef 	.word	0x080035ef
 800357c:	080035ef 	.word	0x080035ef
 8003580:	080035ef 	.word	0x080035ef
 8003584:	0800359d 	.word	0x0800359d
 8003588:	080035b1 	.word	0x080035b1
 800358c:	4a7f      	ldr	r2, [pc, #508]	; (800378c <HAL_GPIO_Init+0x2cc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003592:	e02c      	b.n	80035ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	623b      	str	r3, [r7, #32]
          break;
 800359a:	e029      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	3304      	adds	r3, #4
 80035a2:	623b      	str	r3, [r7, #32]
          break;
 80035a4:	e024      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	3308      	adds	r3, #8
 80035ac:	623b      	str	r3, [r7, #32]
          break;
 80035ae:	e01f      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	330c      	adds	r3, #12
 80035b6:	623b      	str	r3, [r7, #32]
          break;
 80035b8:	e01a      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035c2:	2304      	movs	r3, #4
 80035c4:	623b      	str	r3, [r7, #32]
          break;
 80035c6:	e013      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d105      	bne.n	80035dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035d0:	2308      	movs	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	611a      	str	r2, [r3, #16]
          break;
 80035da:	e009      	b.n	80035f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035dc:	2308      	movs	r3, #8
 80035de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	615a      	str	r2, [r3, #20]
          break;
 80035e6:	e003      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x130>
          break;
 80035ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2bff      	cmp	r3, #255	; 0xff
 80035f4:	d801      	bhi.n	80035fa <HAL_GPIO_Init+0x13a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	e001      	b.n	80035fe <HAL_GPIO_Init+0x13e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2bff      	cmp	r3, #255	; 0xff
 8003604:	d802      	bhi.n	800360c <HAL_GPIO_Init+0x14c>
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x152>
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	3b08      	subs	r3, #8
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	210f      	movs	r1, #15
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80c1 	beq.w	80037c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_GPIO_Init+0x2d0>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4a52      	ldr	r2, [pc, #328]	; (8003790 <HAL_GPIO_Init+0x2d0>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6193      	str	r3, [r2, #24]
 800364c:	4b50      	ldr	r3, [pc, #320]	; (8003790 <HAL_GPIO_Init+0x2d0>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003658:	4a4e      	ldr	r2, [pc, #312]	; (8003794 <HAL_GPIO_Init+0x2d4>)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	3302      	adds	r3, #2
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	220f      	movs	r2, #15
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a46      	ldr	r2, [pc, #280]	; (8003798 <HAL_GPIO_Init+0x2d8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01f      	beq.n	80036c4 <HAL_GPIO_Init+0x204>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a45      	ldr	r2, [pc, #276]	; (800379c <HAL_GPIO_Init+0x2dc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d019      	beq.n	80036c0 <HAL_GPIO_Init+0x200>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <HAL_GPIO_Init+0x2e0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_GPIO_Init+0x1fc>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a43      	ldr	r2, [pc, #268]	; (80037a4 <HAL_GPIO_Init+0x2e4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00d      	beq.n	80036b8 <HAL_GPIO_Init+0x1f8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_Init+0x1f4>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a41      	ldr	r2, [pc, #260]	; (80037ac <HAL_GPIO_Init+0x2ec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_GPIO_Init+0x1f0>
 80036ac:	2305      	movs	r3, #5
 80036ae:	e00a      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036b0:	2306      	movs	r3, #6
 80036b2:	e008      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036b4:	2304      	movs	r3, #4
 80036b6:	e006      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036b8:	2303      	movs	r3, #3
 80036ba:	e004      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036bc:	2302      	movs	r3, #2
 80036be:	e002      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_GPIO_Init+0x206>
 80036c4:	2300      	movs	r3, #0
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	f002 0203 	and.w	r2, r2, #3
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	4093      	lsls	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036d6:	492f      	ldr	r1, [pc, #188]	; (8003794 <HAL_GPIO_Init+0x2d4>)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	492e      	ldr	r1, [pc, #184]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e006      	b.n	800370c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	43db      	mvns	r3, r3
 8003706:	492a      	ldr	r1, [pc, #168]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003708:	4013      	ands	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	4924      	ldr	r1, [pc, #144]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	43db      	mvns	r3, r3
 800372e:	4920      	ldr	r1, [pc, #128]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003730:	4013      	ands	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003740:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	491a      	ldr	r1, [pc, #104]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	4916      	ldr	r1, [pc, #88]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d025      	beq.n	80037b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4910      	ldr	r1, [pc, #64]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
 8003774:	e025      	b.n	80037c2 <HAL_GPIO_Init+0x302>
 8003776:	bf00      	nop
 8003778:	10320000 	.word	0x10320000
 800377c:	10310000 	.word	0x10310000
 8003780:	10220000 	.word	0x10220000
 8003784:	10210000 	.word	0x10210000
 8003788:	10120000 	.word	0x10120000
 800378c:	10110000 	.word	0x10110000
 8003790:	40021000 	.word	0x40021000
 8003794:	40010000 	.word	0x40010000
 8003798:	40010800 	.word	0x40010800
 800379c:	40010c00 	.word	0x40010c00
 80037a0:	40011000 	.word	0x40011000
 80037a4:	40011400 	.word	0x40011400
 80037a8:	40011800 	.word	0x40011800
 80037ac:	40011c00 	.word	0x40011c00
 80037b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_GPIO_Init+0x324>)
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	4909      	ldr	r1, [pc, #36]	; (80037e4 <HAL_GPIO_Init+0x324>)
 80037be:	4013      	ands	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	3301      	adds	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f47f ae7e 	bne.w	80034d4 <HAL_GPIO_Init+0x14>
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	372c      	adds	r7, #44	; 0x2c
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003804:	e003      	b.n	800380e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	041a      	lsls	r2, r3, #16
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	611a      	str	r2, [r3, #16]
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e12b      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe f836 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800387c:	f001 fcfe 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a81      	ldr	r2, [pc, #516]	; (8003a8c <HAL_I2C_Init+0x274>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d807      	bhi.n	800389c <HAL_I2C_Init+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_I2C_Init+0x278>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x92>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <HAL_I2C_Init+0x27c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e7      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a78      	ldr	r2, [pc, #480]	; (8003a98 <HAL_I2C_Init+0x280>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	; (8003a8c <HAL_I2C_Init+0x274>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <HAL_I2C_Init+0xd4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	e009      	b.n	8003900 <HAL_I2C_Init+0xe8>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a69      	ldr	r2, [pc, #420]	; (8003a9c <HAL_I2C_Init+0x284>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	3301      	adds	r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	495c      	ldr	r1, [pc, #368]	; (8003a8c <HAL_I2C_Init+0x274>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d819      	bhi.n	8003954 <HAL_I2C_Init+0x13c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e59      	subs	r1, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fbb1 f3f3 	udiv	r3, r1, r3
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003934:	400b      	ands	r3, r1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_I2C_Init+0x138>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e59      	subs	r1, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fbb1 f3f3 	udiv	r3, r1, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	e051      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003950:	2304      	movs	r3, #4
 8003952:	e04f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <HAL_I2C_Init+0x168>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_I2C_Init+0x18e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	0099      	lsls	r1, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x196>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_I2C_Init+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1e58      	subs	r0, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	440b      	add	r3, r1
 80039c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d2:	e00f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6809      	ldr	r1, [r1, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6911      	ldr	r1, [r2, #16]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	000186a0 	.word	0x000186a0
 8003a90:	001e847f 	.word	0x001e847f
 8003a94:	003d08ff 	.word	0x003d08ff
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	10624dd3 	.word	0x10624dd3

08003aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7fe ff80 	bl	80029b8 <HAL_GetTick>
 8003ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 80e0 	bne.w	8003c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4970      	ldr	r1, [pc, #448]	; (8003c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fe22 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0d3      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0x50>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d007      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2221      	movs	r2, #33	; 0x21
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2210      	movs	r2, #16
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a50      	ldr	r2, [pc, #320]	; (8003c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fbf6 	bl	8004350 <I2C_MasterRequestWrite>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08d      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b84:	e066      	b.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fe9c 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fe8c 	bl	800494a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e01a      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d194      	bne.n	8003b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	; 0x30
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	460b      	mov	r3, r1
 8003caa:	817b      	strh	r3, [r7, #10]
 8003cac:	4613      	mov	r3, r2
 8003cae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7fe fe80 	bl	80029b8 <HAL_GetTick>
 8003cb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	f040 823f 	bne.w	8004146 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2319      	movs	r3, #25
 8003cce:	2201      	movs	r2, #1
 8003cd0:	497f      	ldr	r1, [pc, #508]	; (8003ed0 <HAL_I2C_Master_Receive+0x234>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fd22 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e232      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_Master_Receive+0x54>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e22b      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d007      	beq.n	8003d16 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2222      	movs	r2, #34	; 0x22
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2210      	movs	r2, #16
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	893a      	ldrh	r2, [r7, #8]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <HAL_I2C_Master_Receive+0x238>)
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d58:	8979      	ldrh	r1, [r7, #10]
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fb78 	bl	8004454 <I2C_MasterRequestRead>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e1ec      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e1c0      	b.n	8004120 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d11e      	bne.n	8003de4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003db6:	b672      	cpsid	i
}
 8003db8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003de0:	b662      	cpsie	i
}
 8003de2:	e035      	b.n	8003e50 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11e      	bne.n	8003e2a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfc:	b672      	cpsid	i
}
 8003dfe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e26:	b662      	cpsie	i
}
 8003e28:	e012      	b.n	8003e50 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e50:	e166      	b.n	8004120 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	f200 811f 	bhi.w	800409a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d123      	bne.n	8003eac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fdaf 	bl	80049cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e167      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eaa:	e139      	b.n	8004120 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d152      	bne.n	8003f5a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <HAL_I2C_Master_Receive+0x23c>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fc2c 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e13c      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
 8003ece:	bf00      	nop
 8003ed0:	00100002 	.word	0x00100002
 8003ed4:	ffff0000 	.word	0xffff0000
 8003ed8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f22:	b662      	cpsie	i
}
 8003f24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f58:	e0e2      	b.n	8004120 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	497b      	ldr	r1, [pc, #492]	; (8004150 <HAL_I2C_Master_Receive+0x4b4>)
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fbd9 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0e9      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f84:	b672      	cpsid	i
}
 8003f86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fba:	4b66      	ldr	r3, [pc, #408]	; (8004154 <HAL_I2C_Master_Receive+0x4b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	08db      	lsrs	r3, r3, #3
 8003fc0:	4a65      	ldr	r2, [pc, #404]	; (8004158 <HAL_I2C_Master_Receive+0x4bc>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	0a1a      	lsrs	r2, r3, #8
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	00da      	lsls	r2, r3, #3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d118      	bne.n	8004012 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004002:	b662      	cpsie	i
}
 8004004:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e09a      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d1d9      	bne.n	8003fd4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004062:	b662      	cpsie	i
}
 8004064:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004098:	e042      	b.n	8004120 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fc94 	bl	80049cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e04c      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d118      	bne.n	8004120 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	f47f ae94 	bne.w	8003e52 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010004 	.word	0x00010004
 8004154:	20000000 	.word	0x20000000
 8004158:	14f8b589 	.word	0x14f8b589

0800415c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	460b      	mov	r3, r1
 8004170:	813b      	strh	r3, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004176:	f7fe fc1f 	bl	80029b8 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	f040 80d9 	bne.w	800433c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	496d      	ldr	r1, [pc, #436]	; (8004348 <HAL_I2C_Mem_Write+0x1ec>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fac1 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0cc      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Mem_Write+0x56>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0c5      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d007      	beq.n	80041d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2221      	movs	r2, #33	; 0x21
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a4d      	ldr	r2, [pc, #308]	; (800434c <HAL_I2C_Mem_Write+0x1f0>)
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800421a:	88f8      	ldrh	r0, [r7, #6]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f9e0 	bl	80045f0 <I2C_RequestMemoryWrite>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d052      	beq.n	80042dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e081      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb42 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06b      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d11b      	bne.n	80042dc <HAL_I2C_Mem_Write+0x180>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d017      	beq.n	80042dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1aa      	bne.n	800423a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fb2e 	bl	800494a <I2C_WaitOnBTFFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d107      	bne.n	800430c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e016      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	00100002 	.word	0x00100002
 800434c:	ffff0000 	.word	0xffff0000

08004350 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d006      	beq.n	800437a <I2C_MasterRequestWrite+0x2a>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d003      	beq.n	800437a <I2C_MasterRequestWrite+0x2a>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004378:	d108      	bne.n	800438c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e00b      	b.n	80043a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	2b12      	cmp	r3, #18
 8004392:	d107      	bne.n	80043a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f9b3 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ca:	d103      	bne.n	80043d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e035      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e0:	d108      	bne.n	80043f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e01b      	b.n	800442c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	11db      	asrs	r3, r3, #7
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f063 030f 	orn	r3, r3, #15
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <I2C_MasterRequestWrite+0xfc>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f9d9 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e010      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004422:	897b      	ldrh	r3, [r7, #10]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4907      	ldr	r1, [pc, #28]	; (8004450 <I2C_MasterRequestWrite+0x100>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f9c9 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	00010008 	.word	0x00010008
 8004450:	00010002 	.word	0x00010002

08004454 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004478:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d006      	beq.n	800448e <I2C_MasterRequestRead+0x3a>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d003      	beq.n	800448e <I2C_MasterRequestRead+0x3a>
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800448c:	d108      	bne.n	80044a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e00b      	b.n	80044b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	2b11      	cmp	r3, #17
 80044a6:	d107      	bne.n	80044b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f929 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d103      	bne.n	80044e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e079      	b.n	80045e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f4:	d108      	bne.n	8004508 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]
 8004506:	e05f      	b.n	80045c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004508:	897b      	ldrh	r3, [r7, #10]
 800450a:	11db      	asrs	r3, r3, #7
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f063 030f 	orn	r3, r3, #15
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4930      	ldr	r1, [pc, #192]	; (80045e8 <I2C_MasterRequestRead+0x194>)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f94f 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e054      	b.n	80045e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004536:	897b      	ldrh	r3, [r7, #10]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4929      	ldr	r1, [pc, #164]	; (80045ec <I2C_MasterRequestRead+0x198>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f93f 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e044      	b.n	80045e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f8c7 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d103      	bne.n	80045ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e017      	b.n	80045e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045b0:	897b      	ldrh	r3, [r7, #10]
 80045b2:	11db      	asrs	r3, r3, #7
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f063 030e 	orn	r3, r3, #14
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4907      	ldr	r1, [pc, #28]	; (80045ec <I2C_MasterRequestRead+0x198>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8fb 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	00010008 	.word	0x00010008
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2200      	movs	r2, #0
 8004622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f878 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004640:	d103      	bne.n	800464a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e05f      	b.n	800470e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800465c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	492d      	ldr	r1, [pc, #180]	; (8004718 <I2C_RequestMemoryWrite+0x128>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f8b0 	bl	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e04c      	b.n	800470e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468c:	6a39      	ldr	r1, [r7, #32]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f91a 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d107      	bne.n	80046b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e02b      	b.n	800470e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046bc:	893b      	ldrh	r3, [r7, #8]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]
 80046c6:	e021      	b.n	800470c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c8:	893b      	ldrh	r3, [r7, #8]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	6a39      	ldr	r1, [r7, #32]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8f4 	bl	80048c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d107      	bne.n	80046fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e005      	b.n	800470e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004702:	893b      	ldrh	r3, [r7, #8]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	00010002 	.word	0x00010002

0800471c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472c:	e025      	b.n	800477a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d021      	beq.n	800477a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fe f93f 	bl	80029b8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d116      	bne.n	800477a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e023      	b.n	80047c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d10d      	bne.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	e00c      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	43da      	mvns	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d0b6      	beq.n	800472e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d8:	e051      	b.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d123      	bne.n	8004832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f043 0204 	orr.w	r2, r3, #4
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e046      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d021      	beq.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fe f8bd 	bl	80029b8 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e020      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10c      	bne.n	80048a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e00b      	b.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d18d      	bne.n	80047da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d4:	e02d      	b.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8ce 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e02d      	b.n	8004942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d021      	beq.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ee:	f7fe f863 	bl	80029b8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d302      	bcc.n	8004904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d116      	bne.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e007      	b.n	8004942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493c:	2b80      	cmp	r3, #128	; 0x80
 800493e:	d1ca      	bne.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004956:	e02d      	b.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f88d 	bl	8004a78 <I2C_IsAcknowledgeFailed>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e02d      	b.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d021      	beq.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004970:	f7fe f822 	bl	80029b8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e007      	b.n	80049c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d1ca      	bne.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d8:	e042      	b.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d119      	bne.n	8004a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0210 	mvn.w	r2, #16
 80049f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e029      	b.n	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fd ffcc 	bl	80029b8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e007      	b.n	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6a:	2b40      	cmp	r3, #64	; 0x40
 8004a6c:	d1b5      	bne.n	80049da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d11b      	bne.n	8004ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f043 0204 	orr.w	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e26c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8087 	beq.w	8004c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d00c      	beq.n	8004b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b00:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d112      	bne.n	8004b32 <HAL_RCC_OscConfig+0x5e>
 8004b0c:	4b8c      	ldr	r3, [pc, #560]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b18:	d10b      	bne.n	8004b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d06c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x12c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d168      	bne.n	8004c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e246      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d106      	bne.n	8004b4a <HAL_RCC_OscConfig+0x76>
 8004b3c:	4b80      	ldr	r3, [pc, #512]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a7f      	ldr	r2, [pc, #508]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e02e      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd4>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x98>
 8004b52:	4b7b      	ldr	r3, [pc, #492]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7a      	ldr	r2, [pc, #488]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b78      	ldr	r3, [pc, #480]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a77      	ldr	r2, [pc, #476]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd4>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0xbc>
 8004b76:	4b72      	ldr	r3, [pc, #456]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a71      	ldr	r2, [pc, #452]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b6f      	ldr	r3, [pc, #444]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6e      	ldr	r2, [pc, #440]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xd4>
 8004b90:	4b6b      	ldr	r3, [pc, #428]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a6a      	ldr	r2, [pc, #424]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a67      	ldr	r2, [pc, #412]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd ff02 	bl	80029b8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fefe 	bl	80029b8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e1fa      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b5d      	ldr	r3, [pc, #372]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xe4>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd feee 	bl	80029b8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fd feea 	bl	80029b8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e1e6      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x10c>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d063      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c0e:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c1a:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d11c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x18c>
 8004c26:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	4b43      	ldr	r3, [pc, #268]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x176>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e1ba      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4939      	ldr	r1, [pc, #228]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	e03a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d020      	beq.n	8004caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c68:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <HAL_RCC_OscConfig+0x270>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fd fea3 	bl	80029b8 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fd fe9f 	bl	80029b8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e19b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4927      	ldr	r1, [pc, #156]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
 8004ca8:	e015      	b.n	8004cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <HAL_RCC_OscConfig+0x270>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fe82 	bl	80029b8 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fd fe7e 	bl	80029b8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e17a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d03a      	beq.n	8004d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf0:	f7fd fe62 	bl	80029b8 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf8:	f7fd fe5e 	bl	80029b8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e15a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f000 fad8 	bl	80052cc <RCC_Delay>
 8004d1c:	e01c      	b.n	8004d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d24:	f7fd fe48 	bl	80029b8 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2c:	f7fd fe44 	bl	80029b8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d908      	bls.n	8004d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e140      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	42420000 	.word	0x42420000
 8004d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d4c:	4b9e      	ldr	r3, [pc, #632]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e9      	bne.n	8004d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a6 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6a:	4b97      	ldr	r3, [pc, #604]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10d      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d76:	4b94      	ldr	r3, [pc, #592]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	4a93      	ldr	r2, [pc, #588]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d80:	61d3      	str	r3, [r2, #28]
 8004d82:	4b91      	ldr	r3, [pc, #580]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b8e      	ldr	r3, [pc, #568]	; (8004fcc <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d118      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a8a      	ldr	r2, [pc, #552]	; (8004fcc <HAL_RCC_OscConfig+0x4f8>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004daa:	f7fd fe05 	bl	80029b8 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db2:	f7fd fe01 	bl	80029b8 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b64      	cmp	r3, #100	; 0x64
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0fd      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <HAL_RCC_OscConfig+0x4f8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d106      	bne.n	8004de6 <HAL_RCC_OscConfig+0x312>
 8004dd8:	4b7b      	ldr	r3, [pc, #492]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4a7a      	ldr	r2, [pc, #488]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6213      	str	r3, [r2, #32]
 8004de4:	e02d      	b.n	8004e42 <HAL_RCC_OscConfig+0x36e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x334>
 8004dee:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4a75      	ldr	r2, [pc, #468]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	6213      	str	r3, [r2, #32]
 8004dfa:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	4a72      	ldr	r2, [pc, #456]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	6213      	str	r3, [r2, #32]
 8004e06:	e01c      	b.n	8004e42 <HAL_RCC_OscConfig+0x36e>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d10c      	bne.n	8004e2a <HAL_RCC_OscConfig+0x356>
 8004e10:	4b6d      	ldr	r3, [pc, #436]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4a6c      	ldr	r2, [pc, #432]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e16:	f043 0304 	orr.w	r3, r3, #4
 8004e1a:	6213      	str	r3, [r2, #32]
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4a69      	ldr	r2, [pc, #420]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6213      	str	r3, [r2, #32]
 8004e28:	e00b      	b.n	8004e42 <HAL_RCC_OscConfig+0x36e>
 8004e2a:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a66      	ldr	r2, [pc, #408]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	4b64      	ldr	r3, [pc, #400]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d015      	beq.n	8004e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fdb5 	bl	80029b8 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fd fdb1 	bl	80029b8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0ab      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e68:	4b57      	ldr	r3, [pc, #348]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ee      	beq.n	8004e52 <HAL_RCC_OscConfig+0x37e>
 8004e74:	e014      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e76:	f7fd fd9f 	bl	80029b8 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fd9b 	bl	80029b8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e095      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b48      	ldr	r3, [pc, #288]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4a47      	ldr	r2, [pc, #284]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8081 	beq.w	8004fbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ebc:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d061      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d146      	bne.n	8004f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed0:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_RCC_OscConfig+0x4fc>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fd fd6f 	bl	80029b8 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fd fd6b 	bl	80029b8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e067      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f04:	d108      	bne.n	8004f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f06:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	492d      	ldr	r1, [pc, #180]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a19      	ldr	r1, [r3, #32]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	4927      	ldr	r1, [pc, #156]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCC_OscConfig+0x4fc>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fd fd3f 	bl	80029b8 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fd fd3b 	bl	80029b8 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e037      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x46a>
 8004f5c:	e02f      	b.n	8004fbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <HAL_RCC_OscConfig+0x4fc>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd fd28 	bl	80029b8 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd fd24 	bl	80029b8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e020      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x498>
 8004f8a:	e018      	b.n	8004fbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e013      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_RCC_OscConfig+0x4f4>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d106      	bne.n	8004fba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	42420060 	.word	0x42420060

08004fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0d0      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d910      	bls.n	8005018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b67      	ldr	r3, [pc, #412]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4965      	ldr	r1, [pc, #404]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b63      	ldr	r3, [pc, #396]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0b8      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005030:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a58      	ldr	r2, [pc, #352]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005036:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800503a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005048:	4b53      	ldr	r3, [pc, #332]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a52      	ldr	r2, [pc, #328]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005052:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	494d      	ldr	r1, [pc, #308]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d040      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d115      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07f      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b41      	ldr	r3, [pc, #260]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e073      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06b      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b39      	ldr	r3, [pc, #228]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4936      	ldr	r1, [pc, #216]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fd fc78 	bl	80029b8 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fd fc74 	bl	80029b8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e053      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d210      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 0207 	bic.w	r2, r3, #7
 800510a:	4922      	ldr	r1, [pc, #136]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e032      	b.n	800518a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005130:	4b19      	ldr	r3, [pc, #100]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4916      	ldr	r1, [pc, #88]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	490e      	ldr	r1, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800515e:	4313      	orrs	r3, r2
 8005160:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005162:	f000 f821 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490a      	ldr	r1, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x1cc>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fbd6 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40022000 	.word	0x40022000
 8005198:	40021000 	.word	0x40021000
 800519c:	0800aad4 	.word	0x0800aad4
 80051a0:	20000000 	.word	0x20000000
 80051a4:	20000034 	.word	0x20000034

080051a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b490      	push	{r4, r7}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051ae:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051b0:	1d3c      	adds	r4, r7, #4
 80051b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051b8:	f240 2301 	movw	r3, #513	; 0x201
 80051bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCC_GetSysClockFreq+0xb4>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d002      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x40>
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d003      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x46>
 80051e6:	e02d      	b.n	8005244 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ea:	623b      	str	r3, [r7, #32]
      break;
 80051ec:	e02d      	b.n	800524a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	0c9b      	lsrs	r3, r3, #18
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051fa:	4413      	add	r3, r2
 80051fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005200:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <HAL_RCC_GetSysClockFreq+0xb4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	0c5b      	lsrs	r3, r3, #17
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800521a:	4413      	add	r3, r2
 800521c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005220:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4a0e      	ldr	r2, [pc, #56]	; (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005226:	fb02 f203 	mul.w	r2, r2, r3
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	e004      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4a0b      	ldr	r2, [pc, #44]	; (8005264 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	623b      	str	r3, [r7, #32]
      break;
 8005242:	e002      	b.n	800524a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005246:	623b      	str	r3, [r7, #32]
      break;
 8005248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800524a:	6a3b      	ldr	r3, [r7, #32]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3728      	adds	r7, #40	; 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bc90      	pop	{r4, r7}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	0800aac4 	.word	0x0800aac4
 800525c:	40021000 	.word	0x40021000
 8005260:	007a1200 	.word	0x007a1200
 8005264:	003d0900 	.word	0x003d0900

08005268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <HAL_RCC_GetHCLKFreq+0x10>)
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	20000000 	.word	0x20000000

0800527c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005280:	f7ff fff2 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	0800aae4 	.word	0x0800aae4

080052a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052a8:	f7ff ffde 	bl	8005268 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	0adb      	lsrs	r3, r3, #11
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	0800aae4 	.word	0x0800aae4

080052cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <RCC_Delay+0x34>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <RCC_Delay+0x38>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0a5b      	lsrs	r3, r3, #9
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052e8:	bf00      	nop
  }
  while (Delay --);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	60fa      	str	r2, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f9      	bne.n	80052e8 <RCC_Delay+0x1c>
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	20000000 	.word	0x20000000
 8005304:	10624dd3 	.word	0x10624dd3

08005308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e076      	b.n	8005408 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800532a:	d009      	beq.n	8005340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	61da      	str	r2, [r3, #28]
 8005332:	e005      	b.n	8005340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc ff10 	bl	8002180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	ea42 0103 	orr.w	r1, r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	0c1a      	lsrs	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f002 0204 	and.w	r2, r2, #4
 80053e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e041      	b.n	80054a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fd f874 	bl	8002524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fa48 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_TIM_PWM_Start+0x24>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e022      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d109      	bne.n	80054ee <HAL_TIM_PWM_Start+0x3e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e015      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x58>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e008      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e072      	b.n	8005608 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0x82>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0x92>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xa2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fbe4 	bl	8005d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a28      	ldr	r2, [pc, #160]	; (8005610 <HAL_TIM_PWM_Start+0x160>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_PWM_Start+0xcc>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a27      	ldr	r2, [pc, #156]	; (8005614 <HAL_TIM_PWM_Start+0x164>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_TIM_PWM_Start+0xd0>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_TIM_PWM_Start+0xd2>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_TIM_PWM_Start+0x160>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x122>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_TIM_PWM_Start+0x164>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x122>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x122>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIM_PWM_Start+0x168>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x122>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_TIM_PWM_Start+0x16c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x122>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <HAL_TIM_PWM_Start+0x170>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d010      	beq.n	8005606 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	e007      	b.n	8005606 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00

08005624 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e093      	b.n	8005760 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fc feed 	bl	800242c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f000 f933 	bl	80058e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	4313      	orrs	r3, r2
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056c4:	f023 030c 	bic.w	r3, r3, #12
 80056c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	4313      	orrs	r3, r2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	031b      	lsls	r3, r3, #12
 80056f4:	4313      	orrs	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	4313      	orrs	r3, r2
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800577e:	2302      	movs	r3, #2
 8005780:	e0ac      	b.n	80058dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	f200 809f 	bhi.w	80058d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057cd 	.word	0x080057cd
 800579c:	080058d1 	.word	0x080058d1
 80057a0:	080058d1 	.word	0x080058d1
 80057a4:	080058d1 	.word	0x080058d1
 80057a8:	0800580d 	.word	0x0800580d
 80057ac:	080058d1 	.word	0x080058d1
 80057b0:	080058d1 	.word	0x080058d1
 80057b4:	080058d1 	.word	0x080058d1
 80057b8:	0800584f 	.word	0x0800584f
 80057bc:	080058d1 	.word	0x080058d1
 80057c0:	080058d1 	.word	0x080058d1
 80057c4:	080058d1 	.word	0x080058d1
 80057c8:	0800588f 	.word	0x0800588f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f900 	bl	80059d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6999      	ldr	r1, [r3, #24]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	619a      	str	r2, [r3, #24]
      break;
 800580a:	e062      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f950 	bl	8005ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	619a      	str	r2, [r3, #24]
      break;
 800584c:	e041      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f9a3 	bl	8005ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69d9      	ldr	r1, [r3, #28]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	61da      	str	r2, [r3, #28]
      break;
 800588c:	e021      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f9f7 	bl	8005c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	61da      	str	r2, [r3, #28]
      break;
 80058ce:	e000      	b.n	80058d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80058d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a33      	ldr	r2, [pc, #204]	; (80059c4 <TIM_Base_SetConfig+0xe0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a32      	ldr	r2, [pc, #200]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00f      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590a:	d00b      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d007      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d108      	bne.n	8005936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <TIM_Base_SetConfig+0xe0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <TIM_Base_SetConfig+0x82>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a21      	ldr	r2, [pc, #132]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00f      	beq.n	8005966 <TIM_Base_SetConfig+0x82>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594c:	d00b      	beq.n	8005966 <TIM_Base_SetConfig+0x82>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <TIM_Base_SetConfig+0x82>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_Base_SetConfig+0x82>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d108      	bne.n	8005978 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <TIM_Base_SetConfig+0xe0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d003      	beq.n	80059ac <TIM_Base_SetConfig+0xc8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00

080059d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f023 0302 	bic.w	r3, r3, #2
 8005a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_OC1_SetConfig+0xd8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC1_SetConfig+0x64>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <TIM_OC1_SetConfig+0xdc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d10c      	bne.n	8005a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0308 	bic.w	r3, r3, #8
 8005a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <TIM_OC1_SetConfig+0xd8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d003      	beq.n	8005a66 <TIM_OC1_SetConfig+0x8e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <TIM_OC1_SetConfig+0xdc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d111      	bne.n	8005a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400

08005ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0320 	bic.w	r3, r3, #32
 8005b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <TIM_OC2_SetConfig+0xe0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC2_SetConfig+0x68>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <TIM_OC2_SetConfig+0xe4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10d      	bne.n	8005b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC2_SetConfig+0xe0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_OC2_SetConfig+0x94>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d113      	bne.n	8005b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400

08005ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <TIM_OC3_SetConfig+0xe0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC3_SetConfig+0x66>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <TIM_OC3_SetConfig+0xe4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10d      	bne.n	8005c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC3_SetConfig+0xe0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_OC3_SetConfig+0x92>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <TIM_OC3_SetConfig+0xe4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d113      	bne.n	8005c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	621a      	str	r2, [r3, #32]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400

08005c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	031b      	lsls	r3, r3, #12
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <TIM_OC4_SetConfig+0xa0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_OC4_SetConfig+0x68>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <TIM_OC4_SetConfig+0xa4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d109      	bne.n	8005d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400

08005d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	401a      	ands	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e050      	b.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1b      	ldr	r2, [pc, #108]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d018      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d00e      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d10c      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00

08005e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e03f      	b.n	8005ee2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fc fcac 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2224      	movs	r2, #36	; 0x24
 8005e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fc51 	bl	800673c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08a      	sub	sp, #40	; 0x28
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d17c      	bne.n	8006004 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_UART_Transmit+0x2c>
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e075      	b.n	8006006 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Transmit+0x3e>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e06e      	b.n	8006006 <HAL_UART_Transmit+0x11c>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f3e:	f7fc fd3b 	bl	80029b8 <HAL_GetTick>
 8005f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f58:	d108      	bne.n	8005f6c <HAL_UART_Transmit+0x82>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d104      	bne.n	8005f6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	e003      	b.n	8005f74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005f7c:	e02a      	b.n	8005fd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fa5f 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e036      	b.n	8006006 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	e007      	b.n	8005fc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1cf      	bne.n	8005f7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2140      	movs	r1, #64	; 0x40
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fa2f 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e006      	b.n	8006006 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e000      	b.n	8006006 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b20      	cmp	r3, #32
 8006028:	d166      	bne.n	80060f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_UART_Receive_DMA+0x26>
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e05f      	b.n	80060fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_UART_Receive_DMA+0x38>
 8006044:	2302      	movs	r3, #2
 8006046:	e058      	b.n	80060fa <HAL_UART_Receive_DMA+0xea>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2222      	movs	r2, #34	; 0x22
 8006066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	4a25      	ldr	r2, [pc, #148]	; (8006104 <HAL_UART_Receive_DMA+0xf4>)
 8006070:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	4a24      	ldr	r2, [pc, #144]	; (8006108 <HAL_UART_Receive_DMA+0xf8>)
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4a23      	ldr	r2, [pc, #140]	; (800610c <HAL_UART_Receive_DMA+0xfc>)
 8006080:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006086:	2200      	movs	r2, #0
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3304      	adds	r3, #4
 800609a:	4619      	mov	r1, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	f7fc fe3b 	bl	8002d1c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695a      	ldr	r2, [r3, #20]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	08006335 	.word	0x08006335
 8006108:	0800639d 	.word	0x0800639d
 800610c:	080063b9 	.word	0x080063b9

08006110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006130:	2300      	movs	r3, #0
 8006132:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_UART_IRQHandler+0x52>
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa6d 	bl	800663a <UART_Receive_IT>
      return;
 8006160:	e0d0      	b.n	8006304 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80b0 	beq.w	80062ca <HAL_UART_IRQHandler+0x1ba>
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d105      	bne.n	8006180 <HAL_UART_IRQHandler+0x70>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80a5 	beq.w	80062ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_UART_IRQHandler+0x90>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	f043 0201 	orr.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <HAL_UART_IRQHandler+0xb0>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	f043 0202 	orr.w	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_UART_IRQHandler+0xd0>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	f043 0204 	orr.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00f      	beq.n	800620a <HAL_UART_IRQHandler+0xfa>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_UART_IRQHandler+0xee>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	f043 0208 	orr.w	r2, r3, #8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d077      	beq.n	8006302 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa07 	bl	800663a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_UART_IRQHandler+0x144>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d031      	beq.n	80062b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f958 	bl	800650a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d023      	beq.n	80062b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006276:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	4a21      	ldr	r2, [pc, #132]	; (800630c <HAL_UART_IRQHandler+0x1fc>)
 8006286:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628c:	4618      	mov	r0, r3
 800628e:	f7fc fda5 	bl	8002ddc <HAL_DMA_Abort_IT>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062a2:	4610      	mov	r0, r2
 80062a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a6:	e00e      	b.n	80062c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fc fa81 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	e00a      	b.n	80062c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fc fa7d 	bl	80027b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b6:	e006      	b.n	80062c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fc fa79 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80062c4:	e01d      	b.n	8006302 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	bf00      	nop
    return;
 80062c8:	e01b      	b.n	8006302 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1d6>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f944 	bl	800656c <UART_Transmit_IT>
    return;
 80062e4:	e00e      	b.n	8006304 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <HAL_UART_IRQHandler+0x1f4>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d004      	beq.n	8006304 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f985 	bl	800660a <UART_EndTransmit_IT>
    return;
 8006300:	e000      	b.n	8006304 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006302:	bf00      	nop
  }
}
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	08006545 	.word	0x08006545

08006310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11e      	bne.n	800638e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006364:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006384:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7fc fa17 	bl	80027c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ffb9 	bl	8006322 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d108      	bne.n	80063fe <UART_DMAError+0x46>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063f8:	68b8      	ldr	r0, [r7, #8]
 80063fa:	f000 f871 	bl	80064e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b22      	cmp	r3, #34	; 0x22
 800641e:	d108      	bne.n	8006432 <UART_DMAError+0x7a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 f86c 	bl	800650a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	f043 0210 	orr.w	r2, r3, #16
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7fc f9b6 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645c:	e02c      	b.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d028      	beq.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <UART_WaitOnFlagUntilTimeout+0x30>
 800646c:	f7fc faa4 	bl	80029b8 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	429a      	cmp	r2, r3
 800647a:	d21d      	bcs.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800648a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e00f      	b.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d0c3      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006520:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7fc f926 	bl	80027b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b21      	cmp	r3, #33	; 0x21
 800657e:	d13e      	bne.n	80065fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006588:	d114      	bne.n	80065b4 <UART_Transmit_IT+0x48>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d110      	bne.n	80065b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]
 80065b2:	e008      	b.n	80065c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6211      	str	r1, [r2, #32]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	4619      	mov	r1, r3
 80065d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fe70 	bl	8006310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b22      	cmp	r3, #34	; 0x22
 800664c:	d170      	bne.n	8006730 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d117      	bne.n	8006688 <UART_Receive_IT+0x4e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d113      	bne.n	8006688 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006668:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006676:	b29a      	uxth	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	629a      	str	r2, [r3, #40]	; 0x28
 8006686:	e026      	b.n	80066d6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669a:	d007      	beq.n	80066ac <UART_Receive_IT+0x72>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <UART_Receive_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e008      	b.n	80066cc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29b      	uxth	r3, r3
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	4619      	mov	r1, r3
 80066e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d120      	bne.n	800672c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0220 	bic.w	r2, r2, #32
 80066f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fc f84d 	bl	80027c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e002      	b.n	8006732 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006776:	f023 030c 	bic.w	r3, r3, #12
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	430b      	orrs	r3, r1
 8006782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2c      	ldr	r2, [pc, #176]	; (8006850 <UART_SetConfig+0x114>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d103      	bne.n	80067ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7fe fd7e 	bl	80052a4 <HAL_RCC_GetPCLK2Freq>
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	e002      	b.n	80067b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fe fd66 	bl	800527c <HAL_RCC_GetPCLK1Freq>
 80067b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009a      	lsls	r2, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	4a22      	ldr	r2, [pc, #136]	; (8006854 <UART_SetConfig+0x118>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	0119      	lsls	r1, r3, #4
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	009a      	lsls	r2, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <UART_SetConfig+0x118>)
 80067ea:	fba3 0302 	umull	r0, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2064      	movs	r0, #100	; 0x64
 80067f2:	fb00 f303 	mul.w	r3, r0, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	3332      	adds	r3, #50	; 0x32
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <UART_SetConfig+0x118>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006808:	4419      	add	r1, r3
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009a      	lsls	r2, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <UART_SetConfig+0x118>)
 8006822:	fba3 0302 	umull	r0, r3, r3, r2
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2064      	movs	r0, #100	; 0x64
 800682a:	fb00 f303 	mul.w	r3, r0, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	3332      	adds	r3, #50	; 0x32
 8006834:	4a07      	ldr	r2, [pc, #28]	; (8006854 <UART_SetConfig+0x118>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	440a      	add	r2, r1
 8006846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40013800 	.word	0x40013800
 8006854:	51eb851f 	.word	0x51eb851f

08006858 <main>:
#include "main.h"



int main(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	hwInit();
 800685c:	f7fc f838 	bl	80028d0 <hwInit>
	apInit();
 8006860:	f7fa fc02 	bl	8001068 <apInit>

	apMain();
 8006864:	f7fa fc0c 	bl	8001080 <apMain>

	return 0;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <__errno>:
 8006870:	4b01      	ldr	r3, [pc, #4]	; (8006878 <__errno+0x8>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	2000003c 	.word	0x2000003c

0800687c <__libc_init_array>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	2600      	movs	r6, #0
 8006880:	4d0c      	ldr	r5, [pc, #48]	; (80068b4 <__libc_init_array+0x38>)
 8006882:	4c0d      	ldr	r4, [pc, #52]	; (80068b8 <__libc_init_array+0x3c>)
 8006884:	1b64      	subs	r4, r4, r5
 8006886:	10a4      	asrs	r4, r4, #2
 8006888:	42a6      	cmp	r6, r4
 800688a:	d109      	bne.n	80068a0 <__libc_init_array+0x24>
 800688c:	f004 f8f2 	bl	800aa74 <_init>
 8006890:	2600      	movs	r6, #0
 8006892:	4d0a      	ldr	r5, [pc, #40]	; (80068bc <__libc_init_array+0x40>)
 8006894:	4c0a      	ldr	r4, [pc, #40]	; (80068c0 <__libc_init_array+0x44>)
 8006896:	1b64      	subs	r4, r4, r5
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	42a6      	cmp	r6, r4
 800689c:	d105      	bne.n	80068aa <__libc_init_array+0x2e>
 800689e:	bd70      	pop	{r4, r5, r6, pc}
 80068a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a4:	4798      	blx	r3
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7ee      	b.n	8006888 <__libc_init_array+0xc>
 80068aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ae:	4798      	blx	r3
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7f2      	b.n	800689a <__libc_init_array+0x1e>
 80068b4:	0800af80 	.word	0x0800af80
 80068b8:	0800af80 	.word	0x0800af80
 80068bc:	0800af80 	.word	0x0800af80
 80068c0:	0800af84 	.word	0x0800af84

080068c4 <memset>:
 80068c4:	4603      	mov	r3, r0
 80068c6:	4402      	add	r2, r0
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d100      	bne.n	80068ce <memset+0xa>
 80068cc:	4770      	bx	lr
 80068ce:	f803 1b01 	strb.w	r1, [r3], #1
 80068d2:	e7f9      	b.n	80068c8 <memset+0x4>

080068d4 <__cvt>:
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068da:	461f      	mov	r7, r3
 80068dc:	bfbb      	ittet	lt
 80068de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	461f      	movlt	r7, r3
 80068e4:	2300      	movge	r3, #0
 80068e6:	232d      	movlt	r3, #45	; 0x2d
 80068e8:	b088      	sub	sp, #32
 80068ea:	4614      	mov	r4, r2
 80068ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80068f0:	7013      	strb	r3, [r2, #0]
 80068f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80068f8:	f023 0820 	bic.w	r8, r3, #32
 80068fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006900:	d005      	beq.n	800690e <__cvt+0x3a>
 8006902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006906:	d100      	bne.n	800690a <__cvt+0x36>
 8006908:	3501      	adds	r5, #1
 800690a:	2302      	movs	r3, #2
 800690c:	e000      	b.n	8006910 <__cvt+0x3c>
 800690e:	2303      	movs	r3, #3
 8006910:	aa07      	add	r2, sp, #28
 8006912:	9204      	str	r2, [sp, #16]
 8006914:	aa06      	add	r2, sp, #24
 8006916:	e9cd a202 	strd	sl, r2, [sp, #8]
 800691a:	e9cd 3500 	strd	r3, r5, [sp]
 800691e:	4622      	mov	r2, r4
 8006920:	463b      	mov	r3, r7
 8006922:	f000 fd01 	bl	8007328 <_dtoa_r>
 8006926:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800692a:	4606      	mov	r6, r0
 800692c:	d102      	bne.n	8006934 <__cvt+0x60>
 800692e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006930:	07db      	lsls	r3, r3, #31
 8006932:	d522      	bpl.n	800697a <__cvt+0xa6>
 8006934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006938:	eb06 0905 	add.w	r9, r6, r5
 800693c:	d110      	bne.n	8006960 <__cvt+0x8c>
 800693e:	7833      	ldrb	r3, [r6, #0]
 8006940:	2b30      	cmp	r3, #48	; 0x30
 8006942:	d10a      	bne.n	800695a <__cvt+0x86>
 8006944:	2200      	movs	r2, #0
 8006946:	2300      	movs	r3, #0
 8006948:	4620      	mov	r0, r4
 800694a:	4639      	mov	r1, r7
 800694c:	f7fa f898 	bl	8000a80 <__aeabi_dcmpeq>
 8006950:	b918      	cbnz	r0, 800695a <__cvt+0x86>
 8006952:	f1c5 0501 	rsb	r5, r5, #1
 8006956:	f8ca 5000 	str.w	r5, [sl]
 800695a:	f8da 3000 	ldr.w	r3, [sl]
 800695e:	4499      	add	r9, r3
 8006960:	2200      	movs	r2, #0
 8006962:	2300      	movs	r3, #0
 8006964:	4620      	mov	r0, r4
 8006966:	4639      	mov	r1, r7
 8006968:	f7fa f88a 	bl	8000a80 <__aeabi_dcmpeq>
 800696c:	b108      	cbz	r0, 8006972 <__cvt+0x9e>
 800696e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006972:	2230      	movs	r2, #48	; 0x30
 8006974:	9b07      	ldr	r3, [sp, #28]
 8006976:	454b      	cmp	r3, r9
 8006978:	d307      	bcc.n	800698a <__cvt+0xb6>
 800697a:	4630      	mov	r0, r6
 800697c:	9b07      	ldr	r3, [sp, #28]
 800697e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006980:	1b9b      	subs	r3, r3, r6
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	b008      	add	sp, #32
 8006986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	9107      	str	r1, [sp, #28]
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	e7f0      	b.n	8006974 <__cvt+0xa0>

08006992 <__exponent>:
 8006992:	4603      	mov	r3, r0
 8006994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006996:	2900      	cmp	r1, #0
 8006998:	f803 2b02 	strb.w	r2, [r3], #2
 800699c:	bfb6      	itet	lt
 800699e:	222d      	movlt	r2, #45	; 0x2d
 80069a0:	222b      	movge	r2, #43	; 0x2b
 80069a2:	4249      	neglt	r1, r1
 80069a4:	2909      	cmp	r1, #9
 80069a6:	7042      	strb	r2, [r0, #1]
 80069a8:	dd2b      	ble.n	8006a02 <__exponent+0x70>
 80069aa:	f10d 0407 	add.w	r4, sp, #7
 80069ae:	46a4      	mov	ip, r4
 80069b0:	270a      	movs	r7, #10
 80069b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80069b6:	460a      	mov	r2, r1
 80069b8:	46a6      	mov	lr, r4
 80069ba:	fb07 1516 	mls	r5, r7, r6, r1
 80069be:	2a63      	cmp	r2, #99	; 0x63
 80069c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80069c4:	4631      	mov	r1, r6
 80069c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80069ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80069ce:	dcf0      	bgt.n	80069b2 <__exponent+0x20>
 80069d0:	3130      	adds	r1, #48	; 0x30
 80069d2:	f1ae 0502 	sub.w	r5, lr, #2
 80069d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80069da:	4629      	mov	r1, r5
 80069dc:	1c44      	adds	r4, r0, #1
 80069de:	4561      	cmp	r1, ip
 80069e0:	d30a      	bcc.n	80069f8 <__exponent+0x66>
 80069e2:	f10d 0209 	add.w	r2, sp, #9
 80069e6:	eba2 020e 	sub.w	r2, r2, lr
 80069ea:	4565      	cmp	r5, ip
 80069ec:	bf88      	it	hi
 80069ee:	2200      	movhi	r2, #0
 80069f0:	4413      	add	r3, r2
 80069f2:	1a18      	subs	r0, r3, r0
 80069f4:	b003      	add	sp, #12
 80069f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a00:	e7ed      	b.n	80069de <__exponent+0x4c>
 8006a02:	2330      	movs	r3, #48	; 0x30
 8006a04:	3130      	adds	r1, #48	; 0x30
 8006a06:	7083      	strb	r3, [r0, #2]
 8006a08:	70c1      	strb	r1, [r0, #3]
 8006a0a:	1d03      	adds	r3, r0, #4
 8006a0c:	e7f1      	b.n	80069f2 <__exponent+0x60>
	...

08006a10 <_printf_float>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	b091      	sub	sp, #68	; 0x44
 8006a16:	460c      	mov	r4, r1
 8006a18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	461f      	mov	r7, r3
 8006a20:	4605      	mov	r5, r0
 8006a22:	f001 fa6f 	bl	8007f04 <_localeconv_r>
 8006a26:	6803      	ldr	r3, [r0, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2c:	f7f9 fbfc 	bl	8000228 <strlen>
 8006a30:	2300      	movs	r3, #0
 8006a32:	930e      	str	r3, [sp, #56]	; 0x38
 8006a34:	f8d8 3000 	ldr.w	r3, [r8]
 8006a38:	900a      	str	r0, [sp, #40]	; 0x28
 8006a3a:	3307      	adds	r3, #7
 8006a3c:	f023 0307 	bic.w	r3, r3, #7
 8006a40:	f103 0208 	add.w	r2, r3, #8
 8006a44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006a48:	f8d4 b000 	ldr.w	fp, [r4]
 8006a4c:	f8c8 2000 	str.w	r2, [r8]
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006a5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a62:	f04f 32ff 	mov.w	r2, #4294967295
 8006a66:	4640      	mov	r0, r8
 8006a68:	4b9c      	ldr	r3, [pc, #624]	; (8006cdc <_printf_float+0x2cc>)
 8006a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a6c:	f7fa f83a 	bl	8000ae4 <__aeabi_dcmpun>
 8006a70:	bb70      	cbnz	r0, 8006ad0 <_printf_float+0xc0>
 8006a72:	f04f 32ff 	mov.w	r2, #4294967295
 8006a76:	4640      	mov	r0, r8
 8006a78:	4b98      	ldr	r3, [pc, #608]	; (8006cdc <_printf_float+0x2cc>)
 8006a7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a7c:	f7fa f814 	bl	8000aa8 <__aeabi_dcmple>
 8006a80:	bb30      	cbnz	r0, 8006ad0 <_printf_float+0xc0>
 8006a82:	2200      	movs	r2, #0
 8006a84:	2300      	movs	r3, #0
 8006a86:	4640      	mov	r0, r8
 8006a88:	4651      	mov	r1, sl
 8006a8a:	f7fa f803 	bl	8000a94 <__aeabi_dcmplt>
 8006a8e:	b110      	cbz	r0, 8006a96 <_printf_float+0x86>
 8006a90:	232d      	movs	r3, #45	; 0x2d
 8006a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a96:	4b92      	ldr	r3, [pc, #584]	; (8006ce0 <_printf_float+0x2d0>)
 8006a98:	4892      	ldr	r0, [pc, #584]	; (8006ce4 <_printf_float+0x2d4>)
 8006a9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006a9e:	bf94      	ite	ls
 8006aa0:	4698      	movls	r8, r3
 8006aa2:	4680      	movhi	r8, r0
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	f04f 0a00 	mov.w	sl, #0
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	f02b 0304 	bic.w	r3, fp, #4
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	4633      	mov	r3, r6
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	9700      	str	r7, [sp, #0]
 8006aba:	aa0f      	add	r2, sp, #60	; 0x3c
 8006abc:	f000 f9d4 	bl	8006e68 <_printf_common>
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	f040 8090 	bne.w	8006be6 <_printf_float+0x1d6>
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aca:	b011      	add	sp, #68	; 0x44
 8006acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	4653      	mov	r3, sl
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	f7fa f804 	bl	8000ae4 <__aeabi_dcmpun>
 8006adc:	b148      	cbz	r0, 8006af2 <_printf_float+0xe2>
 8006ade:	f1ba 0f00 	cmp.w	sl, #0
 8006ae2:	bfb8      	it	lt
 8006ae4:	232d      	movlt	r3, #45	; 0x2d
 8006ae6:	4880      	ldr	r0, [pc, #512]	; (8006ce8 <_printf_float+0x2d8>)
 8006ae8:	bfb8      	it	lt
 8006aea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006aee:	4b7f      	ldr	r3, [pc, #508]	; (8006cec <_printf_float+0x2dc>)
 8006af0:	e7d3      	b.n	8006a9a <_printf_float+0x8a>
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	d142      	bne.n	8006b82 <_printf_float+0x172>
 8006afc:	2306      	movs	r3, #6
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	9206      	str	r2, [sp, #24]
 8006b04:	aa0e      	add	r2, sp, #56	; 0x38
 8006b06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006b0a:	aa0d      	add	r2, sp, #52	; 0x34
 8006b0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006b10:	9203      	str	r2, [sp, #12]
 8006b12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006b16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	4642      	mov	r2, r8
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4628      	mov	r0, r5
 8006b24:	4653      	mov	r3, sl
 8006b26:	910b      	str	r1, [sp, #44]	; 0x2c
 8006b28:	f7ff fed4 	bl	80068d4 <__cvt>
 8006b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b2e:	4680      	mov	r8, r0
 8006b30:	2947      	cmp	r1, #71	; 0x47
 8006b32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b34:	d108      	bne.n	8006b48 <_printf_float+0x138>
 8006b36:	1cc8      	adds	r0, r1, #3
 8006b38:	db02      	blt.n	8006b40 <_printf_float+0x130>
 8006b3a:	6863      	ldr	r3, [r4, #4]
 8006b3c:	4299      	cmp	r1, r3
 8006b3e:	dd40      	ble.n	8006bc2 <_printf_float+0x1b2>
 8006b40:	f1a9 0902 	sub.w	r9, r9, #2
 8006b44:	fa5f f989 	uxtb.w	r9, r9
 8006b48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006b4c:	d81f      	bhi.n	8006b8e <_printf_float+0x17e>
 8006b4e:	464a      	mov	r2, r9
 8006b50:	3901      	subs	r1, #1
 8006b52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b56:	910d      	str	r1, [sp, #52]	; 0x34
 8006b58:	f7ff ff1b 	bl	8006992 <__exponent>
 8006b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b5e:	4682      	mov	sl, r0
 8006b60:	1813      	adds	r3, r2, r0
 8006b62:	2a01      	cmp	r2, #1
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	dc02      	bgt.n	8006b6e <_printf_float+0x15e>
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	07d2      	lsls	r2, r2, #31
 8006b6c:	d501      	bpl.n	8006b72 <_printf_float+0x162>
 8006b6e:	3301      	adds	r3, #1
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d09b      	beq.n	8006ab2 <_printf_float+0xa2>
 8006b7a:	232d      	movs	r3, #45	; 0x2d
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b80:	e797      	b.n	8006ab2 <_printf_float+0xa2>
 8006b82:	2947      	cmp	r1, #71	; 0x47
 8006b84:	d1bc      	bne.n	8006b00 <_printf_float+0xf0>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ba      	bne.n	8006b00 <_printf_float+0xf0>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e7b7      	b.n	8006afe <_printf_float+0xee>
 8006b8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006b92:	d118      	bne.n	8006bc6 <_printf_float+0x1b6>
 8006b94:	2900      	cmp	r1, #0
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	dd0b      	ble.n	8006bb2 <_printf_float+0x1a2>
 8006b9a:	6121      	str	r1, [r4, #16]
 8006b9c:	b913      	cbnz	r3, 8006ba4 <_printf_float+0x194>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	07d0      	lsls	r0, r2, #31
 8006ba2:	d502      	bpl.n	8006baa <_printf_float+0x19a>
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	440b      	add	r3, r1
 8006ba8:	6123      	str	r3, [r4, #16]
 8006baa:	f04f 0a00 	mov.w	sl, #0
 8006bae:	65a1      	str	r1, [r4, #88]	; 0x58
 8006bb0:	e7df      	b.n	8006b72 <_printf_float+0x162>
 8006bb2:	b913      	cbnz	r3, 8006bba <_printf_float+0x1aa>
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	07d2      	lsls	r2, r2, #31
 8006bb8:	d501      	bpl.n	8006bbe <_printf_float+0x1ae>
 8006bba:	3302      	adds	r3, #2
 8006bbc:	e7f4      	b.n	8006ba8 <_printf_float+0x198>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7f2      	b.n	8006ba8 <_printf_float+0x198>
 8006bc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	db05      	blt.n	8006bd8 <_printf_float+0x1c8>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	6121      	str	r1, [r4, #16]
 8006bd0:	07d8      	lsls	r0, r3, #31
 8006bd2:	d5ea      	bpl.n	8006baa <_printf_float+0x19a>
 8006bd4:	1c4b      	adds	r3, r1, #1
 8006bd6:	e7e7      	b.n	8006ba8 <_printf_float+0x198>
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	bfcc      	ite	gt
 8006bdc:	2201      	movgt	r2, #1
 8006bde:	f1c1 0202 	rsble	r2, r1, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	e7e0      	b.n	8006ba8 <_printf_float+0x198>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	055a      	lsls	r2, r3, #21
 8006bea:	d407      	bmi.n	8006bfc <_printf_float+0x1ec>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	4642      	mov	r2, r8
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d12b      	bne.n	8006c52 <_printf_float+0x242>
 8006bfa:	e764      	b.n	8006ac6 <_printf_float+0xb6>
 8006bfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c00:	f240 80dd 	bls.w	8006dbe <_printf_float+0x3ae>
 8006c04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f7f9 ff38 	bl	8000a80 <__aeabi_dcmpeq>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d033      	beq.n	8006c7c <_printf_float+0x26c>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	4a35      	ldr	r2, [pc, #212]	; (8006cf0 <_printf_float+0x2e0>)
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f af51 	beq.w	8006ac6 <_printf_float+0xb6>
 8006c24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	db02      	blt.n	8006c32 <_printf_float+0x222>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	07d8      	lsls	r0, r3, #31
 8006c30:	d50f      	bpl.n	8006c52 <_printf_float+0x242>
 8006c32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f af42 	beq.w	8006ac6 <_printf_float+0xb6>
 8006c42:	f04f 0800 	mov.w	r8, #0
 8006c46:	f104 091a 	add.w	r9, r4, #26
 8006c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	4543      	cmp	r3, r8
 8006c50:	dc09      	bgt.n	8006c66 <_printf_float+0x256>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	079b      	lsls	r3, r3, #30
 8006c56:	f100 8102 	bmi.w	8006e5e <_printf_float+0x44e>
 8006c5a:	68e0      	ldr	r0, [r4, #12]
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5e:	4298      	cmp	r0, r3
 8006c60:	bfb8      	it	lt
 8006c62:	4618      	movlt	r0, r3
 8006c64:	e731      	b.n	8006aca <_printf_float+0xba>
 8006c66:	2301      	movs	r3, #1
 8006c68:	464a      	mov	r2, r9
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f af28 	beq.w	8006ac6 <_printf_float+0xb6>
 8006c76:	f108 0801 	add.w	r8, r8, #1
 8006c7a:	e7e6      	b.n	8006c4a <_printf_float+0x23a>
 8006c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dc38      	bgt.n	8006cf4 <_printf_float+0x2e4>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <_printf_float+0x2e0>)
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f af1a 	beq.w	8006ac6 <_printf_float+0xb6>
 8006c92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c96:	4313      	orrs	r3, r2
 8006c98:	d102      	bne.n	8006ca0 <_printf_float+0x290>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	07d9      	lsls	r1, r3, #31
 8006c9e:	d5d8      	bpl.n	8006c52 <_printf_float+0x242>
 8006ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f af0b 	beq.w	8006ac6 <_printf_float+0xb6>
 8006cb0:	f04f 0900 	mov.w	r9, #0
 8006cb4:	f104 0a1a 	add.w	sl, r4, #26
 8006cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cba:	425b      	negs	r3, r3
 8006cbc:	454b      	cmp	r3, r9
 8006cbe:	dc01      	bgt.n	8006cc4 <_printf_float+0x2b4>
 8006cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cc2:	e794      	b.n	8006bee <_printf_float+0x1de>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f aef9 	beq.w	8006ac6 <_printf_float+0xb6>
 8006cd4:	f109 0901 	add.w	r9, r9, #1
 8006cd8:	e7ee      	b.n	8006cb8 <_printf_float+0x2a8>
 8006cda:	bf00      	nop
 8006cdc:	7fefffff 	.word	0x7fefffff
 8006ce0:	0800aaf0 	.word	0x0800aaf0
 8006ce4:	0800aaf4 	.word	0x0800aaf4
 8006ce8:	0800aafc 	.word	0x0800aafc
 8006cec:	0800aaf8 	.word	0x0800aaf8
 8006cf0:	0800ab00 	.word	0x0800ab00
 8006cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	bfa8      	it	ge
 8006cfc:	461a      	movge	r2, r3
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	4691      	mov	r9, r2
 8006d02:	dc37      	bgt.n	8006d74 <_printf_float+0x364>
 8006d04:	f04f 0b00 	mov.w	fp, #0
 8006d08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d0c:	f104 021a 	add.w	r2, r4, #26
 8006d10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006d14:	ebaa 0309 	sub.w	r3, sl, r9
 8006d18:	455b      	cmp	r3, fp
 8006d1a:	dc33      	bgt.n	8006d84 <_printf_float+0x374>
 8006d1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d20:	429a      	cmp	r2, r3
 8006d22:	db3b      	blt.n	8006d9c <_printf_float+0x38c>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07da      	lsls	r2, r3, #31
 8006d28:	d438      	bmi.n	8006d9c <_printf_float+0x38c>
 8006d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d2e:	eba2 030a 	sub.w	r3, r2, sl
 8006d32:	eba2 0901 	sub.w	r9, r2, r1
 8006d36:	4599      	cmp	r9, r3
 8006d38:	bfa8      	it	ge
 8006d3a:	4699      	movge	r9, r3
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	dc34      	bgt.n	8006dac <_printf_float+0x39c>
 8006d42:	f04f 0800 	mov.w	r8, #0
 8006d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d4a:	f104 0a1a 	add.w	sl, r4, #26
 8006d4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	eba3 0309 	sub.w	r3, r3, r9
 8006d58:	4543      	cmp	r3, r8
 8006d5a:	f77f af7a 	ble.w	8006c52 <_printf_float+0x242>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4652      	mov	r2, sl
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f aeac 	beq.w	8006ac6 <_printf_float+0xb6>
 8006d6e:	f108 0801 	add.w	r8, r8, #1
 8006d72:	e7ec      	b.n	8006d4e <_printf_float+0x33e>
 8006d74:	4613      	mov	r3, r2
 8006d76:	4631      	mov	r1, r6
 8006d78:	4642      	mov	r2, r8
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d1c0      	bne.n	8006d04 <_printf_float+0x2f4>
 8006d82:	e6a0      	b.n	8006ac6 <_printf_float+0xb6>
 8006d84:	2301      	movs	r3, #1
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f ae99 	beq.w	8006ac6 <_printf_float+0xb6>
 8006d94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d96:	f10b 0b01 	add.w	fp, fp, #1
 8006d9a:	e7b9      	b.n	8006d10 <_printf_float+0x300>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	d1bf      	bne.n	8006d2a <_printf_float+0x31a>
 8006daa:	e68c      	b.n	8006ac6 <_printf_float+0xb6>
 8006dac:	464b      	mov	r3, r9
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	eb08 020a 	add.w	r2, r8, sl
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	d1c2      	bne.n	8006d42 <_printf_float+0x332>
 8006dbc:	e683      	b.n	8006ac6 <_printf_float+0xb6>
 8006dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dc0:	2a01      	cmp	r2, #1
 8006dc2:	dc01      	bgt.n	8006dc8 <_printf_float+0x3b8>
 8006dc4:	07db      	lsls	r3, r3, #31
 8006dc6:	d537      	bpl.n	8006e38 <_printf_float+0x428>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4642      	mov	r2, r8
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b8      	blx	r7
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	f43f ae77 	beq.w	8006ac6 <_printf_float+0xb6>
 8006dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f ae6f 	beq.w	8006ac6 <_printf_float+0xb6>
 8006de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	f7f9 fe46 	bl	8000a80 <__aeabi_dcmpeq>
 8006df4:	b9d8      	cbnz	r0, 8006e2e <_printf_float+0x41e>
 8006df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df8:	f108 0201 	add.w	r2, r8, #1
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	d10e      	bne.n	8006e26 <_printf_float+0x416>
 8006e08:	e65d      	b.n	8006ac6 <_printf_float+0xb6>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	464a      	mov	r2, r9
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b8      	blx	r7
 8006e14:	3001      	adds	r0, #1
 8006e16:	f43f ae56 	beq.w	8006ac6 <_printf_float+0xb6>
 8006e1a:	f108 0801 	add.w	r8, r8, #1
 8006e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e20:	3b01      	subs	r3, #1
 8006e22:	4543      	cmp	r3, r8
 8006e24:	dcf1      	bgt.n	8006e0a <_printf_float+0x3fa>
 8006e26:	4653      	mov	r3, sl
 8006e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e2c:	e6e0      	b.n	8006bf0 <_printf_float+0x1e0>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	f104 091a 	add.w	r9, r4, #26
 8006e36:	e7f2      	b.n	8006e1e <_printf_float+0x40e>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	e7df      	b.n	8006dfe <_printf_float+0x3ee>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	464a      	mov	r2, r9
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f ae3c 	beq.w	8006ac6 <_printf_float+0xb6>
 8006e4e:	f108 0801 	add.w	r8, r8, #1
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e56:	1a5b      	subs	r3, r3, r1
 8006e58:	4543      	cmp	r3, r8
 8006e5a:	dcf0      	bgt.n	8006e3e <_printf_float+0x42e>
 8006e5c:	e6fd      	b.n	8006c5a <_printf_float+0x24a>
 8006e5e:	f04f 0800 	mov.w	r8, #0
 8006e62:	f104 0919 	add.w	r9, r4, #25
 8006e66:	e7f4      	b.n	8006e52 <_printf_float+0x442>

08006e68 <_printf_common>:
 8006e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	4699      	mov	r9, r3
 8006e70:	688a      	ldr	r2, [r1, #8]
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	4607      	mov	r7, r0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfb8      	it	lt
 8006e7a:	4613      	movlt	r3, r2
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e82:	460c      	mov	r4, r1
 8006e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e88:	b10a      	cbz	r2, 8006e8e <_printf_common+0x26>
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	0699      	lsls	r1, r3, #26
 8006e92:	bf42      	ittt	mi
 8006e94:	6833      	ldrmi	r3, [r6, #0]
 8006e96:	3302      	addmi	r3, #2
 8006e98:	6033      	strmi	r3, [r6, #0]
 8006e9a:	6825      	ldr	r5, [r4, #0]
 8006e9c:	f015 0506 	ands.w	r5, r5, #6
 8006ea0:	d106      	bne.n	8006eb0 <_printf_common+0x48>
 8006ea2:	f104 0a19 	add.w	sl, r4, #25
 8006ea6:	68e3      	ldr	r3, [r4, #12]
 8006ea8:	6832      	ldr	r2, [r6, #0]
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	42ab      	cmp	r3, r5
 8006eae:	dc28      	bgt.n	8006f02 <_printf_common+0x9a>
 8006eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006eb4:	1e13      	subs	r3, r2, #0
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	bf18      	it	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	0692      	lsls	r2, r2, #26
 8006ebe:	d42d      	bmi.n	8006f1c <_printf_common+0xb4>
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ec8:	47c0      	blx	r8
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d020      	beq.n	8006f10 <_printf_common+0xa8>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	68e5      	ldr	r5, [r4, #12]
 8006ed2:	f003 0306 	and.w	r3, r3, #6
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	bf18      	it	ne
 8006eda:	2500      	movne	r5, #0
 8006edc:	6832      	ldr	r2, [r6, #0]
 8006ede:	f04f 0600 	mov.w	r6, #0
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	bf08      	it	eq
 8006ee6:	1aad      	subeq	r5, r5, r2
 8006ee8:	6922      	ldr	r2, [r4, #16]
 8006eea:	bf08      	it	eq
 8006eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	bfc4      	itt	gt
 8006ef4:	1a9b      	subgt	r3, r3, r2
 8006ef6:	18ed      	addgt	r5, r5, r3
 8006ef8:	341a      	adds	r4, #26
 8006efa:	42b5      	cmp	r5, r6
 8006efc:	d11a      	bne.n	8006f34 <_printf_common+0xcc>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e008      	b.n	8006f14 <_printf_common+0xac>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4652      	mov	r2, sl
 8006f06:	4649      	mov	r1, r9
 8006f08:	4638      	mov	r0, r7
 8006f0a:	47c0      	blx	r8
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d103      	bne.n	8006f18 <_printf_common+0xb0>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	3501      	adds	r5, #1
 8006f1a:	e7c4      	b.n	8006ea6 <_printf_common+0x3e>
 8006f1c:	2030      	movs	r0, #48	; 0x30
 8006f1e:	18e1      	adds	r1, r4, r3
 8006f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f2a:	4422      	add	r2, r4
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f32:	e7c5      	b.n	8006ec0 <_printf_common+0x58>
 8006f34:	2301      	movs	r3, #1
 8006f36:	4622      	mov	r2, r4
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	47c0      	blx	r8
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d0e6      	beq.n	8006f10 <_printf_common+0xa8>
 8006f42:	3601      	adds	r6, #1
 8006f44:	e7d9      	b.n	8006efa <_printf_common+0x92>
	...

08006f48 <_printf_i>:
 8006f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	7e27      	ldrb	r7, [r4, #24]
 8006f50:	4691      	mov	r9, r2
 8006f52:	2f78      	cmp	r7, #120	; 0x78
 8006f54:	4680      	mov	r8, r0
 8006f56:	469a      	mov	sl, r3
 8006f58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f5e:	d807      	bhi.n	8006f70 <_printf_i+0x28>
 8006f60:	2f62      	cmp	r7, #98	; 0x62
 8006f62:	d80a      	bhi.n	8006f7a <_printf_i+0x32>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f000 80d9 	beq.w	800711c <_printf_i+0x1d4>
 8006f6a:	2f58      	cmp	r7, #88	; 0x58
 8006f6c:	f000 80a4 	beq.w	80070b8 <_printf_i+0x170>
 8006f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f78:	e03a      	b.n	8006ff0 <_printf_i+0xa8>
 8006f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f7e:	2b15      	cmp	r3, #21
 8006f80:	d8f6      	bhi.n	8006f70 <_printf_i+0x28>
 8006f82:	a001      	add	r0, pc, #4	; (adr r0, 8006f88 <_printf_i+0x40>)
 8006f84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f88:	08006fe1 	.word	0x08006fe1
 8006f8c:	08006ff5 	.word	0x08006ff5
 8006f90:	08006f71 	.word	0x08006f71
 8006f94:	08006f71 	.word	0x08006f71
 8006f98:	08006f71 	.word	0x08006f71
 8006f9c:	08006f71 	.word	0x08006f71
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f71 	.word	0x08006f71
 8006fa8:	08006f71 	.word	0x08006f71
 8006fac:	08006f71 	.word	0x08006f71
 8006fb0:	08006f71 	.word	0x08006f71
 8006fb4:	08007103 	.word	0x08007103
 8006fb8:	08007025 	.word	0x08007025
 8006fbc:	080070e5 	.word	0x080070e5
 8006fc0:	08006f71 	.word	0x08006f71
 8006fc4:	08006f71 	.word	0x08006f71
 8006fc8:	08007125 	.word	0x08007125
 8006fcc:	08006f71 	.word	0x08006f71
 8006fd0:	08007025 	.word	0x08007025
 8006fd4:	08006f71 	.word	0x08006f71
 8006fd8:	08006f71 	.word	0x08006f71
 8006fdc:	080070ed 	.word	0x080070ed
 8006fe0:	680b      	ldr	r3, [r1, #0]
 8006fe2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fe6:	1d1a      	adds	r2, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	600a      	str	r2, [r1, #0]
 8006fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0a4      	b.n	800713e <_printf_i+0x1f6>
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	6808      	ldr	r0, [r1, #0]
 8006ff8:	062e      	lsls	r6, r5, #24
 8006ffa:	f100 0304 	add.w	r3, r0, #4
 8006ffe:	d50a      	bpl.n	8007016 <_printf_i+0xce>
 8007000:	6805      	ldr	r5, [r0, #0]
 8007002:	600b      	str	r3, [r1, #0]
 8007004:	2d00      	cmp	r5, #0
 8007006:	da03      	bge.n	8007010 <_printf_i+0xc8>
 8007008:	232d      	movs	r3, #45	; 0x2d
 800700a:	426d      	negs	r5, r5
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007010:	230a      	movs	r3, #10
 8007012:	485e      	ldr	r0, [pc, #376]	; (800718c <_printf_i+0x244>)
 8007014:	e019      	b.n	800704a <_printf_i+0x102>
 8007016:	f015 0f40 	tst.w	r5, #64	; 0x40
 800701a:	6805      	ldr	r5, [r0, #0]
 800701c:	600b      	str	r3, [r1, #0]
 800701e:	bf18      	it	ne
 8007020:	b22d      	sxthne	r5, r5
 8007022:	e7ef      	b.n	8007004 <_printf_i+0xbc>
 8007024:	680b      	ldr	r3, [r1, #0]
 8007026:	6825      	ldr	r5, [r4, #0]
 8007028:	1d18      	adds	r0, r3, #4
 800702a:	6008      	str	r0, [r1, #0]
 800702c:	0628      	lsls	r0, r5, #24
 800702e:	d501      	bpl.n	8007034 <_printf_i+0xec>
 8007030:	681d      	ldr	r5, [r3, #0]
 8007032:	e002      	b.n	800703a <_printf_i+0xf2>
 8007034:	0669      	lsls	r1, r5, #25
 8007036:	d5fb      	bpl.n	8007030 <_printf_i+0xe8>
 8007038:	881d      	ldrh	r5, [r3, #0]
 800703a:	2f6f      	cmp	r7, #111	; 0x6f
 800703c:	bf0c      	ite	eq
 800703e:	2308      	moveq	r3, #8
 8007040:	230a      	movne	r3, #10
 8007042:	4852      	ldr	r0, [pc, #328]	; (800718c <_printf_i+0x244>)
 8007044:	2100      	movs	r1, #0
 8007046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800704a:	6866      	ldr	r6, [r4, #4]
 800704c:	2e00      	cmp	r6, #0
 800704e:	bfa8      	it	ge
 8007050:	6821      	ldrge	r1, [r4, #0]
 8007052:	60a6      	str	r6, [r4, #8]
 8007054:	bfa4      	itt	ge
 8007056:	f021 0104 	bicge.w	r1, r1, #4
 800705a:	6021      	strge	r1, [r4, #0]
 800705c:	b90d      	cbnz	r5, 8007062 <_printf_i+0x11a>
 800705e:	2e00      	cmp	r6, #0
 8007060:	d04d      	beq.n	80070fe <_printf_i+0x1b6>
 8007062:	4616      	mov	r6, r2
 8007064:	fbb5 f1f3 	udiv	r1, r5, r3
 8007068:	fb03 5711 	mls	r7, r3, r1, r5
 800706c:	5dc7      	ldrb	r7, [r0, r7]
 800706e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007072:	462f      	mov	r7, r5
 8007074:	42bb      	cmp	r3, r7
 8007076:	460d      	mov	r5, r1
 8007078:	d9f4      	bls.n	8007064 <_printf_i+0x11c>
 800707a:	2b08      	cmp	r3, #8
 800707c:	d10b      	bne.n	8007096 <_printf_i+0x14e>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	07df      	lsls	r7, r3, #31
 8007082:	d508      	bpl.n	8007096 <_printf_i+0x14e>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	6861      	ldr	r1, [r4, #4]
 8007088:	4299      	cmp	r1, r3
 800708a:	bfde      	ittt	le
 800708c:	2330      	movle	r3, #48	; 0x30
 800708e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007092:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007096:	1b92      	subs	r2, r2, r6
 8007098:	6122      	str	r2, [r4, #16]
 800709a:	464b      	mov	r3, r9
 800709c:	4621      	mov	r1, r4
 800709e:	4640      	mov	r0, r8
 80070a0:	f8cd a000 	str.w	sl, [sp]
 80070a4:	aa03      	add	r2, sp, #12
 80070a6:	f7ff fedf 	bl	8006e68 <_printf_common>
 80070aa:	3001      	adds	r0, #1
 80070ac:	d14c      	bne.n	8007148 <_printf_i+0x200>
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	b004      	add	sp, #16
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	4834      	ldr	r0, [pc, #208]	; (800718c <_printf_i+0x244>)
 80070ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070be:	680e      	ldr	r6, [r1, #0]
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80070c6:	061f      	lsls	r7, r3, #24
 80070c8:	600e      	str	r6, [r1, #0]
 80070ca:	d514      	bpl.n	80070f6 <_printf_i+0x1ae>
 80070cc:	07d9      	lsls	r1, r3, #31
 80070ce:	bf44      	itt	mi
 80070d0:	f043 0320 	orrmi.w	r3, r3, #32
 80070d4:	6023      	strmi	r3, [r4, #0]
 80070d6:	b91d      	cbnz	r5, 80070e0 <_printf_i+0x198>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	f023 0320 	bic.w	r3, r3, #32
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	2310      	movs	r3, #16
 80070e2:	e7af      	b.n	8007044 <_printf_i+0xfc>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	f043 0320 	orr.w	r3, r3, #32
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	2378      	movs	r3, #120	; 0x78
 80070ee:	4828      	ldr	r0, [pc, #160]	; (8007190 <_printf_i+0x248>)
 80070f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070f4:	e7e3      	b.n	80070be <_printf_i+0x176>
 80070f6:	065e      	lsls	r6, r3, #25
 80070f8:	bf48      	it	mi
 80070fa:	b2ad      	uxthmi	r5, r5
 80070fc:	e7e6      	b.n	80070cc <_printf_i+0x184>
 80070fe:	4616      	mov	r6, r2
 8007100:	e7bb      	b.n	800707a <_printf_i+0x132>
 8007102:	680b      	ldr	r3, [r1, #0]
 8007104:	6826      	ldr	r6, [r4, #0]
 8007106:	1d1d      	adds	r5, r3, #4
 8007108:	6960      	ldr	r0, [r4, #20]
 800710a:	600d      	str	r5, [r1, #0]
 800710c:	0635      	lsls	r5, r6, #24
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	d501      	bpl.n	8007116 <_printf_i+0x1ce>
 8007112:	6018      	str	r0, [r3, #0]
 8007114:	e002      	b.n	800711c <_printf_i+0x1d4>
 8007116:	0671      	lsls	r1, r6, #25
 8007118:	d5fb      	bpl.n	8007112 <_printf_i+0x1ca>
 800711a:	8018      	strh	r0, [r3, #0]
 800711c:	2300      	movs	r3, #0
 800711e:	4616      	mov	r6, r2
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	e7ba      	b.n	800709a <_printf_i+0x152>
 8007124:	680b      	ldr	r3, [r1, #0]
 8007126:	1d1a      	adds	r2, r3, #4
 8007128:	600a      	str	r2, [r1, #0]
 800712a:	681e      	ldr	r6, [r3, #0]
 800712c:	2100      	movs	r1, #0
 800712e:	4630      	mov	r0, r6
 8007130:	6862      	ldr	r2, [r4, #4]
 8007132:	f000 fef3 	bl	8007f1c <memchr>
 8007136:	b108      	cbz	r0, 800713c <_printf_i+0x1f4>
 8007138:	1b80      	subs	r0, r0, r6
 800713a:	6060      	str	r0, [r4, #4]
 800713c:	6863      	ldr	r3, [r4, #4]
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	2300      	movs	r3, #0
 8007142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007146:	e7a8      	b.n	800709a <_printf_i+0x152>
 8007148:	4632      	mov	r2, r6
 800714a:	4649      	mov	r1, r9
 800714c:	4640      	mov	r0, r8
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	47d0      	blx	sl
 8007152:	3001      	adds	r0, #1
 8007154:	d0ab      	beq.n	80070ae <_printf_i+0x166>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	079b      	lsls	r3, r3, #30
 800715a:	d413      	bmi.n	8007184 <_printf_i+0x23c>
 800715c:	68e0      	ldr	r0, [r4, #12]
 800715e:	9b03      	ldr	r3, [sp, #12]
 8007160:	4298      	cmp	r0, r3
 8007162:	bfb8      	it	lt
 8007164:	4618      	movlt	r0, r3
 8007166:	e7a4      	b.n	80070b2 <_printf_i+0x16a>
 8007168:	2301      	movs	r3, #1
 800716a:	4632      	mov	r2, r6
 800716c:	4649      	mov	r1, r9
 800716e:	4640      	mov	r0, r8
 8007170:	47d0      	blx	sl
 8007172:	3001      	adds	r0, #1
 8007174:	d09b      	beq.n	80070ae <_printf_i+0x166>
 8007176:	3501      	adds	r5, #1
 8007178:	68e3      	ldr	r3, [r4, #12]
 800717a:	9903      	ldr	r1, [sp, #12]
 800717c:	1a5b      	subs	r3, r3, r1
 800717e:	42ab      	cmp	r3, r5
 8007180:	dcf2      	bgt.n	8007168 <_printf_i+0x220>
 8007182:	e7eb      	b.n	800715c <_printf_i+0x214>
 8007184:	2500      	movs	r5, #0
 8007186:	f104 0619 	add.w	r6, r4, #25
 800718a:	e7f5      	b.n	8007178 <_printf_i+0x230>
 800718c:	0800ab02 	.word	0x0800ab02
 8007190:	0800ab13 	.word	0x0800ab13

08007194 <_vsniprintf_r>:
 8007194:	b530      	push	{r4, r5, lr}
 8007196:	1e14      	subs	r4, r2, #0
 8007198:	4605      	mov	r5, r0
 800719a:	b09b      	sub	sp, #108	; 0x6c
 800719c:	4618      	mov	r0, r3
 800719e:	da05      	bge.n	80071ac <_vsniprintf_r+0x18>
 80071a0:	238b      	movs	r3, #139	; 0x8b
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	b01b      	add	sp, #108	; 0x6c
 80071aa:	bd30      	pop	{r4, r5, pc}
 80071ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80071b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80071b4:	bf0c      	ite	eq
 80071b6:	4623      	moveq	r3, r4
 80071b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071c4:	4602      	mov	r2, r0
 80071c6:	9100      	str	r1, [sp, #0]
 80071c8:	9104      	str	r1, [sp, #16]
 80071ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80071ce:	4669      	mov	r1, sp
 80071d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071d2:	4628      	mov	r0, r5
 80071d4:	f001 fb50 	bl	8008878 <_svfiprintf_r>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	bfbc      	itt	lt
 80071dc:	238b      	movlt	r3, #139	; 0x8b
 80071de:	602b      	strlt	r3, [r5, #0]
 80071e0:	2c00      	cmp	r4, #0
 80071e2:	d0e1      	beq.n	80071a8 <_vsniprintf_r+0x14>
 80071e4:	2200      	movs	r2, #0
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e7dd      	b.n	80071a8 <_vsniprintf_r+0x14>

080071ec <vsniprintf>:
 80071ec:	b507      	push	{r0, r1, r2, lr}
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	460a      	mov	r2, r1
 80071f4:	4601      	mov	r1, r0
 80071f6:	4803      	ldr	r0, [pc, #12]	; (8007204 <vsniprintf+0x18>)
 80071f8:	6800      	ldr	r0, [r0, #0]
 80071fa:	f7ff ffcb 	bl	8007194 <_vsniprintf_r>
 80071fe:	b003      	add	sp, #12
 8007200:	f85d fb04 	ldr.w	pc, [sp], #4
 8007204:	2000003c 	.word	0x2000003c

08007208 <quorem>:
 8007208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	6903      	ldr	r3, [r0, #16]
 800720e:	690c      	ldr	r4, [r1, #16]
 8007210:	4607      	mov	r7, r0
 8007212:	42a3      	cmp	r3, r4
 8007214:	f2c0 8083 	blt.w	800731e <quorem+0x116>
 8007218:	3c01      	subs	r4, #1
 800721a:	f100 0514 	add.w	r5, r0, #20
 800721e:	f101 0814 	add.w	r8, r1, #20
 8007222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800722c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007230:	3301      	adds	r3, #1
 8007232:	429a      	cmp	r2, r3
 8007234:	fbb2 f6f3 	udiv	r6, r2, r3
 8007238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800723c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007240:	d332      	bcc.n	80072a8 <quorem+0xa0>
 8007242:	f04f 0e00 	mov.w	lr, #0
 8007246:	4640      	mov	r0, r8
 8007248:	46ac      	mov	ip, r5
 800724a:	46f2      	mov	sl, lr
 800724c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007250:	b293      	uxth	r3, r2
 8007252:	fb06 e303 	mla	r3, r6, r3, lr
 8007256:	0c12      	lsrs	r2, r2, #16
 8007258:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800725c:	fb06 e202 	mla	r2, r6, r2, lr
 8007260:	b29b      	uxth	r3, r3
 8007262:	ebaa 0303 	sub.w	r3, sl, r3
 8007266:	f8dc a000 	ldr.w	sl, [ip]
 800726a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800726e:	fa1f fa8a 	uxth.w	sl, sl
 8007272:	4453      	add	r3, sl
 8007274:	fa1f fa82 	uxth.w	sl, r2
 8007278:	f8dc 2000 	ldr.w	r2, [ip]
 800727c:	4581      	cmp	r9, r0
 800727e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007282:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007290:	f84c 3b04 	str.w	r3, [ip], #4
 8007294:	d2da      	bcs.n	800724c <quorem+0x44>
 8007296:	f855 300b 	ldr.w	r3, [r5, fp]
 800729a:	b92b      	cbnz	r3, 80072a8 <quorem+0xa0>
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	3b04      	subs	r3, #4
 80072a0:	429d      	cmp	r5, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	d32f      	bcc.n	8007306 <quorem+0xfe>
 80072a6:	613c      	str	r4, [r7, #16]
 80072a8:	4638      	mov	r0, r7
 80072aa:	f001 f8cd 	bl	8008448 <__mcmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	db25      	blt.n	80072fe <quorem+0xf6>
 80072b2:	4628      	mov	r0, r5
 80072b4:	f04f 0c00 	mov.w	ip, #0
 80072b8:	3601      	adds	r6, #1
 80072ba:	f858 1b04 	ldr.w	r1, [r8], #4
 80072be:	f8d0 e000 	ldr.w	lr, [r0]
 80072c2:	b28b      	uxth	r3, r1
 80072c4:	ebac 0303 	sub.w	r3, ip, r3
 80072c8:	fa1f f28e 	uxth.w	r2, lr
 80072cc:	4413      	add	r3, r2
 80072ce:	0c0a      	lsrs	r2, r1, #16
 80072d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072de:	45c1      	cmp	r9, r8
 80072e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072e4:	f840 3b04 	str.w	r3, [r0], #4
 80072e8:	d2e7      	bcs.n	80072ba <quorem+0xb2>
 80072ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072f2:	b922      	cbnz	r2, 80072fe <quorem+0xf6>
 80072f4:	3b04      	subs	r3, #4
 80072f6:	429d      	cmp	r5, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	d30a      	bcc.n	8007312 <quorem+0x10a>
 80072fc:	613c      	str	r4, [r7, #16]
 80072fe:	4630      	mov	r0, r6
 8007300:	b003      	add	sp, #12
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	3b04      	subs	r3, #4
 800730a:	2a00      	cmp	r2, #0
 800730c:	d1cb      	bne.n	80072a6 <quorem+0x9e>
 800730e:	3c01      	subs	r4, #1
 8007310:	e7c6      	b.n	80072a0 <quorem+0x98>
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	3b04      	subs	r3, #4
 8007316:	2a00      	cmp	r2, #0
 8007318:	d1f0      	bne.n	80072fc <quorem+0xf4>
 800731a:	3c01      	subs	r4, #1
 800731c:	e7eb      	b.n	80072f6 <quorem+0xee>
 800731e:	2000      	movs	r0, #0
 8007320:	e7ee      	b.n	8007300 <quorem+0xf8>
 8007322:	0000      	movs	r0, r0
 8007324:	0000      	movs	r0, r0
	...

08007328 <_dtoa_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	4616      	mov	r6, r2
 800732e:	461f      	mov	r7, r3
 8007330:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007332:	b099      	sub	sp, #100	; 0x64
 8007334:	4605      	mov	r5, r0
 8007336:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800733a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800733e:	b974      	cbnz	r4, 800735e <_dtoa_r+0x36>
 8007340:	2010      	movs	r0, #16
 8007342:	f000 fde3 	bl	8007f0c <malloc>
 8007346:	4602      	mov	r2, r0
 8007348:	6268      	str	r0, [r5, #36]	; 0x24
 800734a:	b920      	cbnz	r0, 8007356 <_dtoa_r+0x2e>
 800734c:	21ea      	movs	r1, #234	; 0xea
 800734e:	4bae      	ldr	r3, [pc, #696]	; (8007608 <_dtoa_r+0x2e0>)
 8007350:	48ae      	ldr	r0, [pc, #696]	; (800760c <_dtoa_r+0x2e4>)
 8007352:	f001 fba1 	bl	8008a98 <__assert_func>
 8007356:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800735a:	6004      	str	r4, [r0, #0]
 800735c:	60c4      	str	r4, [r0, #12]
 800735e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	b151      	cbz	r1, 800737a <_dtoa_r+0x52>
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	2301      	movs	r3, #1
 8007368:	4093      	lsls	r3, r2
 800736a:	604a      	str	r2, [r1, #4]
 800736c:	608b      	str	r3, [r1, #8]
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fe30 	bl	8007fd4 <_Bfree>
 8007374:	2200      	movs	r2, #0
 8007376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	1e3b      	subs	r3, r7, #0
 800737c:	bfaf      	iteee	ge
 800737e:	2300      	movge	r3, #0
 8007380:	2201      	movlt	r2, #1
 8007382:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007386:	9305      	strlt	r3, [sp, #20]
 8007388:	bfa8      	it	ge
 800738a:	f8c8 3000 	strge.w	r3, [r8]
 800738e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007392:	4b9f      	ldr	r3, [pc, #636]	; (8007610 <_dtoa_r+0x2e8>)
 8007394:	bfb8      	it	lt
 8007396:	f8c8 2000 	strlt.w	r2, [r8]
 800739a:	ea33 0309 	bics.w	r3, r3, r9
 800739e:	d119      	bne.n	80073d4 <_dtoa_r+0xac>
 80073a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80073a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ac:	4333      	orrs	r3, r6
 80073ae:	f000 8580 	beq.w	8007eb2 <_dtoa_r+0xb8a>
 80073b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073b4:	b953      	cbnz	r3, 80073cc <_dtoa_r+0xa4>
 80073b6:	4b97      	ldr	r3, [pc, #604]	; (8007614 <_dtoa_r+0x2ec>)
 80073b8:	e022      	b.n	8007400 <_dtoa_r+0xd8>
 80073ba:	4b97      	ldr	r3, [pc, #604]	; (8007618 <_dtoa_r+0x2f0>)
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	3308      	adds	r3, #8
 80073c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	9808      	ldr	r0, [sp, #32]
 80073c6:	b019      	add	sp, #100	; 0x64
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	4b91      	ldr	r3, [pc, #580]	; (8007614 <_dtoa_r+0x2ec>)
 80073ce:	9308      	str	r3, [sp, #32]
 80073d0:	3303      	adds	r3, #3
 80073d2:	e7f5      	b.n	80073c0 <_dtoa_r+0x98>
 80073d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80073dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e0:	2200      	movs	r2, #0
 80073e2:	2300      	movs	r3, #0
 80073e4:	f7f9 fb4c 	bl	8000a80 <__aeabi_dcmpeq>
 80073e8:	4680      	mov	r8, r0
 80073ea:	b158      	cbz	r0, 8007404 <_dtoa_r+0xdc>
 80073ec:	2301      	movs	r3, #1
 80073ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8559 	beq.w	8007eac <_dtoa_r+0xb84>
 80073fa:	4888      	ldr	r0, [pc, #544]	; (800761c <_dtoa_r+0x2f4>)
 80073fc:	6018      	str	r0, [r3, #0]
 80073fe:	1e43      	subs	r3, r0, #1
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	e7df      	b.n	80073c4 <_dtoa_r+0x9c>
 8007404:	ab16      	add	r3, sp, #88	; 0x58
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	ab17      	add	r3, sp, #92	; 0x5c
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	4628      	mov	r0, r5
 800740e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007412:	f001 f8c5 	bl	80085a0 <__d2b>
 8007416:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800741a:	4682      	mov	sl, r0
 800741c:	2c00      	cmp	r4, #0
 800741e:	d07e      	beq.n	800751e <_dtoa_r+0x1f6>
 8007420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007426:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800742a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800742e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007432:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007436:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800743a:	2200      	movs	r2, #0
 800743c:	4b78      	ldr	r3, [pc, #480]	; (8007620 <_dtoa_r+0x2f8>)
 800743e:	f7f8 feff 	bl	8000240 <__aeabi_dsub>
 8007442:	a36b      	add	r3, pc, #428	; (adr r3, 80075f0 <_dtoa_r+0x2c8>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f9 f8b2 	bl	80005b0 <__aeabi_dmul>
 800744c:	a36a      	add	r3, pc, #424	; (adr r3, 80075f8 <_dtoa_r+0x2d0>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 fef7 	bl	8000244 <__adddf3>
 8007456:	4606      	mov	r6, r0
 8007458:	4620      	mov	r0, r4
 800745a:	460f      	mov	r7, r1
 800745c:	f7f9 f83e 	bl	80004dc <__aeabi_i2d>
 8007460:	a367      	add	r3, pc, #412	; (adr r3, 8007600 <_dtoa_r+0x2d8>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 f8a3 	bl	80005b0 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4630      	mov	r0, r6
 8007470:	4639      	mov	r1, r7
 8007472:	f7f8 fee7 	bl	8000244 <__adddf3>
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	f7f9 fb49 	bl	8000b10 <__aeabi_d2iz>
 800747e:	2200      	movs	r2, #0
 8007480:	4681      	mov	r9, r0
 8007482:	2300      	movs	r3, #0
 8007484:	4630      	mov	r0, r6
 8007486:	4639      	mov	r1, r7
 8007488:	f7f9 fb04 	bl	8000a94 <__aeabi_dcmplt>
 800748c:	b148      	cbz	r0, 80074a2 <_dtoa_r+0x17a>
 800748e:	4648      	mov	r0, r9
 8007490:	f7f9 f824 	bl	80004dc <__aeabi_i2d>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 faf2 	bl	8000a80 <__aeabi_dcmpeq>
 800749c:	b908      	cbnz	r0, 80074a2 <_dtoa_r+0x17a>
 800749e:	f109 39ff 	add.w	r9, r9, #4294967295
 80074a2:	f1b9 0f16 	cmp.w	r9, #22
 80074a6:	d857      	bhi.n	8007558 <_dtoa_r+0x230>
 80074a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ac:	4b5d      	ldr	r3, [pc, #372]	; (8007624 <_dtoa_r+0x2fc>)
 80074ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f9 faed 	bl	8000a94 <__aeabi_dcmplt>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d04e      	beq.n	800755c <_dtoa_r+0x234>
 80074be:	2300      	movs	r3, #0
 80074c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80074c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80074c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074c8:	1b1c      	subs	r4, r3, r4
 80074ca:	1e63      	subs	r3, r4, #1
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	bf49      	itett	mi
 80074d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80074d4:	2300      	movpl	r3, #0
 80074d6:	9306      	strmi	r3, [sp, #24]
 80074d8:	2300      	movmi	r3, #0
 80074da:	bf54      	ite	pl
 80074dc:	9306      	strpl	r3, [sp, #24]
 80074de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80074e0:	f1b9 0f00 	cmp.w	r9, #0
 80074e4:	db3c      	blt.n	8007560 <_dtoa_r+0x238>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80074ec:	444b      	add	r3, r9
 80074ee:	9309      	str	r3, [sp, #36]	; 0x24
 80074f0:	2300      	movs	r3, #0
 80074f2:	930a      	str	r3, [sp, #40]	; 0x28
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	d86c      	bhi.n	80075d4 <_dtoa_r+0x2ac>
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	bfc4      	itt	gt
 80074fe:	3b04      	subgt	r3, #4
 8007500:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007502:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007504:	bfc8      	it	gt
 8007506:	2400      	movgt	r4, #0
 8007508:	f1a3 0302 	sub.w	r3, r3, #2
 800750c:	bfd8      	it	le
 800750e:	2401      	movle	r4, #1
 8007510:	2b03      	cmp	r3, #3
 8007512:	f200 808b 	bhi.w	800762c <_dtoa_r+0x304>
 8007516:	e8df f003 	tbb	[pc, r3]
 800751a:	4f2d      	.short	0x4f2d
 800751c:	5b4d      	.short	0x5b4d
 800751e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007522:	441c      	add	r4, r3
 8007524:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007528:	2b20      	cmp	r3, #32
 800752a:	bfc3      	ittte	gt
 800752c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007530:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007534:	fa09 f303 	lslgt.w	r3, r9, r3
 8007538:	f1c3 0320 	rsble	r3, r3, #32
 800753c:	bfc6      	itte	gt
 800753e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007542:	4318      	orrgt	r0, r3
 8007544:	fa06 f003 	lslle.w	r0, r6, r3
 8007548:	f7f8 ffb8 	bl	80004bc <__aeabi_ui2d>
 800754c:	2301      	movs	r3, #1
 800754e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007552:	3c01      	subs	r4, #1
 8007554:	9313      	str	r3, [sp, #76]	; 0x4c
 8007556:	e770      	b.n	800743a <_dtoa_r+0x112>
 8007558:	2301      	movs	r3, #1
 800755a:	e7b3      	b.n	80074c4 <_dtoa_r+0x19c>
 800755c:	900f      	str	r0, [sp, #60]	; 0x3c
 800755e:	e7b2      	b.n	80074c6 <_dtoa_r+0x19e>
 8007560:	9b06      	ldr	r3, [sp, #24]
 8007562:	eba3 0309 	sub.w	r3, r3, r9
 8007566:	9306      	str	r3, [sp, #24]
 8007568:	f1c9 0300 	rsb	r3, r9, #0
 800756c:	930a      	str	r3, [sp, #40]	; 0x28
 800756e:	2300      	movs	r3, #0
 8007570:	930e      	str	r3, [sp, #56]	; 0x38
 8007572:	e7bf      	b.n	80074f4 <_dtoa_r+0x1cc>
 8007574:	2300      	movs	r3, #0
 8007576:	930b      	str	r3, [sp, #44]	; 0x2c
 8007578:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800757a:	2b00      	cmp	r3, #0
 800757c:	dc59      	bgt.n	8007632 <_dtoa_r+0x30a>
 800757e:	f04f 0b01 	mov.w	fp, #1
 8007582:	465b      	mov	r3, fp
 8007584:	f8cd b008 	str.w	fp, [sp, #8]
 8007588:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800758c:	2200      	movs	r2, #0
 800758e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007590:	6042      	str	r2, [r0, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	f102 0614 	add.w	r6, r2, #20
 8007598:	429e      	cmp	r6, r3
 800759a:	6841      	ldr	r1, [r0, #4]
 800759c:	d94f      	bls.n	800763e <_dtoa_r+0x316>
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 fcd8 	bl	8007f54 <_Balloc>
 80075a4:	9008      	str	r0, [sp, #32]
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d14d      	bne.n	8007646 <_dtoa_r+0x31e>
 80075aa:	4602      	mov	r2, r0
 80075ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075b0:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <_dtoa_r+0x300>)
 80075b2:	e6cd      	b.n	8007350 <_dtoa_r+0x28>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e7de      	b.n	8007576 <_dtoa_r+0x24e>
 80075b8:	2300      	movs	r3, #0
 80075ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80075bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075be:	eb09 0b03 	add.w	fp, r9, r3
 80075c2:	f10b 0301 	add.w	r3, fp, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	bfb8      	it	lt
 80075cc:	2301      	movlt	r3, #1
 80075ce:	e7dd      	b.n	800758c <_dtoa_r+0x264>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e7f2      	b.n	80075ba <_dtoa_r+0x292>
 80075d4:	2401      	movs	r4, #1
 80075d6:	2300      	movs	r3, #0
 80075d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80075da:	9322      	str	r3, [sp, #136]	; 0x88
 80075dc:	f04f 3bff 	mov.w	fp, #4294967295
 80075e0:	2200      	movs	r2, #0
 80075e2:	2312      	movs	r3, #18
 80075e4:	f8cd b008 	str.w	fp, [sp, #8]
 80075e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80075ea:	e7cf      	b.n	800758c <_dtoa_r+0x264>
 80075ec:	f3af 8000 	nop.w
 80075f0:	636f4361 	.word	0x636f4361
 80075f4:	3fd287a7 	.word	0x3fd287a7
 80075f8:	8b60c8b3 	.word	0x8b60c8b3
 80075fc:	3fc68a28 	.word	0x3fc68a28
 8007600:	509f79fb 	.word	0x509f79fb
 8007604:	3fd34413 	.word	0x3fd34413
 8007608:	0800ab31 	.word	0x0800ab31
 800760c:	0800ab48 	.word	0x0800ab48
 8007610:	7ff00000 	.word	0x7ff00000
 8007614:	0800ab2d 	.word	0x0800ab2d
 8007618:	0800ab24 	.word	0x0800ab24
 800761c:	0800ab01 	.word	0x0800ab01
 8007620:	3ff80000 	.word	0x3ff80000
 8007624:	0800ac40 	.word	0x0800ac40
 8007628:	0800aba7 	.word	0x0800aba7
 800762c:	2301      	movs	r3, #1
 800762e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007630:	e7d4      	b.n	80075dc <_dtoa_r+0x2b4>
 8007632:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007636:	465b      	mov	r3, fp
 8007638:	f8cd b008 	str.w	fp, [sp, #8]
 800763c:	e7a6      	b.n	800758c <_dtoa_r+0x264>
 800763e:	3101      	adds	r1, #1
 8007640:	6041      	str	r1, [r0, #4]
 8007642:	0052      	lsls	r2, r2, #1
 8007644:	e7a6      	b.n	8007594 <_dtoa_r+0x26c>
 8007646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007648:	9a08      	ldr	r2, [sp, #32]
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	9b02      	ldr	r3, [sp, #8]
 800764e:	2b0e      	cmp	r3, #14
 8007650:	f200 80a8 	bhi.w	80077a4 <_dtoa_r+0x47c>
 8007654:	2c00      	cmp	r4, #0
 8007656:	f000 80a5 	beq.w	80077a4 <_dtoa_r+0x47c>
 800765a:	f1b9 0f00 	cmp.w	r9, #0
 800765e:	dd34      	ble.n	80076ca <_dtoa_r+0x3a2>
 8007660:	4a9a      	ldr	r2, [pc, #616]	; (80078cc <_dtoa_r+0x5a4>)
 8007662:	f009 030f 	and.w	r3, r9, #15
 8007666:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800766a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800766e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007672:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007676:	ea4f 1429 	mov.w	r4, r9, asr #4
 800767a:	d016      	beq.n	80076aa <_dtoa_r+0x382>
 800767c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007680:	4b93      	ldr	r3, [pc, #588]	; (80078d0 <_dtoa_r+0x5a8>)
 8007682:	2703      	movs	r7, #3
 8007684:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007688:	f7f9 f8bc 	bl	8000804 <__aeabi_ddiv>
 800768c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007690:	f004 040f 	and.w	r4, r4, #15
 8007694:	4e8e      	ldr	r6, [pc, #568]	; (80078d0 <_dtoa_r+0x5a8>)
 8007696:	b954      	cbnz	r4, 80076ae <_dtoa_r+0x386>
 8007698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800769c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a0:	f7f9 f8b0 	bl	8000804 <__aeabi_ddiv>
 80076a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a8:	e029      	b.n	80076fe <_dtoa_r+0x3d6>
 80076aa:	2702      	movs	r7, #2
 80076ac:	e7f2      	b.n	8007694 <_dtoa_r+0x36c>
 80076ae:	07e1      	lsls	r1, r4, #31
 80076b0:	d508      	bpl.n	80076c4 <_dtoa_r+0x39c>
 80076b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076ba:	f7f8 ff79 	bl	80005b0 <__aeabi_dmul>
 80076be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076c2:	3701      	adds	r7, #1
 80076c4:	1064      	asrs	r4, r4, #1
 80076c6:	3608      	adds	r6, #8
 80076c8:	e7e5      	b.n	8007696 <_dtoa_r+0x36e>
 80076ca:	f000 80a5 	beq.w	8007818 <_dtoa_r+0x4f0>
 80076ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076d2:	f1c9 0400 	rsb	r4, r9, #0
 80076d6:	4b7d      	ldr	r3, [pc, #500]	; (80078cc <_dtoa_r+0x5a4>)
 80076d8:	f004 020f 	and.w	r2, r4, #15
 80076dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f8 ff64 	bl	80005b0 <__aeabi_dmul>
 80076e8:	2702      	movs	r7, #2
 80076ea:	2300      	movs	r3, #0
 80076ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f0:	4e77      	ldr	r6, [pc, #476]	; (80078d0 <_dtoa_r+0x5a8>)
 80076f2:	1124      	asrs	r4, r4, #4
 80076f4:	2c00      	cmp	r4, #0
 80076f6:	f040 8084 	bne.w	8007802 <_dtoa_r+0x4da>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d2      	bne.n	80076a4 <_dtoa_r+0x37c>
 80076fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 808b 	beq.w	800781c <_dtoa_r+0x4f4>
 8007706:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800770a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800770e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007712:	2200      	movs	r2, #0
 8007714:	4b6f      	ldr	r3, [pc, #444]	; (80078d4 <_dtoa_r+0x5ac>)
 8007716:	f7f9 f9bd 	bl	8000a94 <__aeabi_dcmplt>
 800771a:	2800      	cmp	r0, #0
 800771c:	d07e      	beq.n	800781c <_dtoa_r+0x4f4>
 800771e:	9b02      	ldr	r3, [sp, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d07b      	beq.n	800781c <_dtoa_r+0x4f4>
 8007724:	f1bb 0f00 	cmp.w	fp, #0
 8007728:	dd38      	ble.n	800779c <_dtoa_r+0x474>
 800772a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800772e:	2200      	movs	r2, #0
 8007730:	4b69      	ldr	r3, [pc, #420]	; (80078d8 <_dtoa_r+0x5b0>)
 8007732:	f7f8 ff3d 	bl	80005b0 <__aeabi_dmul>
 8007736:	465c      	mov	r4, fp
 8007738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800773c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007740:	3701      	adds	r7, #1
 8007742:	4638      	mov	r0, r7
 8007744:	f7f8 feca 	bl	80004dc <__aeabi_i2d>
 8007748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774c:	f7f8 ff30 	bl	80005b0 <__aeabi_dmul>
 8007750:	2200      	movs	r2, #0
 8007752:	4b62      	ldr	r3, [pc, #392]	; (80078dc <_dtoa_r+0x5b4>)
 8007754:	f7f8 fd76 	bl	8000244 <__adddf3>
 8007758:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800775c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007760:	9611      	str	r6, [sp, #68]	; 0x44
 8007762:	2c00      	cmp	r4, #0
 8007764:	d15d      	bne.n	8007822 <_dtoa_r+0x4fa>
 8007766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800776a:	2200      	movs	r2, #0
 800776c:	4b5c      	ldr	r3, [pc, #368]	; (80078e0 <_dtoa_r+0x5b8>)
 800776e:	f7f8 fd67 	bl	8000240 <__aeabi_dsub>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800777a:	4633      	mov	r3, r6
 800777c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800777e:	f7f9 f9a7 	bl	8000ad0 <__aeabi_dcmpgt>
 8007782:	2800      	cmp	r0, #0
 8007784:	f040 829e 	bne.w	8007cc4 <_dtoa_r+0x99c>
 8007788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800778c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800778e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007792:	f7f9 f97f 	bl	8000a94 <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f040 8292 	bne.w	8007cc0 <_dtoa_r+0x998>
 800779c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80077a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f2c0 8153 	blt.w	8007a52 <_dtoa_r+0x72a>
 80077ac:	f1b9 0f0e 	cmp.w	r9, #14
 80077b0:	f300 814f 	bgt.w	8007a52 <_dtoa_r+0x72a>
 80077b4:	4b45      	ldr	r3, [pc, #276]	; (80078cc <_dtoa_r+0x5a4>)
 80077b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80077ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80077c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f280 80db 	bge.w	8007980 <_dtoa_r+0x658>
 80077ca:	9b02      	ldr	r3, [sp, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f300 80d7 	bgt.w	8007980 <_dtoa_r+0x658>
 80077d2:	f040 8274 	bne.w	8007cbe <_dtoa_r+0x996>
 80077d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077da:	2200      	movs	r2, #0
 80077dc:	4b40      	ldr	r3, [pc, #256]	; (80078e0 <_dtoa_r+0x5b8>)
 80077de:	f7f8 fee7 	bl	80005b0 <__aeabi_dmul>
 80077e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e6:	f7f9 f969 	bl	8000abc <__aeabi_dcmpge>
 80077ea:	9c02      	ldr	r4, [sp, #8]
 80077ec:	4626      	mov	r6, r4
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f040 824a 	bne.w	8007c88 <_dtoa_r+0x960>
 80077f4:	2331      	movs	r3, #49	; 0x31
 80077f6:	9f08      	ldr	r7, [sp, #32]
 80077f8:	f109 0901 	add.w	r9, r9, #1
 80077fc:	f807 3b01 	strb.w	r3, [r7], #1
 8007800:	e246      	b.n	8007c90 <_dtoa_r+0x968>
 8007802:	07e2      	lsls	r2, r4, #31
 8007804:	d505      	bpl.n	8007812 <_dtoa_r+0x4ea>
 8007806:	e9d6 2300 	ldrd	r2, r3, [r6]
 800780a:	f7f8 fed1 	bl	80005b0 <__aeabi_dmul>
 800780e:	2301      	movs	r3, #1
 8007810:	3701      	adds	r7, #1
 8007812:	1064      	asrs	r4, r4, #1
 8007814:	3608      	adds	r6, #8
 8007816:	e76d      	b.n	80076f4 <_dtoa_r+0x3cc>
 8007818:	2702      	movs	r7, #2
 800781a:	e770      	b.n	80076fe <_dtoa_r+0x3d6>
 800781c:	46c8      	mov	r8, r9
 800781e:	9c02      	ldr	r4, [sp, #8]
 8007820:	e78f      	b.n	8007742 <_dtoa_r+0x41a>
 8007822:	9908      	ldr	r1, [sp, #32]
 8007824:	4b29      	ldr	r3, [pc, #164]	; (80078cc <_dtoa_r+0x5a4>)
 8007826:	4421      	add	r1, r4
 8007828:	9112      	str	r1, [sp, #72]	; 0x48
 800782a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007830:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007834:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007838:	2900      	cmp	r1, #0
 800783a:	d055      	beq.n	80078e8 <_dtoa_r+0x5c0>
 800783c:	2000      	movs	r0, #0
 800783e:	4929      	ldr	r1, [pc, #164]	; (80078e4 <_dtoa_r+0x5bc>)
 8007840:	f7f8 ffe0 	bl	8000804 <__aeabi_ddiv>
 8007844:	463b      	mov	r3, r7
 8007846:	4632      	mov	r2, r6
 8007848:	f7f8 fcfa 	bl	8000240 <__aeabi_dsub>
 800784c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007850:	9f08      	ldr	r7, [sp, #32]
 8007852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007856:	f7f9 f95b 	bl	8000b10 <__aeabi_d2iz>
 800785a:	4604      	mov	r4, r0
 800785c:	f7f8 fe3e 	bl	80004dc <__aeabi_i2d>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007868:	f7f8 fcea 	bl	8000240 <__aeabi_dsub>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	3430      	adds	r4, #48	; 0x30
 8007872:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800787a:	f807 4b01 	strb.w	r4, [r7], #1
 800787e:	f7f9 f909 	bl	8000a94 <__aeabi_dcmplt>
 8007882:	2800      	cmp	r0, #0
 8007884:	d174      	bne.n	8007970 <_dtoa_r+0x648>
 8007886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800788a:	2000      	movs	r0, #0
 800788c:	4911      	ldr	r1, [pc, #68]	; (80078d4 <_dtoa_r+0x5ac>)
 800788e:	f7f8 fcd7 	bl	8000240 <__aeabi_dsub>
 8007892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007896:	f7f9 f8fd 	bl	8000a94 <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	f040 80b6 	bne.w	8007a0c <_dtoa_r+0x6e4>
 80078a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078a2:	429f      	cmp	r7, r3
 80078a4:	f43f af7a 	beq.w	800779c <_dtoa_r+0x474>
 80078a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078ac:	2200      	movs	r2, #0
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <_dtoa_r+0x5b0>)
 80078b0:	f7f8 fe7e 	bl	80005b0 <__aeabi_dmul>
 80078b4:	2200      	movs	r2, #0
 80078b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <_dtoa_r+0x5b0>)
 80078c0:	f7f8 fe76 	bl	80005b0 <__aeabi_dmul>
 80078c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c8:	e7c3      	b.n	8007852 <_dtoa_r+0x52a>
 80078ca:	bf00      	nop
 80078cc:	0800ac40 	.word	0x0800ac40
 80078d0:	0800ac18 	.word	0x0800ac18
 80078d4:	3ff00000 	.word	0x3ff00000
 80078d8:	40240000 	.word	0x40240000
 80078dc:	401c0000 	.word	0x401c0000
 80078e0:	40140000 	.word	0x40140000
 80078e4:	3fe00000 	.word	0x3fe00000
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f8 fe60 	bl	80005b0 <__aeabi_dmul>
 80078f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078f6:	9c08      	ldr	r4, [sp, #32]
 80078f8:	9314      	str	r3, [sp, #80]	; 0x50
 80078fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078fe:	f7f9 f907 	bl	8000b10 <__aeabi_d2iz>
 8007902:	9015      	str	r0, [sp, #84]	; 0x54
 8007904:	f7f8 fdea 	bl	80004dc <__aeabi_i2d>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007910:	f7f8 fc96 	bl	8000240 <__aeabi_dsub>
 8007914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007916:	4606      	mov	r6, r0
 8007918:	3330      	adds	r3, #48	; 0x30
 800791a:	f804 3b01 	strb.w	r3, [r4], #1
 800791e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007920:	460f      	mov	r7, r1
 8007922:	429c      	cmp	r4, r3
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	d124      	bne.n	8007974 <_dtoa_r+0x64c>
 800792a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800792e:	4bb3      	ldr	r3, [pc, #716]	; (8007bfc <_dtoa_r+0x8d4>)
 8007930:	f7f8 fc88 	bl	8000244 <__adddf3>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f9 f8c8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007940:	2800      	cmp	r0, #0
 8007942:	d162      	bne.n	8007a0a <_dtoa_r+0x6e2>
 8007944:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007948:	2000      	movs	r0, #0
 800794a:	49ac      	ldr	r1, [pc, #688]	; (8007bfc <_dtoa_r+0x8d4>)
 800794c:	f7f8 fc78 	bl	8000240 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f9 f89c 	bl	8000a94 <__aeabi_dcmplt>
 800795c:	2800      	cmp	r0, #0
 800795e:	f43f af1d 	beq.w	800779c <_dtoa_r+0x474>
 8007962:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007964:	1e7b      	subs	r3, r7, #1
 8007966:	9314      	str	r3, [sp, #80]	; 0x50
 8007968:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800796c:	2b30      	cmp	r3, #48	; 0x30
 800796e:	d0f8      	beq.n	8007962 <_dtoa_r+0x63a>
 8007970:	46c1      	mov	r9, r8
 8007972:	e03a      	b.n	80079ea <_dtoa_r+0x6c2>
 8007974:	4ba2      	ldr	r3, [pc, #648]	; (8007c00 <_dtoa_r+0x8d8>)
 8007976:	f7f8 fe1b 	bl	80005b0 <__aeabi_dmul>
 800797a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800797e:	e7bc      	b.n	80078fa <_dtoa_r+0x5d2>
 8007980:	9f08      	ldr	r7, [sp, #32]
 8007982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800798a:	f7f8 ff3b 	bl	8000804 <__aeabi_ddiv>
 800798e:	f7f9 f8bf 	bl	8000b10 <__aeabi_d2iz>
 8007992:	4604      	mov	r4, r0
 8007994:	f7f8 fda2 	bl	80004dc <__aeabi_i2d>
 8007998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800799c:	f7f8 fe08 	bl	80005b0 <__aeabi_dmul>
 80079a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80079a4:	460b      	mov	r3, r1
 80079a6:	4602      	mov	r2, r0
 80079a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ac:	f7f8 fc48 	bl	8000240 <__aeabi_dsub>
 80079b0:	f807 6b01 	strb.w	r6, [r7], #1
 80079b4:	9e08      	ldr	r6, [sp, #32]
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	1bbe      	subs	r6, r7, r6
 80079ba:	42b3      	cmp	r3, r6
 80079bc:	d13a      	bne.n	8007a34 <_dtoa_r+0x70c>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	f7f8 fc3f 	bl	8000244 <__adddf3>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079d2:	f7f9 f87d 	bl	8000ad0 <__aeabi_dcmpgt>
 80079d6:	bb58      	cbnz	r0, 8007a30 <_dtoa_r+0x708>
 80079d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e0:	f7f9 f84e 	bl	8000a80 <__aeabi_dcmpeq>
 80079e4:	b108      	cbz	r0, 80079ea <_dtoa_r+0x6c2>
 80079e6:	07e1      	lsls	r1, r4, #31
 80079e8:	d422      	bmi.n	8007a30 <_dtoa_r+0x708>
 80079ea:	4628      	mov	r0, r5
 80079ec:	4651      	mov	r1, sl
 80079ee:	f000 faf1 	bl	8007fd4 <_Bfree>
 80079f2:	2300      	movs	r3, #0
 80079f4:	703b      	strb	r3, [r7, #0]
 80079f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079f8:	f109 0001 	add.w	r0, r9, #1
 80079fc:	6018      	str	r0, [r3, #0]
 80079fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f43f acdf 	beq.w	80073c4 <_dtoa_r+0x9c>
 8007a06:	601f      	str	r7, [r3, #0]
 8007a08:	e4dc      	b.n	80073c4 <_dtoa_r+0x9c>
 8007a0a:	4627      	mov	r7, r4
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	461f      	mov	r7, r3
 8007a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a14:	2a39      	cmp	r2, #57	; 0x39
 8007a16:	d107      	bne.n	8007a28 <_dtoa_r+0x700>
 8007a18:	9a08      	ldr	r2, [sp, #32]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d1f7      	bne.n	8007a0e <_dtoa_r+0x6e6>
 8007a1e:	2230      	movs	r2, #48	; 0x30
 8007a20:	9908      	ldr	r1, [sp, #32]
 8007a22:	f108 0801 	add.w	r8, r8, #1
 8007a26:	700a      	strb	r2, [r1, #0]
 8007a28:	781a      	ldrb	r2, [r3, #0]
 8007a2a:	3201      	adds	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e79f      	b.n	8007970 <_dtoa_r+0x648>
 8007a30:	46c8      	mov	r8, r9
 8007a32:	e7eb      	b.n	8007a0c <_dtoa_r+0x6e4>
 8007a34:	2200      	movs	r2, #0
 8007a36:	4b72      	ldr	r3, [pc, #456]	; (8007c00 <_dtoa_r+0x8d8>)
 8007a38:	f7f8 fdba 	bl	80005b0 <__aeabi_dmul>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2300      	movs	r3, #0
 8007a48:	f7f9 f81a 	bl	8000a80 <__aeabi_dcmpeq>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d098      	beq.n	8007982 <_dtoa_r+0x65a>
 8007a50:	e7cb      	b.n	80079ea <_dtoa_r+0x6c2>
 8007a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	f000 80cd 	beq.w	8007bf4 <_dtoa_r+0x8cc>
 8007a5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a5c:	2a01      	cmp	r2, #1
 8007a5e:	f300 80af 	bgt.w	8007bc0 <_dtoa_r+0x898>
 8007a62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	f000 80a7 	beq.w	8007bb8 <_dtoa_r+0x890>
 8007a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a70:	9f06      	ldr	r7, [sp, #24]
 8007a72:	9a06      	ldr	r2, [sp, #24]
 8007a74:	2101      	movs	r1, #1
 8007a76:	441a      	add	r2, r3
 8007a78:	9206      	str	r2, [sp, #24]
 8007a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	441a      	add	r2, r3
 8007a80:	9209      	str	r2, [sp, #36]	; 0x24
 8007a82:	f000 fb61 	bl	8008148 <__i2b>
 8007a86:	4606      	mov	r6, r0
 8007a88:	2f00      	cmp	r7, #0
 8007a8a:	dd0c      	ble.n	8007aa6 <_dtoa_r+0x77e>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd09      	ble.n	8007aa6 <_dtoa_r+0x77e>
 8007a92:	42bb      	cmp	r3, r7
 8007a94:	bfa8      	it	ge
 8007a96:	463b      	movge	r3, r7
 8007a98:	9a06      	ldr	r2, [sp, #24]
 8007a9a:	1aff      	subs	r7, r7, r3
 8007a9c:	1ad2      	subs	r2, r2, r3
 8007a9e:	9206      	str	r2, [sp, #24]
 8007aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa8:	b1f3      	cbz	r3, 8007ae8 <_dtoa_r+0x7c0>
 8007aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80a9 	beq.w	8007c04 <_dtoa_r+0x8dc>
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	dd10      	ble.n	8007ad8 <_dtoa_r+0x7b0>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4622      	mov	r2, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 fbfe 	bl	80082bc <__pow5mult>
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 fb54 	bl	8008174 <__multiply>
 8007acc:	4680      	mov	r8, r0
 8007ace:	4651      	mov	r1, sl
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 fa7f 	bl	8007fd4 <_Bfree>
 8007ad6:	46c2      	mov	sl, r8
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ada:	1b1a      	subs	r2, r3, r4
 8007adc:	d004      	beq.n	8007ae8 <_dtoa_r+0x7c0>
 8007ade:	4651      	mov	r1, sl
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f000 fbeb 	bl	80082bc <__pow5mult>
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	2101      	movs	r1, #1
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 fb2c 	bl	8008148 <__i2b>
 8007af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af2:	4604      	mov	r4, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f340 8087 	ble.w	8007c08 <_dtoa_r+0x8e0>
 8007afa:	461a      	mov	r2, r3
 8007afc:	4601      	mov	r1, r0
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 fbdc 	bl	80082bc <__pow5mult>
 8007b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b06:	4604      	mov	r4, r0
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	f340 8080 	ble.w	8007c0e <_dtoa_r+0x8e6>
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b18:	6918      	ldr	r0, [r3, #16]
 8007b1a:	f000 fac7 	bl	80080ac <__hi0bits>
 8007b1e:	f1c0 0020 	rsb	r0, r0, #32
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	4418      	add	r0, r3
 8007b26:	f010 001f 	ands.w	r0, r0, #31
 8007b2a:	f000 8092 	beq.w	8007c52 <_dtoa_r+0x92a>
 8007b2e:	f1c0 0320 	rsb	r3, r0, #32
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	f340 808a 	ble.w	8007c4c <_dtoa_r+0x924>
 8007b38:	f1c0 001c 	rsb	r0, r0, #28
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	4407      	add	r7, r0
 8007b40:	4403      	add	r3, r0
 8007b42:	9306      	str	r3, [sp, #24]
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	4403      	add	r3, r0
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	9b06      	ldr	r3, [sp, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	dd05      	ble.n	8007b5c <_dtoa_r+0x834>
 8007b50:	4651      	mov	r1, sl
 8007b52:	461a      	mov	r2, r3
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 fc0b 	bl	8008370 <__lshift>
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd05      	ble.n	8007b6e <_dtoa_r+0x846>
 8007b62:	4621      	mov	r1, r4
 8007b64:	461a      	mov	r2, r3
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 fc02 	bl	8008370 <__lshift>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d070      	beq.n	8007c56 <_dtoa_r+0x92e>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4650      	mov	r0, sl
 8007b78:	f000 fc66 	bl	8008448 <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	da6a      	bge.n	8007c56 <_dtoa_r+0x92e>
 8007b80:	2300      	movs	r3, #0
 8007b82:	4651      	mov	r1, sl
 8007b84:	220a      	movs	r2, #10
 8007b86:	4628      	mov	r0, r5
 8007b88:	f000 fa46 	bl	8008018 <__multadd>
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b8e:	4682      	mov	sl, r0
 8007b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8193 	beq.w	8007ec0 <_dtoa_r+0xb98>
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	220a      	movs	r2, #10
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 fa39 	bl	8008018 <__multadd>
 8007ba6:	f1bb 0f00 	cmp.w	fp, #0
 8007baa:	4606      	mov	r6, r0
 8007bac:	f300 8093 	bgt.w	8007cd6 <_dtoa_r+0x9ae>
 8007bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	dc57      	bgt.n	8007c66 <_dtoa_r+0x93e>
 8007bb6:	e08e      	b.n	8007cd6 <_dtoa_r+0x9ae>
 8007bb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007bba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bbe:	e756      	b.n	8007a6e <_dtoa_r+0x746>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	1e5c      	subs	r4, r3, #1
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	bfb7      	itett	lt
 8007bca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007bcc:	1b1c      	subge	r4, r3, r4
 8007bce:	1ae2      	sublt	r2, r4, r3
 8007bd0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bd2:	bfbe      	ittt	lt
 8007bd4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007bd6:	189b      	addlt	r3, r3, r2
 8007bd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	bfb8      	it	lt
 8007bde:	2400      	movlt	r4, #0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bfbb      	ittet	lt
 8007be4:	9b06      	ldrlt	r3, [sp, #24]
 8007be6:	9a02      	ldrlt	r2, [sp, #8]
 8007be8:	9f06      	ldrge	r7, [sp, #24]
 8007bea:	1a9f      	sublt	r7, r3, r2
 8007bec:	bfac      	ite	ge
 8007bee:	9b02      	ldrge	r3, [sp, #8]
 8007bf0:	2300      	movlt	r3, #0
 8007bf2:	e73e      	b.n	8007a72 <_dtoa_r+0x74a>
 8007bf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bf6:	9f06      	ldr	r7, [sp, #24]
 8007bf8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007bfa:	e745      	b.n	8007a88 <_dtoa_r+0x760>
 8007bfc:	3fe00000 	.word	0x3fe00000
 8007c00:	40240000 	.word	0x40240000
 8007c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c06:	e76a      	b.n	8007ade <_dtoa_r+0x7b6>
 8007c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	dc19      	bgt.n	8007c42 <_dtoa_r+0x91a>
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	b9bb      	cbnz	r3, 8007c42 <_dtoa_r+0x91a>
 8007c12:	9b05      	ldr	r3, [sp, #20]
 8007c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c18:	b99b      	cbnz	r3, 8007c42 <_dtoa_r+0x91a>
 8007c1a:	9b05      	ldr	r3, [sp, #20]
 8007c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c20:	0d1b      	lsrs	r3, r3, #20
 8007c22:	051b      	lsls	r3, r3, #20
 8007c24:	b183      	cbz	r3, 8007c48 <_dtoa_r+0x920>
 8007c26:	f04f 0801 	mov.w	r8, #1
 8007c2a:	9b06      	ldr	r3, [sp, #24]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	9306      	str	r3, [sp, #24]
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	3301      	adds	r3, #1
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f47f af6a 	bne.w	8007b12 <_dtoa_r+0x7ea>
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e76f      	b.n	8007b22 <_dtoa_r+0x7fa>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	e7f6      	b.n	8007c36 <_dtoa_r+0x90e>
 8007c48:	4698      	mov	r8, r3
 8007c4a:	e7f4      	b.n	8007c36 <_dtoa_r+0x90e>
 8007c4c:	f43f af7d 	beq.w	8007b4a <_dtoa_r+0x822>
 8007c50:	4618      	mov	r0, r3
 8007c52:	301c      	adds	r0, #28
 8007c54:	e772      	b.n	8007b3c <_dtoa_r+0x814>
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	dc36      	bgt.n	8007cca <_dtoa_r+0x9a2>
 8007c5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	dd33      	ble.n	8007cca <_dtoa_r+0x9a2>
 8007c62:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c66:	f1bb 0f00 	cmp.w	fp, #0
 8007c6a:	d10d      	bne.n	8007c88 <_dtoa_r+0x960>
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	465b      	mov	r3, fp
 8007c70:	2205      	movs	r2, #5
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 f9d0 	bl	8008018 <__multadd>
 8007c78:	4601      	mov	r1, r0
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	f000 fbe3 	bl	8008448 <__mcmp>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f73f adb6 	bgt.w	80077f4 <_dtoa_r+0x4cc>
 8007c88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c8a:	9f08      	ldr	r7, [sp, #32]
 8007c8c:	ea6f 0903 	mvn.w	r9, r3
 8007c90:	f04f 0800 	mov.w	r8, #0
 8007c94:	4621      	mov	r1, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 f99c 	bl	8007fd4 <_Bfree>
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	f43f aea4 	beq.w	80079ea <_dtoa_r+0x6c2>
 8007ca2:	f1b8 0f00 	cmp.w	r8, #0
 8007ca6:	d005      	beq.n	8007cb4 <_dtoa_r+0x98c>
 8007ca8:	45b0      	cmp	r8, r6
 8007caa:	d003      	beq.n	8007cb4 <_dtoa_r+0x98c>
 8007cac:	4641      	mov	r1, r8
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 f990 	bl	8007fd4 <_Bfree>
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f98c 	bl	8007fd4 <_Bfree>
 8007cbc:	e695      	b.n	80079ea <_dtoa_r+0x6c2>
 8007cbe:	2400      	movs	r4, #0
 8007cc0:	4626      	mov	r6, r4
 8007cc2:	e7e1      	b.n	8007c88 <_dtoa_r+0x960>
 8007cc4:	46c1      	mov	r9, r8
 8007cc6:	4626      	mov	r6, r4
 8007cc8:	e594      	b.n	80077f4 <_dtoa_r+0x4cc>
 8007cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ccc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80fc 	beq.w	8007ece <_dtoa_r+0xba6>
 8007cd6:	2f00      	cmp	r7, #0
 8007cd8:	dd05      	ble.n	8007ce6 <_dtoa_r+0x9be>
 8007cda:	4631      	mov	r1, r6
 8007cdc:	463a      	mov	r2, r7
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fb46 	bl	8008370 <__lshift>
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	f1b8 0f00 	cmp.w	r8, #0
 8007cea:	d05c      	beq.n	8007da6 <_dtoa_r+0xa7e>
 8007cec:	4628      	mov	r0, r5
 8007cee:	6871      	ldr	r1, [r6, #4]
 8007cf0:	f000 f930 	bl	8007f54 <_Balloc>
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	b928      	cbnz	r0, 8007d04 <_dtoa_r+0x9dc>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cfe:	4b7e      	ldr	r3, [pc, #504]	; (8007ef8 <_dtoa_r+0xbd0>)
 8007d00:	f7ff bb26 	b.w	8007350 <_dtoa_r+0x28>
 8007d04:	6932      	ldr	r2, [r6, #16]
 8007d06:	f106 010c 	add.w	r1, r6, #12
 8007d0a:	3202      	adds	r2, #2
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	300c      	adds	r0, #12
 8007d10:	f000 f912 	bl	8007f38 <memcpy>
 8007d14:	2201      	movs	r2, #1
 8007d16:	4639      	mov	r1, r7
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 fb29 	bl	8008370 <__lshift>
 8007d1e:	46b0      	mov	r8, r6
 8007d20:	4606      	mov	r6, r0
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	3301      	adds	r3, #1
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	9b08      	ldr	r3, [sp, #32]
 8007d2a:	445b      	add	r3, fp
 8007d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	9309      	str	r3, [sp, #36]	; 0x24
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d40:	f7ff fa62 	bl	8007208 <quorem>
 8007d44:	4603      	mov	r3, r0
 8007d46:	4641      	mov	r1, r8
 8007d48:	3330      	adds	r3, #48	; 0x30
 8007d4a:	9004      	str	r0, [sp, #16]
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d50:	f000 fb7a 	bl	8008448 <__mcmp>
 8007d54:	4632      	mov	r2, r6
 8007d56:	9006      	str	r0, [sp, #24]
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 fb90 	bl	8008480 <__mdiff>
 8007d60:	68c2      	ldr	r2, [r0, #12]
 8007d62:	4607      	mov	r7, r0
 8007d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d66:	bb02      	cbnz	r2, 8007daa <_dtoa_r+0xa82>
 8007d68:	4601      	mov	r1, r0
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	f000 fb6c 	bl	8008448 <__mcmp>
 8007d70:	4602      	mov	r2, r0
 8007d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d74:	4639      	mov	r1, r7
 8007d76:	4628      	mov	r0, r5
 8007d78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d7c:	f000 f92a 	bl	8007fd4 <_Bfree>
 8007d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d84:	9f02      	ldr	r7, [sp, #8]
 8007d86:	ea43 0102 	orr.w	r1, r3, r2
 8007d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d90:	d10d      	bne.n	8007dae <_dtoa_r+0xa86>
 8007d92:	2b39      	cmp	r3, #57	; 0x39
 8007d94:	d027      	beq.n	8007de6 <_dtoa_r+0xabe>
 8007d96:	9a06      	ldr	r2, [sp, #24]
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	dd01      	ble.n	8007da0 <_dtoa_r+0xa78>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	3331      	adds	r3, #49	; 0x31
 8007da0:	f88b 3000 	strb.w	r3, [fp]
 8007da4:	e776      	b.n	8007c94 <_dtoa_r+0x96c>
 8007da6:	4630      	mov	r0, r6
 8007da8:	e7b9      	b.n	8007d1e <_dtoa_r+0x9f6>
 8007daa:	2201      	movs	r2, #1
 8007dac:	e7e2      	b.n	8007d74 <_dtoa_r+0xa4c>
 8007dae:	9906      	ldr	r1, [sp, #24]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	db04      	blt.n	8007dbe <_dtoa_r+0xa96>
 8007db4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007db6:	4301      	orrs	r1, r0
 8007db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dba:	4301      	orrs	r1, r0
 8007dbc:	d120      	bne.n	8007e00 <_dtoa_r+0xad8>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	ddee      	ble.n	8007da0 <_dtoa_r+0xa78>
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	9302      	str	r3, [sp, #8]
 8007dca:	f000 fad1 	bl	8008370 <__lshift>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	f000 fb39 	bl	8008448 <__mcmp>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	dc02      	bgt.n	8007de2 <_dtoa_r+0xaba>
 8007ddc:	d1e0      	bne.n	8007da0 <_dtoa_r+0xa78>
 8007dde:	07da      	lsls	r2, r3, #31
 8007de0:	d5de      	bpl.n	8007da0 <_dtoa_r+0xa78>
 8007de2:	2b39      	cmp	r3, #57	; 0x39
 8007de4:	d1da      	bne.n	8007d9c <_dtoa_r+0xa74>
 8007de6:	2339      	movs	r3, #57	; 0x39
 8007de8:	f88b 3000 	strb.w	r3, [fp]
 8007dec:	463b      	mov	r3, r7
 8007dee:	461f      	mov	r7, r3
 8007df0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	2a39      	cmp	r2, #57	; 0x39
 8007df8:	d050      	beq.n	8007e9c <_dtoa_r+0xb74>
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e749      	b.n	8007c94 <_dtoa_r+0x96c>
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	dd03      	ble.n	8007e0c <_dtoa_r+0xae4>
 8007e04:	2b39      	cmp	r3, #57	; 0x39
 8007e06:	d0ee      	beq.n	8007de6 <_dtoa_r+0xabe>
 8007e08:	3301      	adds	r3, #1
 8007e0a:	e7c9      	b.n	8007da0 <_dtoa_r+0xa78>
 8007e0c:	9a02      	ldr	r2, [sp, #8]
 8007e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d02a      	beq.n	8007e6e <_dtoa_r+0xb46>
 8007e18:	4651      	mov	r1, sl
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 f8fa 	bl	8008018 <__multadd>
 8007e24:	45b0      	cmp	r8, r6
 8007e26:	4682      	mov	sl, r0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	f04f 020a 	mov.w	r2, #10
 8007e30:	4641      	mov	r1, r8
 8007e32:	4628      	mov	r0, r5
 8007e34:	d107      	bne.n	8007e46 <_dtoa_r+0xb1e>
 8007e36:	f000 f8ef 	bl	8008018 <__multadd>
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	3301      	adds	r3, #1
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	e777      	b.n	8007d36 <_dtoa_r+0xa0e>
 8007e46:	f000 f8e7 	bl	8008018 <__multadd>
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	220a      	movs	r2, #10
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f8e0 	bl	8008018 <__multadd>
 8007e58:	4606      	mov	r6, r0
 8007e5a:	e7f0      	b.n	8007e3e <_dtoa_r+0xb16>
 8007e5c:	f1bb 0f00 	cmp.w	fp, #0
 8007e60:	bfcc      	ite	gt
 8007e62:	465f      	movgt	r7, fp
 8007e64:	2701      	movle	r7, #1
 8007e66:	f04f 0800 	mov.w	r8, #0
 8007e6a:	9a08      	ldr	r2, [sp, #32]
 8007e6c:	4417      	add	r7, r2
 8007e6e:	4651      	mov	r1, sl
 8007e70:	2201      	movs	r2, #1
 8007e72:	4628      	mov	r0, r5
 8007e74:	9302      	str	r3, [sp, #8]
 8007e76:	f000 fa7b 	bl	8008370 <__lshift>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	f000 fae3 	bl	8008448 <__mcmp>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	dcb2      	bgt.n	8007dec <_dtoa_r+0xac4>
 8007e86:	d102      	bne.n	8007e8e <_dtoa_r+0xb66>
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d4ae      	bmi.n	8007dec <_dtoa_r+0xac4>
 8007e8e:	463b      	mov	r3, r7
 8007e90:	461f      	mov	r7, r3
 8007e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e96:	2a30      	cmp	r2, #48	; 0x30
 8007e98:	d0fa      	beq.n	8007e90 <_dtoa_r+0xb68>
 8007e9a:	e6fb      	b.n	8007c94 <_dtoa_r+0x96c>
 8007e9c:	9a08      	ldr	r2, [sp, #32]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d1a5      	bne.n	8007dee <_dtoa_r+0xac6>
 8007ea2:	2331      	movs	r3, #49	; 0x31
 8007ea4:	f109 0901 	add.w	r9, r9, #1
 8007ea8:	7013      	strb	r3, [r2, #0]
 8007eaa:	e6f3      	b.n	8007c94 <_dtoa_r+0x96c>
 8007eac:	4b13      	ldr	r3, [pc, #76]	; (8007efc <_dtoa_r+0xbd4>)
 8007eae:	f7ff baa7 	b.w	8007400 <_dtoa_r+0xd8>
 8007eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f47f aa80 	bne.w	80073ba <_dtoa_r+0x92>
 8007eba:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <_dtoa_r+0xbd8>)
 8007ebc:	f7ff baa0 	b.w	8007400 <_dtoa_r+0xd8>
 8007ec0:	f1bb 0f00 	cmp.w	fp, #0
 8007ec4:	dc03      	bgt.n	8007ece <_dtoa_r+0xba6>
 8007ec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	f73f aecc 	bgt.w	8007c66 <_dtoa_r+0x93e>
 8007ece:	9f08      	ldr	r7, [sp, #32]
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4650      	mov	r0, sl
 8007ed4:	f7ff f998 	bl	8007208 <quorem>
 8007ed8:	9a08      	ldr	r2, [sp, #32]
 8007eda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ede:	f807 3b01 	strb.w	r3, [r7], #1
 8007ee2:	1aba      	subs	r2, r7, r2
 8007ee4:	4593      	cmp	fp, r2
 8007ee6:	ddb9      	ble.n	8007e5c <_dtoa_r+0xb34>
 8007ee8:	4651      	mov	r1, sl
 8007eea:	2300      	movs	r3, #0
 8007eec:	220a      	movs	r2, #10
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 f892 	bl	8008018 <__multadd>
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	e7eb      	b.n	8007ed0 <_dtoa_r+0xba8>
 8007ef8:	0800aba7 	.word	0x0800aba7
 8007efc:	0800ab00 	.word	0x0800ab00
 8007f00:	0800ab24 	.word	0x0800ab24

08007f04 <_localeconv_r>:
 8007f04:	4800      	ldr	r0, [pc, #0]	; (8007f08 <_localeconv_r+0x4>)
 8007f06:	4770      	bx	lr
 8007f08:	20000190 	.word	0x20000190

08007f0c <malloc>:
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <malloc+0xc>)
 8007f0e:	4601      	mov	r1, r0
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f000 bbfb 	b.w	800870c <_malloc_r>
 8007f16:	bf00      	nop
 8007f18:	2000003c 	.word	0x2000003c

08007f1c <memchr>:
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	b2c9      	uxtb	r1, r1
 8007f22:	4402      	add	r2, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	d101      	bne.n	8007f2e <memchr+0x12>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e003      	b.n	8007f36 <memchr+0x1a>
 8007f2e:	7804      	ldrb	r4, [r0, #0]
 8007f30:	3301      	adds	r3, #1
 8007f32:	428c      	cmp	r4, r1
 8007f34:	d1f6      	bne.n	8007f24 <memchr+0x8>
 8007f36:	bd10      	pop	{r4, pc}

08007f38 <memcpy>:
 8007f38:	440a      	add	r2, r1
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f40:	d100      	bne.n	8007f44 <memcpy+0xc>
 8007f42:	4770      	bx	lr
 8007f44:	b510      	push	{r4, lr}
 8007f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f50:	d1f9      	bne.n	8007f46 <memcpy+0xe>
 8007f52:	bd10      	pop	{r4, pc}

08007f54 <_Balloc>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f58:	4604      	mov	r4, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	b976      	cbnz	r6, 8007f7c <_Balloc+0x28>
 8007f5e:	2010      	movs	r0, #16
 8007f60:	f7ff ffd4 	bl	8007f0c <malloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6260      	str	r0, [r4, #36]	; 0x24
 8007f68:	b920      	cbnz	r0, 8007f74 <_Balloc+0x20>
 8007f6a:	2166      	movs	r1, #102	; 0x66
 8007f6c:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <_Balloc+0x78>)
 8007f6e:	4818      	ldr	r0, [pc, #96]	; (8007fd0 <_Balloc+0x7c>)
 8007f70:	f000 fd92 	bl	8008a98 <__assert_func>
 8007f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f78:	6006      	str	r6, [r0, #0]
 8007f7a:	60c6      	str	r6, [r0, #12]
 8007f7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f7e:	68f3      	ldr	r3, [r6, #12]
 8007f80:	b183      	cbz	r3, 8007fa4 <_Balloc+0x50>
 8007f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f8a:	b9b8      	cbnz	r0, 8007fbc <_Balloc+0x68>
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f92:	1d72      	adds	r2, r6, #5
 8007f94:	4620      	mov	r0, r4
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	f000 fb5e 	bl	8008658 <_calloc_r>
 8007f9c:	b160      	cbz	r0, 8007fb8 <_Balloc+0x64>
 8007f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fa2:	e00e      	b.n	8007fc2 <_Balloc+0x6e>
 8007fa4:	2221      	movs	r2, #33	; 0x21
 8007fa6:	2104      	movs	r1, #4
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fb55 	bl	8008658 <_calloc_r>
 8007fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb0:	60f0      	str	r0, [r6, #12]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <_Balloc+0x2e>
 8007fb8:	2000      	movs	r0, #0
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	6802      	ldr	r2, [r0, #0]
 8007fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc8:	e7f7      	b.n	8007fba <_Balloc+0x66>
 8007fca:	bf00      	nop
 8007fcc:	0800ab31 	.word	0x0800ab31
 8007fd0:	0800abb8 	.word	0x0800abb8

08007fd4 <_Bfree>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fd8:	4605      	mov	r5, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b976      	cbnz	r6, 8007ffc <_Bfree+0x28>
 8007fde:	2010      	movs	r0, #16
 8007fe0:	f7ff ff94 	bl	8007f0c <malloc>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6268      	str	r0, [r5, #36]	; 0x24
 8007fe8:	b920      	cbnz	r0, 8007ff4 <_Bfree+0x20>
 8007fea:	218a      	movs	r1, #138	; 0x8a
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <_Bfree+0x3c>)
 8007fee:	4809      	ldr	r0, [pc, #36]	; (8008014 <_Bfree+0x40>)
 8007ff0:	f000 fd52 	bl	8008a98 <__assert_func>
 8007ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff8:	6006      	str	r6, [r0, #0]
 8007ffa:	60c6      	str	r6, [r0, #12]
 8007ffc:	b13c      	cbz	r4, 800800e <_Bfree+0x3a>
 8007ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008008:	6021      	str	r1, [r4, #0]
 800800a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	0800ab31 	.word	0x0800ab31
 8008014:	0800abb8 	.word	0x0800abb8

08008018 <__multadd>:
 8008018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801c:	4698      	mov	r8, r3
 800801e:	460c      	mov	r4, r1
 8008020:	2300      	movs	r3, #0
 8008022:	690e      	ldr	r6, [r1, #16]
 8008024:	4607      	mov	r7, r0
 8008026:	f101 0014 	add.w	r0, r1, #20
 800802a:	6805      	ldr	r5, [r0, #0]
 800802c:	3301      	adds	r3, #1
 800802e:	b2a9      	uxth	r1, r5
 8008030:	fb02 8101 	mla	r1, r2, r1, r8
 8008034:	0c2d      	lsrs	r5, r5, #16
 8008036:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800803a:	fb02 c505 	mla	r5, r2, r5, ip
 800803e:	b289      	uxth	r1, r1
 8008040:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008044:	429e      	cmp	r6, r3
 8008046:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800804a:	f840 1b04 	str.w	r1, [r0], #4
 800804e:	dcec      	bgt.n	800802a <__multadd+0x12>
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	d022      	beq.n	800809c <__multadd+0x84>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	42b3      	cmp	r3, r6
 800805a:	dc19      	bgt.n	8008090 <__multadd+0x78>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4638      	mov	r0, r7
 8008060:	3101      	adds	r1, #1
 8008062:	f7ff ff77 	bl	8007f54 <_Balloc>
 8008066:	4605      	mov	r5, r0
 8008068:	b928      	cbnz	r0, 8008076 <__multadd+0x5e>
 800806a:	4602      	mov	r2, r0
 800806c:	21b5      	movs	r1, #181	; 0xb5
 800806e:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <__multadd+0x8c>)
 8008070:	480d      	ldr	r0, [pc, #52]	; (80080a8 <__multadd+0x90>)
 8008072:	f000 fd11 	bl	8008a98 <__assert_func>
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	f104 010c 	add.w	r1, r4, #12
 800807c:	3202      	adds	r2, #2
 800807e:	0092      	lsls	r2, r2, #2
 8008080:	300c      	adds	r0, #12
 8008082:	f7ff ff59 	bl	8007f38 <memcpy>
 8008086:	4621      	mov	r1, r4
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ffa3 	bl	8007fd4 <_Bfree>
 800808e:	462c      	mov	r4, r5
 8008090:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008094:	3601      	adds	r6, #1
 8008096:	f8c3 8014 	str.w	r8, [r3, #20]
 800809a:	6126      	str	r6, [r4, #16]
 800809c:	4620      	mov	r0, r4
 800809e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a2:	bf00      	nop
 80080a4:	0800aba7 	.word	0x0800aba7
 80080a8:	0800abb8 	.word	0x0800abb8

080080ac <__hi0bits>:
 80080ac:	0c02      	lsrs	r2, r0, #16
 80080ae:	0412      	lsls	r2, r2, #16
 80080b0:	4603      	mov	r3, r0
 80080b2:	b9ca      	cbnz	r2, 80080e8 <__hi0bits+0x3c>
 80080b4:	0403      	lsls	r3, r0, #16
 80080b6:	2010      	movs	r0, #16
 80080b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080bc:	bf04      	itt	eq
 80080be:	021b      	lsleq	r3, r3, #8
 80080c0:	3008      	addeq	r0, #8
 80080c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080c6:	bf04      	itt	eq
 80080c8:	011b      	lsleq	r3, r3, #4
 80080ca:	3004      	addeq	r0, #4
 80080cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080d0:	bf04      	itt	eq
 80080d2:	009b      	lsleq	r3, r3, #2
 80080d4:	3002      	addeq	r0, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	db05      	blt.n	80080e6 <__hi0bits+0x3a>
 80080da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80080de:	f100 0001 	add.w	r0, r0, #1
 80080e2:	bf08      	it	eq
 80080e4:	2020      	moveq	r0, #32
 80080e6:	4770      	bx	lr
 80080e8:	2000      	movs	r0, #0
 80080ea:	e7e5      	b.n	80080b8 <__hi0bits+0xc>

080080ec <__lo0bits>:
 80080ec:	6803      	ldr	r3, [r0, #0]
 80080ee:	4602      	mov	r2, r0
 80080f0:	f013 0007 	ands.w	r0, r3, #7
 80080f4:	d00b      	beq.n	800810e <__lo0bits+0x22>
 80080f6:	07d9      	lsls	r1, r3, #31
 80080f8:	d422      	bmi.n	8008140 <__lo0bits+0x54>
 80080fa:	0798      	lsls	r0, r3, #30
 80080fc:	bf49      	itett	mi
 80080fe:	085b      	lsrmi	r3, r3, #1
 8008100:	089b      	lsrpl	r3, r3, #2
 8008102:	2001      	movmi	r0, #1
 8008104:	6013      	strmi	r3, [r2, #0]
 8008106:	bf5c      	itt	pl
 8008108:	2002      	movpl	r0, #2
 800810a:	6013      	strpl	r3, [r2, #0]
 800810c:	4770      	bx	lr
 800810e:	b299      	uxth	r1, r3
 8008110:	b909      	cbnz	r1, 8008116 <__lo0bits+0x2a>
 8008112:	2010      	movs	r0, #16
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	f013 0fff 	tst.w	r3, #255	; 0xff
 800811a:	bf04      	itt	eq
 800811c:	0a1b      	lsreq	r3, r3, #8
 800811e:	3008      	addeq	r0, #8
 8008120:	0719      	lsls	r1, r3, #28
 8008122:	bf04      	itt	eq
 8008124:	091b      	lsreq	r3, r3, #4
 8008126:	3004      	addeq	r0, #4
 8008128:	0799      	lsls	r1, r3, #30
 800812a:	bf04      	itt	eq
 800812c:	089b      	lsreq	r3, r3, #2
 800812e:	3002      	addeq	r0, #2
 8008130:	07d9      	lsls	r1, r3, #31
 8008132:	d403      	bmi.n	800813c <__lo0bits+0x50>
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	f100 0001 	add.w	r0, r0, #1
 800813a:	d003      	beq.n	8008144 <__lo0bits+0x58>
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4770      	bx	lr
 8008140:	2000      	movs	r0, #0
 8008142:	4770      	bx	lr
 8008144:	2020      	movs	r0, #32
 8008146:	4770      	bx	lr

08008148 <__i2b>:
 8008148:	b510      	push	{r4, lr}
 800814a:	460c      	mov	r4, r1
 800814c:	2101      	movs	r1, #1
 800814e:	f7ff ff01 	bl	8007f54 <_Balloc>
 8008152:	4602      	mov	r2, r0
 8008154:	b928      	cbnz	r0, 8008162 <__i2b+0x1a>
 8008156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800815a:	4b04      	ldr	r3, [pc, #16]	; (800816c <__i2b+0x24>)
 800815c:	4804      	ldr	r0, [pc, #16]	; (8008170 <__i2b+0x28>)
 800815e:	f000 fc9b 	bl	8008a98 <__assert_func>
 8008162:	2301      	movs	r3, #1
 8008164:	6144      	str	r4, [r0, #20]
 8008166:	6103      	str	r3, [r0, #16]
 8008168:	bd10      	pop	{r4, pc}
 800816a:	bf00      	nop
 800816c:	0800aba7 	.word	0x0800aba7
 8008170:	0800abb8 	.word	0x0800abb8

08008174 <__multiply>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4614      	mov	r4, r2
 800817a:	690a      	ldr	r2, [r1, #16]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	460d      	mov	r5, r1
 8008180:	429a      	cmp	r2, r3
 8008182:	bfbe      	ittt	lt
 8008184:	460b      	movlt	r3, r1
 8008186:	4625      	movlt	r5, r4
 8008188:	461c      	movlt	r4, r3
 800818a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800818e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008192:	68ab      	ldr	r3, [r5, #8]
 8008194:	6869      	ldr	r1, [r5, #4]
 8008196:	eb0a 0709 	add.w	r7, sl, r9
 800819a:	42bb      	cmp	r3, r7
 800819c:	b085      	sub	sp, #20
 800819e:	bfb8      	it	lt
 80081a0:	3101      	addlt	r1, #1
 80081a2:	f7ff fed7 	bl	8007f54 <_Balloc>
 80081a6:	b930      	cbnz	r0, 80081b6 <__multiply+0x42>
 80081a8:	4602      	mov	r2, r0
 80081aa:	f240 115d 	movw	r1, #349	; 0x15d
 80081ae:	4b41      	ldr	r3, [pc, #260]	; (80082b4 <__multiply+0x140>)
 80081b0:	4841      	ldr	r0, [pc, #260]	; (80082b8 <__multiply+0x144>)
 80081b2:	f000 fc71 	bl	8008a98 <__assert_func>
 80081b6:	f100 0614 	add.w	r6, r0, #20
 80081ba:	4633      	mov	r3, r6
 80081bc:	2200      	movs	r2, #0
 80081be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081c2:	4543      	cmp	r3, r8
 80081c4:	d31e      	bcc.n	8008204 <__multiply+0x90>
 80081c6:	f105 0c14 	add.w	ip, r5, #20
 80081ca:	f104 0314 	add.w	r3, r4, #20
 80081ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081d6:	9202      	str	r2, [sp, #8]
 80081d8:	ebac 0205 	sub.w	r2, ip, r5
 80081dc:	3a15      	subs	r2, #21
 80081de:	f022 0203 	bic.w	r2, r2, #3
 80081e2:	3204      	adds	r2, #4
 80081e4:	f105 0115 	add.w	r1, r5, #21
 80081e8:	458c      	cmp	ip, r1
 80081ea:	bf38      	it	cc
 80081ec:	2204      	movcc	r2, #4
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	9a02      	ldr	r2, [sp, #8]
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d808      	bhi.n	800820a <__multiply+0x96>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	dc55      	bgt.n	80082a8 <__multiply+0x134>
 80081fc:	6107      	str	r7, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7db      	b.n	80081c2 <__multiply+0x4e>
 800820a:	f8b3 a000 	ldrh.w	sl, [r3]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d020      	beq.n	8008256 <__multiply+0xe2>
 8008214:	46b1      	mov	r9, r6
 8008216:	2200      	movs	r2, #0
 8008218:	f105 0e14 	add.w	lr, r5, #20
 800821c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008220:	f8d9 b000 	ldr.w	fp, [r9]
 8008224:	b2a1      	uxth	r1, r4
 8008226:	fa1f fb8b 	uxth.w	fp, fp
 800822a:	fb0a b101 	mla	r1, sl, r1, fp
 800822e:	4411      	add	r1, r2
 8008230:	f8d9 2000 	ldr.w	r2, [r9]
 8008234:	0c24      	lsrs	r4, r4, #16
 8008236:	0c12      	lsrs	r2, r2, #16
 8008238:	fb0a 2404 	mla	r4, sl, r4, r2
 800823c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008240:	b289      	uxth	r1, r1
 8008242:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008246:	45f4      	cmp	ip, lr
 8008248:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800824c:	f849 1b04 	str.w	r1, [r9], #4
 8008250:	d8e4      	bhi.n	800821c <__multiply+0xa8>
 8008252:	9901      	ldr	r1, [sp, #4]
 8008254:	5072      	str	r2, [r6, r1]
 8008256:	9a03      	ldr	r2, [sp, #12]
 8008258:	3304      	adds	r3, #4
 800825a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d01f      	beq.n	80082a4 <__multiply+0x130>
 8008264:	46b6      	mov	lr, r6
 8008266:	f04f 0a00 	mov.w	sl, #0
 800826a:	6834      	ldr	r4, [r6, #0]
 800826c:	f105 0114 	add.w	r1, r5, #20
 8008270:	880a      	ldrh	r2, [r1, #0]
 8008272:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008276:	b2a4      	uxth	r4, r4
 8008278:	fb09 b202 	mla	r2, r9, r2, fp
 800827c:	4492      	add	sl, r2
 800827e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008282:	f84e 4b04 	str.w	r4, [lr], #4
 8008286:	f851 4b04 	ldr.w	r4, [r1], #4
 800828a:	f8be 2000 	ldrh.w	r2, [lr]
 800828e:	0c24      	lsrs	r4, r4, #16
 8008290:	fb09 2404 	mla	r4, r9, r4, r2
 8008294:	458c      	cmp	ip, r1
 8008296:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800829a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800829e:	d8e7      	bhi.n	8008270 <__multiply+0xfc>
 80082a0:	9a01      	ldr	r2, [sp, #4]
 80082a2:	50b4      	str	r4, [r6, r2]
 80082a4:	3604      	adds	r6, #4
 80082a6:	e7a3      	b.n	80081f0 <__multiply+0x7c>
 80082a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1a5      	bne.n	80081fc <__multiply+0x88>
 80082b0:	3f01      	subs	r7, #1
 80082b2:	e7a1      	b.n	80081f8 <__multiply+0x84>
 80082b4:	0800aba7 	.word	0x0800aba7
 80082b8:	0800abb8 	.word	0x0800abb8

080082bc <__pow5mult>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	4615      	mov	r5, r2
 80082c2:	f012 0203 	ands.w	r2, r2, #3
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	d007      	beq.n	80082dc <__pow5mult+0x20>
 80082cc:	4c25      	ldr	r4, [pc, #148]	; (8008364 <__pow5mult+0xa8>)
 80082ce:	3a01      	subs	r2, #1
 80082d0:	2300      	movs	r3, #0
 80082d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082d6:	f7ff fe9f 	bl	8008018 <__multadd>
 80082da:	4607      	mov	r7, r0
 80082dc:	10ad      	asrs	r5, r5, #2
 80082de:	d03d      	beq.n	800835c <__pow5mult+0xa0>
 80082e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082e2:	b97c      	cbnz	r4, 8008304 <__pow5mult+0x48>
 80082e4:	2010      	movs	r0, #16
 80082e6:	f7ff fe11 	bl	8007f0c <malloc>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6270      	str	r0, [r6, #36]	; 0x24
 80082ee:	b928      	cbnz	r0, 80082fc <__pow5mult+0x40>
 80082f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082f4:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <__pow5mult+0xac>)
 80082f6:	481d      	ldr	r0, [pc, #116]	; (800836c <__pow5mult+0xb0>)
 80082f8:	f000 fbce 	bl	8008a98 <__assert_func>
 80082fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008300:	6004      	str	r4, [r0, #0]
 8008302:	60c4      	str	r4, [r0, #12]
 8008304:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008308:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800830c:	b94c      	cbnz	r4, 8008322 <__pow5mult+0x66>
 800830e:	f240 2171 	movw	r1, #625	; 0x271
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ff18 	bl	8008148 <__i2b>
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	f04f 0900 	mov.w	r9, #0
 8008326:	07eb      	lsls	r3, r5, #31
 8008328:	d50a      	bpl.n	8008340 <__pow5mult+0x84>
 800832a:	4639      	mov	r1, r7
 800832c:	4622      	mov	r2, r4
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff ff20 	bl	8008174 <__multiply>
 8008334:	4680      	mov	r8, r0
 8008336:	4639      	mov	r1, r7
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff fe4b 	bl	8007fd4 <_Bfree>
 800833e:	4647      	mov	r7, r8
 8008340:	106d      	asrs	r5, r5, #1
 8008342:	d00b      	beq.n	800835c <__pow5mult+0xa0>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	b938      	cbnz	r0, 8008358 <__pow5mult+0x9c>
 8008348:	4622      	mov	r2, r4
 800834a:	4621      	mov	r1, r4
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ff11 	bl	8008174 <__multiply>
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	f8c0 9000 	str.w	r9, [r0]
 8008358:	4604      	mov	r4, r0
 800835a:	e7e4      	b.n	8008326 <__pow5mult+0x6a>
 800835c:	4638      	mov	r0, r7
 800835e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008362:	bf00      	nop
 8008364:	0800ad08 	.word	0x0800ad08
 8008368:	0800ab31 	.word	0x0800ab31
 800836c:	0800abb8 	.word	0x0800abb8

08008370 <__lshift>:
 8008370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008374:	460c      	mov	r4, r1
 8008376:	4607      	mov	r7, r0
 8008378:	4691      	mov	r9, r2
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	6849      	ldr	r1, [r1, #4]
 800837e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008388:	f108 0601 	add.w	r6, r8, #1
 800838c:	42b3      	cmp	r3, r6
 800838e:	db0b      	blt.n	80083a8 <__lshift+0x38>
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff fddf 	bl	8007f54 <_Balloc>
 8008396:	4605      	mov	r5, r0
 8008398:	b948      	cbnz	r0, 80083ae <__lshift+0x3e>
 800839a:	4602      	mov	r2, r0
 800839c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <__lshift+0xd0>)
 80083a2:	4828      	ldr	r0, [pc, #160]	; (8008444 <__lshift+0xd4>)
 80083a4:	f000 fb78 	bl	8008a98 <__assert_func>
 80083a8:	3101      	adds	r1, #1
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	e7ee      	b.n	800838c <__lshift+0x1c>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f100 0114 	add.w	r1, r0, #20
 80083b4:	f100 0210 	add.w	r2, r0, #16
 80083b8:	4618      	mov	r0, r3
 80083ba:	4553      	cmp	r3, sl
 80083bc:	db33      	blt.n	8008426 <__lshift+0xb6>
 80083be:	6920      	ldr	r0, [r4, #16]
 80083c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c4:	f104 0314 	add.w	r3, r4, #20
 80083c8:	f019 091f 	ands.w	r9, r9, #31
 80083cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083d4:	d02b      	beq.n	800842e <__lshift+0xbe>
 80083d6:	468a      	mov	sl, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	f1c9 0e20 	rsb	lr, r9, #32
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	fa00 f009 	lsl.w	r0, r0, r9
 80083e4:	4302      	orrs	r2, r0
 80083e6:	f84a 2b04 	str.w	r2, [sl], #4
 80083ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ee:	459c      	cmp	ip, r3
 80083f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80083f4:	d8f3      	bhi.n	80083de <__lshift+0x6e>
 80083f6:	ebac 0304 	sub.w	r3, ip, r4
 80083fa:	3b15      	subs	r3, #21
 80083fc:	f023 0303 	bic.w	r3, r3, #3
 8008400:	3304      	adds	r3, #4
 8008402:	f104 0015 	add.w	r0, r4, #21
 8008406:	4584      	cmp	ip, r0
 8008408:	bf38      	it	cc
 800840a:	2304      	movcc	r3, #4
 800840c:	50ca      	str	r2, [r1, r3]
 800840e:	b10a      	cbz	r2, 8008414 <__lshift+0xa4>
 8008410:	f108 0602 	add.w	r6, r8, #2
 8008414:	3e01      	subs	r6, #1
 8008416:	4638      	mov	r0, r7
 8008418:	4621      	mov	r1, r4
 800841a:	612e      	str	r6, [r5, #16]
 800841c:	f7ff fdda 	bl	8007fd4 <_Bfree>
 8008420:	4628      	mov	r0, r5
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	f842 0f04 	str.w	r0, [r2, #4]!
 800842a:	3301      	adds	r3, #1
 800842c:	e7c5      	b.n	80083ba <__lshift+0x4a>
 800842e:	3904      	subs	r1, #4
 8008430:	f853 2b04 	ldr.w	r2, [r3], #4
 8008434:	459c      	cmp	ip, r3
 8008436:	f841 2f04 	str.w	r2, [r1, #4]!
 800843a:	d8f9      	bhi.n	8008430 <__lshift+0xc0>
 800843c:	e7ea      	b.n	8008414 <__lshift+0xa4>
 800843e:	bf00      	nop
 8008440:	0800aba7 	.word	0x0800aba7
 8008444:	0800abb8 	.word	0x0800abb8

08008448 <__mcmp>:
 8008448:	4603      	mov	r3, r0
 800844a:	690a      	ldr	r2, [r1, #16]
 800844c:	6900      	ldr	r0, [r0, #16]
 800844e:	b530      	push	{r4, r5, lr}
 8008450:	1a80      	subs	r0, r0, r2
 8008452:	d10d      	bne.n	8008470 <__mcmp+0x28>
 8008454:	3314      	adds	r3, #20
 8008456:	3114      	adds	r1, #20
 8008458:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800845c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008460:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008464:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008468:	4295      	cmp	r5, r2
 800846a:	d002      	beq.n	8008472 <__mcmp+0x2a>
 800846c:	d304      	bcc.n	8008478 <__mcmp+0x30>
 800846e:	2001      	movs	r0, #1
 8008470:	bd30      	pop	{r4, r5, pc}
 8008472:	42a3      	cmp	r3, r4
 8008474:	d3f4      	bcc.n	8008460 <__mcmp+0x18>
 8008476:	e7fb      	b.n	8008470 <__mcmp+0x28>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	e7f8      	b.n	8008470 <__mcmp+0x28>
	...

08008480 <__mdiff>:
 8008480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	4606      	mov	r6, r0
 8008488:	4611      	mov	r1, r2
 800848a:	4620      	mov	r0, r4
 800848c:	4692      	mov	sl, r2
 800848e:	f7ff ffdb 	bl	8008448 <__mcmp>
 8008492:	1e05      	subs	r5, r0, #0
 8008494:	d111      	bne.n	80084ba <__mdiff+0x3a>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff fd5b 	bl	8007f54 <_Balloc>
 800849e:	4602      	mov	r2, r0
 80084a0:	b928      	cbnz	r0, 80084ae <__mdiff+0x2e>
 80084a2:	f240 2132 	movw	r1, #562	; 0x232
 80084a6:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <__mdiff+0x118>)
 80084a8:	483c      	ldr	r0, [pc, #240]	; (800859c <__mdiff+0x11c>)
 80084aa:	f000 faf5 	bl	8008a98 <__assert_func>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b4:	4610      	mov	r0, r2
 80084b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	bfa4      	itt	ge
 80084bc:	4653      	movge	r3, sl
 80084be:	46a2      	movge	sl, r4
 80084c0:	4630      	mov	r0, r6
 80084c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80084c6:	bfa6      	itte	ge
 80084c8:	461c      	movge	r4, r3
 80084ca:	2500      	movge	r5, #0
 80084cc:	2501      	movlt	r5, #1
 80084ce:	f7ff fd41 	bl	8007f54 <_Balloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	b918      	cbnz	r0, 80084de <__mdiff+0x5e>
 80084d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084da:	4b2f      	ldr	r3, [pc, #188]	; (8008598 <__mdiff+0x118>)
 80084dc:	e7e4      	b.n	80084a8 <__mdiff+0x28>
 80084de:	f100 0814 	add.w	r8, r0, #20
 80084e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80084e6:	60c5      	str	r5, [r0, #12]
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	f10a 0514 	add.w	r5, sl, #20
 80084f0:	f10a 0010 	add.w	r0, sl, #16
 80084f4:	46c2      	mov	sl, r8
 80084f6:	6926      	ldr	r6, [r4, #16]
 80084f8:	f104 0914 	add.w	r9, r4, #20
 80084fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008504:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008508:	f859 3b04 	ldr.w	r3, [r9], #4
 800850c:	fa1f f18b 	uxth.w	r1, fp
 8008510:	4461      	add	r1, ip
 8008512:	fa1f fc83 	uxth.w	ip, r3
 8008516:	0c1b      	lsrs	r3, r3, #16
 8008518:	eba1 010c 	sub.w	r1, r1, ip
 800851c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008520:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008524:	b289      	uxth	r1, r1
 8008526:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800852a:	454e      	cmp	r6, r9
 800852c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008530:	f84a 3b04 	str.w	r3, [sl], #4
 8008534:	d8e6      	bhi.n	8008504 <__mdiff+0x84>
 8008536:	1b33      	subs	r3, r6, r4
 8008538:	3b15      	subs	r3, #21
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	3415      	adds	r4, #21
 8008540:	3304      	adds	r3, #4
 8008542:	42a6      	cmp	r6, r4
 8008544:	bf38      	it	cc
 8008546:	2304      	movcc	r3, #4
 8008548:	441d      	add	r5, r3
 800854a:	4443      	add	r3, r8
 800854c:	461e      	mov	r6, r3
 800854e:	462c      	mov	r4, r5
 8008550:	4574      	cmp	r4, lr
 8008552:	d30e      	bcc.n	8008572 <__mdiff+0xf2>
 8008554:	f10e 0103 	add.w	r1, lr, #3
 8008558:	1b49      	subs	r1, r1, r5
 800855a:	f021 0103 	bic.w	r1, r1, #3
 800855e:	3d03      	subs	r5, #3
 8008560:	45ae      	cmp	lr, r5
 8008562:	bf38      	it	cc
 8008564:	2100      	movcc	r1, #0
 8008566:	4419      	add	r1, r3
 8008568:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800856c:	b18b      	cbz	r3, 8008592 <__mdiff+0x112>
 800856e:	6117      	str	r7, [r2, #16]
 8008570:	e7a0      	b.n	80084b4 <__mdiff+0x34>
 8008572:	f854 8b04 	ldr.w	r8, [r4], #4
 8008576:	fa1f f188 	uxth.w	r1, r8
 800857a:	4461      	add	r1, ip
 800857c:	1408      	asrs	r0, r1, #16
 800857e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008582:	b289      	uxth	r1, r1
 8008584:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800858c:	f846 1b04 	str.w	r1, [r6], #4
 8008590:	e7de      	b.n	8008550 <__mdiff+0xd0>
 8008592:	3f01      	subs	r7, #1
 8008594:	e7e8      	b.n	8008568 <__mdiff+0xe8>
 8008596:	bf00      	nop
 8008598:	0800aba7 	.word	0x0800aba7
 800859c:	0800abb8 	.word	0x0800abb8

080085a0 <__d2b>:
 80085a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80085a4:	2101      	movs	r1, #1
 80085a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80085aa:	4690      	mov	r8, r2
 80085ac:	461d      	mov	r5, r3
 80085ae:	f7ff fcd1 	bl	8007f54 <_Balloc>
 80085b2:	4604      	mov	r4, r0
 80085b4:	b930      	cbnz	r0, 80085c4 <__d2b+0x24>
 80085b6:	4602      	mov	r2, r0
 80085b8:	f240 310a 	movw	r1, #778	; 0x30a
 80085bc:	4b24      	ldr	r3, [pc, #144]	; (8008650 <__d2b+0xb0>)
 80085be:	4825      	ldr	r0, [pc, #148]	; (8008654 <__d2b+0xb4>)
 80085c0:	f000 fa6a 	bl	8008a98 <__assert_func>
 80085c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80085c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80085cc:	bb2d      	cbnz	r5, 800861a <__d2b+0x7a>
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	f1b8 0300 	subs.w	r3, r8, #0
 80085d4:	d026      	beq.n	8008624 <__d2b+0x84>
 80085d6:	4668      	mov	r0, sp
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	f7ff fd87 	bl	80080ec <__lo0bits>
 80085de:	9900      	ldr	r1, [sp, #0]
 80085e0:	b1f0      	cbz	r0, 8008620 <__d2b+0x80>
 80085e2:	9a01      	ldr	r2, [sp, #4]
 80085e4:	f1c0 0320 	rsb	r3, r0, #32
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	430b      	orrs	r3, r1
 80085ee:	40c2      	lsrs	r2, r0
 80085f0:	6163      	str	r3, [r4, #20]
 80085f2:	9201      	str	r2, [sp, #4]
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bf14      	ite	ne
 80085fa:	2102      	movne	r1, #2
 80085fc:	2101      	moveq	r1, #1
 80085fe:	61a3      	str	r3, [r4, #24]
 8008600:	6121      	str	r1, [r4, #16]
 8008602:	b1c5      	cbz	r5, 8008636 <__d2b+0x96>
 8008604:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008608:	4405      	add	r5, r0
 800860a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800860e:	603d      	str	r5, [r7, #0]
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	4620      	mov	r0, r4
 8008614:	b002      	add	sp, #8
 8008616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800861e:	e7d6      	b.n	80085ce <__d2b+0x2e>
 8008620:	6161      	str	r1, [r4, #20]
 8008622:	e7e7      	b.n	80085f4 <__d2b+0x54>
 8008624:	a801      	add	r0, sp, #4
 8008626:	f7ff fd61 	bl	80080ec <__lo0bits>
 800862a:	2101      	movs	r1, #1
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	6121      	str	r1, [r4, #16]
 8008630:	6163      	str	r3, [r4, #20]
 8008632:	3020      	adds	r0, #32
 8008634:	e7e5      	b.n	8008602 <__d2b+0x62>
 8008636:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800863a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800863e:	6038      	str	r0, [r7, #0]
 8008640:	6918      	ldr	r0, [r3, #16]
 8008642:	f7ff fd33 	bl	80080ac <__hi0bits>
 8008646:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800864a:	6031      	str	r1, [r6, #0]
 800864c:	e7e1      	b.n	8008612 <__d2b+0x72>
 800864e:	bf00      	nop
 8008650:	0800aba7 	.word	0x0800aba7
 8008654:	0800abb8 	.word	0x0800abb8

08008658 <_calloc_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	fb02 f501 	mul.w	r5, r2, r1
 800865e:	4629      	mov	r1, r5
 8008660:	f000 f854 	bl	800870c <_malloc_r>
 8008664:	4604      	mov	r4, r0
 8008666:	b118      	cbz	r0, 8008670 <_calloc_r+0x18>
 8008668:	462a      	mov	r2, r5
 800866a:	2100      	movs	r1, #0
 800866c:	f7fe f92a 	bl	80068c4 <memset>
 8008670:	4620      	mov	r0, r4
 8008672:	bd38      	pop	{r3, r4, r5, pc}

08008674 <_free_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4605      	mov	r5, r0
 8008678:	2900      	cmp	r1, #0
 800867a:	d043      	beq.n	8008704 <_free_r+0x90>
 800867c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008680:	1f0c      	subs	r4, r1, #4
 8008682:	2b00      	cmp	r3, #0
 8008684:	bfb8      	it	lt
 8008686:	18e4      	addlt	r4, r4, r3
 8008688:	f000 fa62 	bl	8008b50 <__malloc_lock>
 800868c:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <_free_r+0x94>)
 800868e:	6813      	ldr	r3, [r2, #0]
 8008690:	4610      	mov	r0, r2
 8008692:	b933      	cbnz	r3, 80086a2 <_free_r+0x2e>
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6014      	str	r4, [r2, #0]
 8008698:	4628      	mov	r0, r5
 800869a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800869e:	f000 ba5d 	b.w	8008b5c <__malloc_unlock>
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	d90a      	bls.n	80086bc <_free_r+0x48>
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	1862      	adds	r2, r4, r1
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bf01      	itttt	eq
 80086ae:	681a      	ldreq	r2, [r3, #0]
 80086b0:	685b      	ldreq	r3, [r3, #4]
 80086b2:	1852      	addeq	r2, r2, r1
 80086b4:	6022      	streq	r2, [r4, #0]
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	6004      	str	r4, [r0, #0]
 80086ba:	e7ed      	b.n	8008698 <_free_r+0x24>
 80086bc:	461a      	mov	r2, r3
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	b10b      	cbz	r3, 80086c6 <_free_r+0x52>
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	d9fa      	bls.n	80086bc <_free_r+0x48>
 80086c6:	6811      	ldr	r1, [r2, #0]
 80086c8:	1850      	adds	r0, r2, r1
 80086ca:	42a0      	cmp	r0, r4
 80086cc:	d10b      	bne.n	80086e6 <_free_r+0x72>
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	4401      	add	r1, r0
 80086d2:	1850      	adds	r0, r2, r1
 80086d4:	4283      	cmp	r3, r0
 80086d6:	6011      	str	r1, [r2, #0]
 80086d8:	d1de      	bne.n	8008698 <_free_r+0x24>
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4401      	add	r1, r0
 80086e0:	6011      	str	r1, [r2, #0]
 80086e2:	6053      	str	r3, [r2, #4]
 80086e4:	e7d8      	b.n	8008698 <_free_r+0x24>
 80086e6:	d902      	bls.n	80086ee <_free_r+0x7a>
 80086e8:	230c      	movs	r3, #12
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	e7d4      	b.n	8008698 <_free_r+0x24>
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	1821      	adds	r1, r4, r0
 80086f2:	428b      	cmp	r3, r1
 80086f4:	bf01      	itttt	eq
 80086f6:	6819      	ldreq	r1, [r3, #0]
 80086f8:	685b      	ldreq	r3, [r3, #4]
 80086fa:	1809      	addeq	r1, r1, r0
 80086fc:	6021      	streq	r1, [r4, #0]
 80086fe:	6063      	str	r3, [r4, #4]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7c9      	b.n	8008698 <_free_r+0x24>
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	bf00      	nop
 8008708:	20000360 	.word	0x20000360

0800870c <_malloc_r>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	1ccd      	adds	r5, r1, #3
 8008710:	f025 0503 	bic.w	r5, r5, #3
 8008714:	3508      	adds	r5, #8
 8008716:	2d0c      	cmp	r5, #12
 8008718:	bf38      	it	cc
 800871a:	250c      	movcc	r5, #12
 800871c:	2d00      	cmp	r5, #0
 800871e:	4606      	mov	r6, r0
 8008720:	db01      	blt.n	8008726 <_malloc_r+0x1a>
 8008722:	42a9      	cmp	r1, r5
 8008724:	d903      	bls.n	800872e <_malloc_r+0x22>
 8008726:	230c      	movs	r3, #12
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	2000      	movs	r0, #0
 800872c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872e:	f000 fa0f 	bl	8008b50 <__malloc_lock>
 8008732:	4921      	ldr	r1, [pc, #132]	; (80087b8 <_malloc_r+0xac>)
 8008734:	680a      	ldr	r2, [r1, #0]
 8008736:	4614      	mov	r4, r2
 8008738:	b99c      	cbnz	r4, 8008762 <_malloc_r+0x56>
 800873a:	4f20      	ldr	r7, [pc, #128]	; (80087bc <_malloc_r+0xb0>)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	b923      	cbnz	r3, 800874a <_malloc_r+0x3e>
 8008740:	4621      	mov	r1, r4
 8008742:	4630      	mov	r0, r6
 8008744:	f000 f998 	bl	8008a78 <_sbrk_r>
 8008748:	6038      	str	r0, [r7, #0]
 800874a:	4629      	mov	r1, r5
 800874c:	4630      	mov	r0, r6
 800874e:	f000 f993 	bl	8008a78 <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d123      	bne.n	800879e <_malloc_r+0x92>
 8008756:	230c      	movs	r3, #12
 8008758:	4630      	mov	r0, r6
 800875a:	6033      	str	r3, [r6, #0]
 800875c:	f000 f9fe 	bl	8008b5c <__malloc_unlock>
 8008760:	e7e3      	b.n	800872a <_malloc_r+0x1e>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	1b5b      	subs	r3, r3, r5
 8008766:	d417      	bmi.n	8008798 <_malloc_r+0x8c>
 8008768:	2b0b      	cmp	r3, #11
 800876a:	d903      	bls.n	8008774 <_malloc_r+0x68>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	441c      	add	r4, r3
 8008770:	6025      	str	r5, [r4, #0]
 8008772:	e004      	b.n	800877e <_malloc_r+0x72>
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	42a2      	cmp	r2, r4
 8008778:	bf0c      	ite	eq
 800877a:	600b      	streq	r3, [r1, #0]
 800877c:	6053      	strne	r3, [r2, #4]
 800877e:	4630      	mov	r0, r6
 8008780:	f000 f9ec 	bl	8008b5c <__malloc_unlock>
 8008784:	f104 000b 	add.w	r0, r4, #11
 8008788:	1d23      	adds	r3, r4, #4
 800878a:	f020 0007 	bic.w	r0, r0, #7
 800878e:	1ac2      	subs	r2, r0, r3
 8008790:	d0cc      	beq.n	800872c <_malloc_r+0x20>
 8008792:	1a1b      	subs	r3, r3, r0
 8008794:	50a3      	str	r3, [r4, r2]
 8008796:	e7c9      	b.n	800872c <_malloc_r+0x20>
 8008798:	4622      	mov	r2, r4
 800879a:	6864      	ldr	r4, [r4, #4]
 800879c:	e7cc      	b.n	8008738 <_malloc_r+0x2c>
 800879e:	1cc4      	adds	r4, r0, #3
 80087a0:	f024 0403 	bic.w	r4, r4, #3
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d0e3      	beq.n	8008770 <_malloc_r+0x64>
 80087a8:	1a21      	subs	r1, r4, r0
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 f964 	bl	8008a78 <_sbrk_r>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d1dd      	bne.n	8008770 <_malloc_r+0x64>
 80087b4:	e7cf      	b.n	8008756 <_malloc_r+0x4a>
 80087b6:	bf00      	nop
 80087b8:	20000360 	.word	0x20000360
 80087bc:	20000364 	.word	0x20000364

080087c0 <__ssputs_r>:
 80087c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c4:	688e      	ldr	r6, [r1, #8]
 80087c6:	4682      	mov	sl, r0
 80087c8:	429e      	cmp	r6, r3
 80087ca:	460c      	mov	r4, r1
 80087cc:	4690      	mov	r8, r2
 80087ce:	461f      	mov	r7, r3
 80087d0:	d838      	bhi.n	8008844 <__ssputs_r+0x84>
 80087d2:	898a      	ldrh	r2, [r1, #12]
 80087d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087d8:	d032      	beq.n	8008840 <__ssputs_r+0x80>
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	6909      	ldr	r1, [r1, #16]
 80087de:	3301      	adds	r3, #1
 80087e0:	eba5 0901 	sub.w	r9, r5, r1
 80087e4:	6965      	ldr	r5, [r4, #20]
 80087e6:	444b      	add	r3, r9
 80087e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	429d      	cmp	r5, r3
 80087f4:	bf38      	it	cc
 80087f6:	461d      	movcc	r5, r3
 80087f8:	0553      	lsls	r3, r2, #21
 80087fa:	d531      	bpl.n	8008860 <__ssputs_r+0xa0>
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7ff ff85 	bl	800870c <_malloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	b950      	cbnz	r0, 800881c <__ssputs_r+0x5c>
 8008806:	230c      	movs	r3, #12
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	f8ca 3000 	str.w	r3, [sl]
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881c:	464a      	mov	r2, r9
 800881e:	6921      	ldr	r1, [r4, #16]
 8008820:	f7ff fb8a 	bl	8007f38 <memcpy>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800882a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	6126      	str	r6, [r4, #16]
 8008832:	444e      	add	r6, r9
 8008834:	6026      	str	r6, [r4, #0]
 8008836:	463e      	mov	r6, r7
 8008838:	6165      	str	r5, [r4, #20]
 800883a:	eba5 0509 	sub.w	r5, r5, r9
 800883e:	60a5      	str	r5, [r4, #8]
 8008840:	42be      	cmp	r6, r7
 8008842:	d900      	bls.n	8008846 <__ssputs_r+0x86>
 8008844:	463e      	mov	r6, r7
 8008846:	4632      	mov	r2, r6
 8008848:	4641      	mov	r1, r8
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	f000 f966 	bl	8008b1c <memmove>
 8008850:	68a3      	ldr	r3, [r4, #8]
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	4432      	add	r2, r6
 8008858:	2000      	movs	r0, #0
 800885a:	60a3      	str	r3, [r4, #8]
 800885c:	6022      	str	r2, [r4, #0]
 800885e:	e7db      	b.n	8008818 <__ssputs_r+0x58>
 8008860:	462a      	mov	r2, r5
 8008862:	f000 f981 	bl	8008b68 <_realloc_r>
 8008866:	4606      	mov	r6, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	d1e1      	bne.n	8008830 <__ssputs_r+0x70>
 800886c:	4650      	mov	r0, sl
 800886e:	6921      	ldr	r1, [r4, #16]
 8008870:	f7ff ff00 	bl	8008674 <_free_r>
 8008874:	e7c7      	b.n	8008806 <__ssputs_r+0x46>
	...

08008878 <_svfiprintf_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4698      	mov	r8, r3
 800887e:	898b      	ldrh	r3, [r1, #12]
 8008880:	4607      	mov	r7, r0
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	460d      	mov	r5, r1
 8008886:	4614      	mov	r4, r2
 8008888:	b09d      	sub	sp, #116	; 0x74
 800888a:	d50e      	bpl.n	80088aa <_svfiprintf_r+0x32>
 800888c:	690b      	ldr	r3, [r1, #16]
 800888e:	b963      	cbnz	r3, 80088aa <_svfiprintf_r+0x32>
 8008890:	2140      	movs	r1, #64	; 0x40
 8008892:	f7ff ff3b 	bl	800870c <_malloc_r>
 8008896:	6028      	str	r0, [r5, #0]
 8008898:	6128      	str	r0, [r5, #16]
 800889a:	b920      	cbnz	r0, 80088a6 <_svfiprintf_r+0x2e>
 800889c:	230c      	movs	r3, #12
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e0d1      	b.n	8008a4a <_svfiprintf_r+0x1d2>
 80088a6:	2340      	movs	r3, #64	; 0x40
 80088a8:	616b      	str	r3, [r5, #20]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9309      	str	r3, [sp, #36]	; 0x24
 80088ae:	2320      	movs	r3, #32
 80088b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b4:	2330      	movs	r3, #48	; 0x30
 80088b6:	f04f 0901 	mov.w	r9, #1
 80088ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80088be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a64 <_svfiprintf_r+0x1ec>
 80088c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c6:	4623      	mov	r3, r4
 80088c8:	469a      	mov	sl, r3
 80088ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ce:	b10a      	cbz	r2, 80088d4 <_svfiprintf_r+0x5c>
 80088d0:	2a25      	cmp	r2, #37	; 0x25
 80088d2:	d1f9      	bne.n	80088c8 <_svfiprintf_r+0x50>
 80088d4:	ebba 0b04 	subs.w	fp, sl, r4
 80088d8:	d00b      	beq.n	80088f2 <_svfiprintf_r+0x7a>
 80088da:	465b      	mov	r3, fp
 80088dc:	4622      	mov	r2, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	4638      	mov	r0, r7
 80088e2:	f7ff ff6d 	bl	80087c0 <__ssputs_r>
 80088e6:	3001      	adds	r0, #1
 80088e8:	f000 80aa 	beq.w	8008a40 <_svfiprintf_r+0x1c8>
 80088ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ee:	445a      	add	r2, fp
 80088f0:	9209      	str	r2, [sp, #36]	; 0x24
 80088f2:	f89a 3000 	ldrb.w	r3, [sl]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a2 	beq.w	8008a40 <_svfiprintf_r+0x1c8>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008906:	f10a 0a01 	add.w	sl, sl, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008912:	931a      	str	r3, [sp, #104]	; 0x68
 8008914:	4654      	mov	r4, sl
 8008916:	2205      	movs	r2, #5
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	4851      	ldr	r0, [pc, #324]	; (8008a64 <_svfiprintf_r+0x1ec>)
 800891e:	f7ff fafd 	bl	8007f1c <memchr>
 8008922:	9a04      	ldr	r2, [sp, #16]
 8008924:	b9d8      	cbnz	r0, 800895e <_svfiprintf_r+0xe6>
 8008926:	06d0      	lsls	r0, r2, #27
 8008928:	bf44      	itt	mi
 800892a:	2320      	movmi	r3, #32
 800892c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008930:	0711      	lsls	r1, r2, #28
 8008932:	bf44      	itt	mi
 8008934:	232b      	movmi	r3, #43	; 0x2b
 8008936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893a:	f89a 3000 	ldrb.w	r3, [sl]
 800893e:	2b2a      	cmp	r3, #42	; 0x2a
 8008940:	d015      	beq.n	800896e <_svfiprintf_r+0xf6>
 8008942:	4654      	mov	r4, sl
 8008944:	2000      	movs	r0, #0
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	9a07      	ldr	r2, [sp, #28]
 800894c:	4621      	mov	r1, r4
 800894e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008952:	3b30      	subs	r3, #48	; 0x30
 8008954:	2b09      	cmp	r3, #9
 8008956:	d94e      	bls.n	80089f6 <_svfiprintf_r+0x17e>
 8008958:	b1b0      	cbz	r0, 8008988 <_svfiprintf_r+0x110>
 800895a:	9207      	str	r2, [sp, #28]
 800895c:	e014      	b.n	8008988 <_svfiprintf_r+0x110>
 800895e:	eba0 0308 	sub.w	r3, r0, r8
 8008962:	fa09 f303 	lsl.w	r3, r9, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	46a2      	mov	sl, r4
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	e7d2      	b.n	8008914 <_svfiprintf_r+0x9c>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	1d19      	adds	r1, r3, #4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	9103      	str	r1, [sp, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	bfbb      	ittet	lt
 800897a:	425b      	neglt	r3, r3
 800897c:	f042 0202 	orrlt.w	r2, r2, #2
 8008980:	9307      	strge	r3, [sp, #28]
 8008982:	9307      	strlt	r3, [sp, #28]
 8008984:	bfb8      	it	lt
 8008986:	9204      	strlt	r2, [sp, #16]
 8008988:	7823      	ldrb	r3, [r4, #0]
 800898a:	2b2e      	cmp	r3, #46	; 0x2e
 800898c:	d10c      	bne.n	80089a8 <_svfiprintf_r+0x130>
 800898e:	7863      	ldrb	r3, [r4, #1]
 8008990:	2b2a      	cmp	r3, #42	; 0x2a
 8008992:	d135      	bne.n	8008a00 <_svfiprintf_r+0x188>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	3402      	adds	r4, #2
 8008998:	1d1a      	adds	r2, r3, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	9203      	str	r2, [sp, #12]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a74 <_svfiprintf_r+0x1fc>
 80089ac:	2203      	movs	r2, #3
 80089ae:	4650      	mov	r0, sl
 80089b0:	7821      	ldrb	r1, [r4, #0]
 80089b2:	f7ff fab3 	bl	8007f1c <memchr>
 80089b6:	b140      	cbz	r0, 80089ca <_svfiprintf_r+0x152>
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	eba0 000a 	sub.w	r0, r0, sl
 80089be:	fa03 f000 	lsl.w	r0, r3, r0
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	3401      	adds	r4, #1
 80089c6:	4303      	orrs	r3, r0
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ce:	2206      	movs	r2, #6
 80089d0:	4825      	ldr	r0, [pc, #148]	; (8008a68 <_svfiprintf_r+0x1f0>)
 80089d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d6:	f7ff faa1 	bl	8007f1c <memchr>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d038      	beq.n	8008a50 <_svfiprintf_r+0x1d8>
 80089de:	4b23      	ldr	r3, [pc, #140]	; (8008a6c <_svfiprintf_r+0x1f4>)
 80089e0:	bb1b      	cbnz	r3, 8008a2a <_svfiprintf_r+0x1b2>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	3308      	adds	r3, #8
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	4433      	add	r3, r6
 80089f2:	9309      	str	r3, [sp, #36]	; 0x24
 80089f4:	e767      	b.n	80088c6 <_svfiprintf_r+0x4e>
 80089f6:	460c      	mov	r4, r1
 80089f8:	2001      	movs	r0, #1
 80089fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80089fe:	e7a5      	b.n	800894c <_svfiprintf_r+0xd4>
 8008a00:	2300      	movs	r3, #0
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4619      	mov	r1, r3
 8008a08:	3401      	adds	r4, #1
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a12:	3a30      	subs	r2, #48	; 0x30
 8008a14:	2a09      	cmp	r2, #9
 8008a16:	d903      	bls.n	8008a20 <_svfiprintf_r+0x1a8>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0c5      	beq.n	80089a8 <_svfiprintf_r+0x130>
 8008a1c:	9105      	str	r1, [sp, #20]
 8008a1e:	e7c3      	b.n	80089a8 <_svfiprintf_r+0x130>
 8008a20:	4604      	mov	r4, r0
 8008a22:	2301      	movs	r3, #1
 8008a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a28:	e7f0      	b.n	8008a0c <_svfiprintf_r+0x194>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <_svfiprintf_r+0x1f8>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	f7fd ffeb 	bl	8006a10 <_printf_float>
 8008a3a:	1c42      	adds	r2, r0, #1
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	d1d6      	bne.n	80089ee <_svfiprintf_r+0x176>
 8008a40:	89ab      	ldrh	r3, [r5, #12]
 8008a42:	065b      	lsls	r3, r3, #25
 8008a44:	f53f af2c 	bmi.w	80088a0 <_svfiprintf_r+0x28>
 8008a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a4a:	b01d      	add	sp, #116	; 0x74
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4638      	mov	r0, r7
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <_svfiprintf_r+0x1f8>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	f7fe fa74 	bl	8006f48 <_printf_i>
 8008a60:	e7eb      	b.n	8008a3a <_svfiprintf_r+0x1c2>
 8008a62:	bf00      	nop
 8008a64:	0800ad14 	.word	0x0800ad14
 8008a68:	0800ad1e 	.word	0x0800ad1e
 8008a6c:	08006a11 	.word	0x08006a11
 8008a70:	080087c1 	.word	0x080087c1
 8008a74:	0800ad1a 	.word	0x0800ad1a

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	4d05      	ldr	r5, [pc, #20]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f8 fe6a 	bl	800175c <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20000574 	.word	0x20000574

08008a98 <__assert_func>:
 8008a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <__assert_func+0x2c>)
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68d8      	ldr	r0, [r3, #12]
 8008aa6:	b14c      	cbz	r4, 8008abc <__assert_func+0x24>
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <__assert_func+0x30>)
 8008aaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aae:	9100      	str	r1, [sp, #0]
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	4906      	ldr	r1, [pc, #24]	; (8008acc <__assert_func+0x34>)
 8008ab4:	f000 f80e 	bl	8008ad4 <fiprintf>
 8008ab8:	f000 faa2 	bl	8009000 <abort>
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <__assert_func+0x38>)
 8008abe:	461c      	mov	r4, r3
 8008ac0:	e7f3      	b.n	8008aaa <__assert_func+0x12>
 8008ac2:	bf00      	nop
 8008ac4:	2000003c 	.word	0x2000003c
 8008ac8:	0800ad25 	.word	0x0800ad25
 8008acc:	0800ad32 	.word	0x0800ad32
 8008ad0:	0800ad60 	.word	0x0800ad60

08008ad4 <fiprintf>:
 8008ad4:	b40e      	push	{r1, r2, r3}
 8008ad6:	b503      	push	{r0, r1, lr}
 8008ad8:	4601      	mov	r1, r0
 8008ada:	ab03      	add	r3, sp, #12
 8008adc:	4805      	ldr	r0, [pc, #20]	; (8008af4 <fiprintf+0x20>)
 8008ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae2:	6800      	ldr	r0, [r0, #0]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f000 f88d 	bl	8008c04 <_vfiprintf_r>
 8008aea:	b002      	add	sp, #8
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	b003      	add	sp, #12
 8008af2:	4770      	bx	lr
 8008af4:	2000003c 	.word	0x2000003c

08008af8 <__ascii_mbtowc>:
 8008af8:	b082      	sub	sp, #8
 8008afa:	b901      	cbnz	r1, 8008afe <__ascii_mbtowc+0x6>
 8008afc:	a901      	add	r1, sp, #4
 8008afe:	b142      	cbz	r2, 8008b12 <__ascii_mbtowc+0x1a>
 8008b00:	b14b      	cbz	r3, 8008b16 <__ascii_mbtowc+0x1e>
 8008b02:	7813      	ldrb	r3, [r2, #0]
 8008b04:	600b      	str	r3, [r1, #0]
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	1e10      	subs	r0, r2, #0
 8008b0a:	bf18      	it	ne
 8008b0c:	2001      	movne	r0, #1
 8008b0e:	b002      	add	sp, #8
 8008b10:	4770      	bx	lr
 8008b12:	4610      	mov	r0, r2
 8008b14:	e7fb      	b.n	8008b0e <__ascii_mbtowc+0x16>
 8008b16:	f06f 0001 	mvn.w	r0, #1
 8008b1a:	e7f8      	b.n	8008b0e <__ascii_mbtowc+0x16>

08008b1c <memmove>:
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	eb01 0402 	add.w	r4, r1, r2
 8008b24:	d902      	bls.n	8008b2c <memmove+0x10>
 8008b26:	4284      	cmp	r4, r0
 8008b28:	4623      	mov	r3, r4
 8008b2a:	d807      	bhi.n	8008b3c <memmove+0x20>
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d008      	beq.n	8008b44 <memmove+0x28>
 8008b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3a:	e7f8      	b.n	8008b2e <memmove+0x12>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4402      	add	r2, r0
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d100      	bne.n	8008b46 <memmove+0x2a>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4e:	e7f7      	b.n	8008b40 <memmove+0x24>

08008b50 <__malloc_lock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__malloc_lock+0x8>)
 8008b52:	f000 bc15 	b.w	8009380 <__retarget_lock_acquire_recursive>
 8008b56:	bf00      	nop
 8008b58:	2000057c 	.word	0x2000057c

08008b5c <__malloc_unlock>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <__malloc_unlock+0x8>)
 8008b5e:	f000 bc10 	b.w	8009382 <__retarget_lock_release_recursive>
 8008b62:	bf00      	nop
 8008b64:	2000057c 	.word	0x2000057c

08008b68 <_realloc_r>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	460e      	mov	r6, r1
 8008b70:	b921      	cbnz	r1, 8008b7c <_realloc_r+0x14>
 8008b72:	4611      	mov	r1, r2
 8008b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b78:	f7ff bdc8 	b.w	800870c <_malloc_r>
 8008b7c:	b922      	cbnz	r2, 8008b88 <_realloc_r+0x20>
 8008b7e:	f7ff fd79 	bl	8008674 <_free_r>
 8008b82:	4625      	mov	r5, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b88:	f000 fc60 	bl	800944c <_malloc_usable_size_r>
 8008b8c:	42a0      	cmp	r0, r4
 8008b8e:	d20f      	bcs.n	8008bb0 <_realloc_r+0x48>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7ff fdba 	bl	800870c <_malloc_r>
 8008b98:	4605      	mov	r5, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0f2      	beq.n	8008b84 <_realloc_r+0x1c>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	f7ff f9c9 	bl	8007f38 <memcpy>
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff fd63 	bl	8008674 <_free_r>
 8008bae:	e7e9      	b.n	8008b84 <_realloc_r+0x1c>
 8008bb0:	4635      	mov	r5, r6
 8008bb2:	e7e7      	b.n	8008b84 <_realloc_r+0x1c>

08008bb4 <__sfputc_r>:
 8008bb4:	6893      	ldr	r3, [r2, #8]
 8008bb6:	b410      	push	{r4}
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	6093      	str	r3, [r2, #8]
 8008bbe:	da07      	bge.n	8008bd0 <__sfputc_r+0x1c>
 8008bc0:	6994      	ldr	r4, [r2, #24]
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	db01      	blt.n	8008bca <__sfputc_r+0x16>
 8008bc6:	290a      	cmp	r1, #10
 8008bc8:	d102      	bne.n	8008bd0 <__sfputc_r+0x1c>
 8008bca:	bc10      	pop	{r4}
 8008bcc:	f000 b94a 	b.w	8008e64 <__swbuf_r>
 8008bd0:	6813      	ldr	r3, [r2, #0]
 8008bd2:	1c58      	adds	r0, r3, #1
 8008bd4:	6010      	str	r0, [r2, #0]
 8008bd6:	7019      	strb	r1, [r3, #0]
 8008bd8:	4608      	mov	r0, r1
 8008bda:	bc10      	pop	{r4}
 8008bdc:	4770      	bx	lr

08008bde <__sfputs_r>:
 8008bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be0:	4606      	mov	r6, r0
 8008be2:	460f      	mov	r7, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	18d5      	adds	r5, r2, r3
 8008be8:	42ac      	cmp	r4, r5
 8008bea:	d101      	bne.n	8008bf0 <__sfputs_r+0x12>
 8008bec:	2000      	movs	r0, #0
 8008bee:	e007      	b.n	8008c00 <__sfputs_r+0x22>
 8008bf0:	463a      	mov	r2, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf8:	f7ff ffdc 	bl	8008bb4 <__sfputc_r>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d1f3      	bne.n	8008be8 <__sfputs_r+0xa>
 8008c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c04 <_vfiprintf_r>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4614      	mov	r4, r2
 8008c0c:	4698      	mov	r8, r3
 8008c0e:	4606      	mov	r6, r0
 8008c10:	b09d      	sub	sp, #116	; 0x74
 8008c12:	b118      	cbz	r0, 8008c1c <_vfiprintf_r+0x18>
 8008c14:	6983      	ldr	r3, [r0, #24]
 8008c16:	b90b      	cbnz	r3, 8008c1c <_vfiprintf_r+0x18>
 8008c18:	f000 fb14 	bl	8009244 <__sinit>
 8008c1c:	4b89      	ldr	r3, [pc, #548]	; (8008e44 <_vfiprintf_r+0x240>)
 8008c1e:	429d      	cmp	r5, r3
 8008c20:	d11b      	bne.n	8008c5a <_vfiprintf_r+0x56>
 8008c22:	6875      	ldr	r5, [r6, #4]
 8008c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c26:	07d9      	lsls	r1, r3, #31
 8008c28:	d405      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	059a      	lsls	r2, r3, #22
 8008c2e:	d402      	bmi.n	8008c36 <_vfiprintf_r+0x32>
 8008c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c32:	f000 fba5 	bl	8009380 <__retarget_lock_acquire_recursive>
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	071b      	lsls	r3, r3, #28
 8008c3a:	d501      	bpl.n	8008c40 <_vfiprintf_r+0x3c>
 8008c3c:	692b      	ldr	r3, [r5, #16]
 8008c3e:	b9eb      	cbnz	r3, 8008c7c <_vfiprintf_r+0x78>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f96e 	bl	8008f24 <__swsetup_r>
 8008c48:	b1c0      	cbz	r0, 8008c7c <_vfiprintf_r+0x78>
 8008c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c4c:	07dc      	lsls	r4, r3, #31
 8008c4e:	d50e      	bpl.n	8008c6e <_vfiprintf_r+0x6a>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b01d      	add	sp, #116	; 0x74
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	4b7b      	ldr	r3, [pc, #492]	; (8008e48 <_vfiprintf_r+0x244>)
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	d101      	bne.n	8008c64 <_vfiprintf_r+0x60>
 8008c60:	68b5      	ldr	r5, [r6, #8]
 8008c62:	e7df      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c64:	4b79      	ldr	r3, [pc, #484]	; (8008e4c <_vfiprintf_r+0x248>)
 8008c66:	429d      	cmp	r5, r3
 8008c68:	bf08      	it	eq
 8008c6a:	68f5      	ldreq	r5, [r6, #12]
 8008c6c:	e7da      	b.n	8008c24 <_vfiprintf_r+0x20>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	0598      	lsls	r0, r3, #22
 8008c72:	d4ed      	bmi.n	8008c50 <_vfiprintf_r+0x4c>
 8008c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c76:	f000 fb84 	bl	8009382 <__retarget_lock_release_recursive>
 8008c7a:	e7e9      	b.n	8008c50 <_vfiprintf_r+0x4c>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c80:	2320      	movs	r3, #32
 8008c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c86:	2330      	movs	r3, #48	; 0x30
 8008c88:	f04f 0901 	mov.w	r9, #1
 8008c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e50 <_vfiprintf_r+0x24c>
 8008c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c98:	4623      	mov	r3, r4
 8008c9a:	469a      	mov	sl, r3
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_vfiprintf_r+0xa2>
 8008ca2:	2a25      	cmp	r2, #37	; 0x25
 8008ca4:	d1f9      	bne.n	8008c9a <_vfiprintf_r+0x96>
 8008ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8008caa:	d00b      	beq.n	8008cc4 <_vfiprintf_r+0xc0>
 8008cac:	465b      	mov	r3, fp
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ff93 	bl	8008bde <__sfputs_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f000 80aa 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cc0:	445a      	add	r2, fp
 8008cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80a2 	beq.w	8008e12 <_vfiprintf_r+0x20e>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce6:	4654      	mov	r4, sl
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4858      	ldr	r0, [pc, #352]	; (8008e50 <_vfiprintf_r+0x24c>)
 8008cf0:	f7ff f914 	bl	8007f1c <memchr>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	b9d8      	cbnz	r0, 8008d30 <_vfiprintf_r+0x12c>
 8008cf8:	06d1      	lsls	r1, r2, #27
 8008cfa:	bf44      	itt	mi
 8008cfc:	2320      	movmi	r3, #32
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d02:	0713      	lsls	r3, r2, #28
 8008d04:	bf44      	itt	mi
 8008d06:	232b      	movmi	r3, #43	; 0x2b
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b2a      	cmp	r3, #42	; 0x2a
 8008d12:	d015      	beq.n	8008d40 <_vfiprintf_r+0x13c>
 8008d14:	4654      	mov	r4, sl
 8008d16:	2000      	movs	r0, #0
 8008d18:	f04f 0c0a 	mov.w	ip, #10
 8008d1c:	9a07      	ldr	r2, [sp, #28]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d24:	3b30      	subs	r3, #48	; 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d94e      	bls.n	8008dc8 <_vfiprintf_r+0x1c4>
 8008d2a:	b1b0      	cbz	r0, 8008d5a <_vfiprintf_r+0x156>
 8008d2c:	9207      	str	r2, [sp, #28]
 8008d2e:	e014      	b.n	8008d5a <_vfiprintf_r+0x156>
 8008d30:	eba0 0308 	sub.w	r3, r0, r8
 8008d34:	fa09 f303 	lsl.w	r3, r9, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	46a2      	mov	sl, r4
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	e7d2      	b.n	8008ce6 <_vfiprintf_r+0xe2>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbb      	ittet	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d52:	9307      	strge	r3, [sp, #28]
 8008d54:	9307      	strlt	r3, [sp, #28]
 8008d56:	bfb8      	it	lt
 8008d58:	9204      	strlt	r2, [sp, #16]
 8008d5a:	7823      	ldrb	r3, [r4, #0]
 8008d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5e:	d10c      	bne.n	8008d7a <_vfiprintf_r+0x176>
 8008d60:	7863      	ldrb	r3, [r4, #1]
 8008d62:	2b2a      	cmp	r3, #42	; 0x2a
 8008d64:	d135      	bne.n	8008dd2 <_vfiprintf_r+0x1ce>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	3402      	adds	r4, #2
 8008d6a:	1d1a      	adds	r2, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	9203      	str	r2, [sp, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfb8      	it	lt
 8008d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e60 <_vfiprintf_r+0x25c>
 8008d7e:	2203      	movs	r2, #3
 8008d80:	4650      	mov	r0, sl
 8008d82:	7821      	ldrb	r1, [r4, #0]
 8008d84:	f7ff f8ca 	bl	8007f1c <memchr>
 8008d88:	b140      	cbz	r0, 8008d9c <_vfiprintf_r+0x198>
 8008d8a:	2340      	movs	r3, #64	; 0x40
 8008d8c:	eba0 000a 	sub.w	r0, r0, sl
 8008d90:	fa03 f000 	lsl.w	r0, r3, r0
 8008d94:	9b04      	ldr	r3, [sp, #16]
 8008d96:	3401      	adds	r4, #1
 8008d98:	4303      	orrs	r3, r0
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	2206      	movs	r2, #6
 8008da2:	482c      	ldr	r0, [pc, #176]	; (8008e54 <_vfiprintf_r+0x250>)
 8008da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da8:	f7ff f8b8 	bl	8007f1c <memchr>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d03f      	beq.n	8008e30 <_vfiprintf_r+0x22c>
 8008db0:	4b29      	ldr	r3, [pc, #164]	; (8008e58 <_vfiprintf_r+0x254>)
 8008db2:	bb1b      	cbnz	r3, 8008dfc <_vfiprintf_r+0x1f8>
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	3307      	adds	r3, #7
 8008db8:	f023 0307 	bic.w	r3, r3, #7
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	9303      	str	r3, [sp, #12]
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	443b      	add	r3, r7
 8008dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc6:	e767      	b.n	8008c98 <_vfiprintf_r+0x94>
 8008dc8:	460c      	mov	r4, r1
 8008dca:	2001      	movs	r0, #1
 8008dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd0:	e7a5      	b.n	8008d1e <_vfiprintf_r+0x11a>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4619      	mov	r1, r3
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de4:	3a30      	subs	r2, #48	; 0x30
 8008de6:	2a09      	cmp	r2, #9
 8008de8:	d903      	bls.n	8008df2 <_vfiprintf_r+0x1ee>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0c5      	beq.n	8008d7a <_vfiprintf_r+0x176>
 8008dee:	9105      	str	r1, [sp, #20]
 8008df0:	e7c3      	b.n	8008d7a <_vfiprintf_r+0x176>
 8008df2:	4604      	mov	r4, r0
 8008df4:	2301      	movs	r3, #1
 8008df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dfa:	e7f0      	b.n	8008dde <_vfiprintf_r+0x1da>
 8008dfc:	ab03      	add	r3, sp, #12
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	462a      	mov	r2, r5
 8008e02:	4630      	mov	r0, r6
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e06:	a904      	add	r1, sp, #16
 8008e08:	f7fd fe02 	bl	8006a10 <_printf_float>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	1c78      	adds	r0, r7, #1
 8008e10:	d1d6      	bne.n	8008dc0 <_vfiprintf_r+0x1bc>
 8008e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d405      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	059a      	lsls	r2, r3, #22
 8008e1c:	d402      	bmi.n	8008e24 <_vfiprintf_r+0x220>
 8008e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e20:	f000 faaf 	bl	8009382 <__retarget_lock_release_recursive>
 8008e24:	89ab      	ldrh	r3, [r5, #12]
 8008e26:	065b      	lsls	r3, r3, #25
 8008e28:	f53f af12 	bmi.w	8008c50 <_vfiprintf_r+0x4c>
 8008e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2e:	e711      	b.n	8008c54 <_vfiprintf_r+0x50>
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	462a      	mov	r2, r5
 8008e36:	4630      	mov	r0, r6
 8008e38:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <_vfiprintf_r+0x258>)
 8008e3a:	a904      	add	r1, sp, #16
 8008e3c:	f7fe f884 	bl	8006f48 <_printf_i>
 8008e40:	e7e4      	b.n	8008e0c <_vfiprintf_r+0x208>
 8008e42:	bf00      	nop
 8008e44:	0800ae8c 	.word	0x0800ae8c
 8008e48:	0800aeac 	.word	0x0800aeac
 8008e4c:	0800ae6c 	.word	0x0800ae6c
 8008e50:	0800ad14 	.word	0x0800ad14
 8008e54:	0800ad1e 	.word	0x0800ad1e
 8008e58:	08006a11 	.word	0x08006a11
 8008e5c:	08008bdf 	.word	0x08008bdf
 8008e60:	0800ad1a 	.word	0x0800ad1a

08008e64 <__swbuf_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	460e      	mov	r6, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b118      	cbz	r0, 8008e76 <__swbuf_r+0x12>
 8008e6e:	6983      	ldr	r3, [r0, #24]
 8008e70:	b90b      	cbnz	r3, 8008e76 <__swbuf_r+0x12>
 8008e72:	f000 f9e7 	bl	8009244 <__sinit>
 8008e76:	4b21      	ldr	r3, [pc, #132]	; (8008efc <__swbuf_r+0x98>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	d12b      	bne.n	8008ed4 <__swbuf_r+0x70>
 8008e7c:	686c      	ldr	r4, [r5, #4]
 8008e7e:	69a3      	ldr	r3, [r4, #24]
 8008e80:	60a3      	str	r3, [r4, #8]
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	071a      	lsls	r2, r3, #28
 8008e86:	d52f      	bpl.n	8008ee8 <__swbuf_r+0x84>
 8008e88:	6923      	ldr	r3, [r4, #16]
 8008e8a:	b36b      	cbz	r3, 8008ee8 <__swbuf_r+0x84>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	b2f6      	uxtb	r6, r6
 8008e92:	1ac0      	subs	r0, r0, r3
 8008e94:	6963      	ldr	r3, [r4, #20]
 8008e96:	4637      	mov	r7, r6
 8008e98:	4283      	cmp	r3, r0
 8008e9a:	dc04      	bgt.n	8008ea6 <__swbuf_r+0x42>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f93c 	bl	800911c <_fflush_r>
 8008ea4:	bb30      	cbnz	r0, 8008ef4 <__swbuf_r+0x90>
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	6022      	str	r2, [r4, #0]
 8008eb4:	701e      	strb	r6, [r3, #0]
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	4283      	cmp	r3, r0
 8008eba:	d004      	beq.n	8008ec6 <__swbuf_r+0x62>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	07db      	lsls	r3, r3, #31
 8008ec0:	d506      	bpl.n	8008ed0 <__swbuf_r+0x6c>
 8008ec2:	2e0a      	cmp	r6, #10
 8008ec4:	d104      	bne.n	8008ed0 <__swbuf_r+0x6c>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f927 	bl	800911c <_fflush_r>
 8008ece:	b988      	cbnz	r0, 8008ef4 <__swbuf_r+0x90>
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed4:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <__swbuf_r+0x9c>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <__swbuf_r+0x7a>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7cf      	b.n	8008e7e <__swbuf_r+0x1a>
 8008ede:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <__swbuf_r+0xa0>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7ca      	b.n	8008e7e <__swbuf_r+0x1a>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 f81a 	bl	8008f24 <__swsetup_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d0cb      	beq.n	8008e8c <__swbuf_r+0x28>
 8008ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ef8:	e7ea      	b.n	8008ed0 <__swbuf_r+0x6c>
 8008efa:	bf00      	nop
 8008efc:	0800ae8c 	.word	0x0800ae8c
 8008f00:	0800aeac 	.word	0x0800aeac
 8008f04:	0800ae6c 	.word	0x0800ae6c

08008f08 <__ascii_wctomb>:
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	b141      	cbz	r1, 8008f20 <__ascii_wctomb+0x18>
 8008f0e:	2aff      	cmp	r2, #255	; 0xff
 8008f10:	d904      	bls.n	8008f1c <__ascii_wctomb+0x14>
 8008f12:	228a      	movs	r2, #138	; 0x8a
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	4770      	bx	lr
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	700a      	strb	r2, [r1, #0]
 8008f20:	4770      	bx	lr
	...

08008f24 <__swsetup_r>:
 8008f24:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <__swsetup_r+0xcc>)
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	681d      	ldr	r5, [r3, #0]
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	b125      	cbz	r5, 8008f3a <__swsetup_r+0x16>
 8008f30:	69ab      	ldr	r3, [r5, #24]
 8008f32:	b913      	cbnz	r3, 8008f3a <__swsetup_r+0x16>
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 f985 	bl	8009244 <__sinit>
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <__swsetup_r+0xd0>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d10f      	bne.n	8008f60 <__swsetup_r+0x3c>
 8008f40:	686c      	ldr	r4, [r5, #4]
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f48:	0719      	lsls	r1, r3, #28
 8008f4a:	d42c      	bmi.n	8008fa6 <__swsetup_r+0x82>
 8008f4c:	06dd      	lsls	r5, r3, #27
 8008f4e:	d411      	bmi.n	8008f74 <__swsetup_r+0x50>
 8008f50:	2309      	movs	r3, #9
 8008f52:	6033      	str	r3, [r6, #0]
 8008f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	e03e      	b.n	8008fde <__swsetup_r+0xba>
 8008f60:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <__swsetup_r+0xd4>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <__swsetup_r+0x46>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7eb      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <__swsetup_r+0xd8>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7e6      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f74:	0758      	lsls	r0, r3, #29
 8008f76:	d512      	bpl.n	8008f9e <__swsetup_r+0x7a>
 8008f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7a:	b141      	cbz	r1, 8008f8e <__swsetup_r+0x6a>
 8008f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d002      	beq.n	8008f8a <__swsetup_r+0x66>
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff fb75 	bl	8008674 <_free_r>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <__swsetup_r+0x9a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb4:	d003      	beq.n	8008fbe <__swsetup_r+0x9a>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 fa07 	bl	80093cc <__smakebuf_r>
 8008fbe:	89a0      	ldrh	r0, [r4, #12]
 8008fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fc4:	f010 0301 	ands.w	r3, r0, #1
 8008fc8:	d00a      	beq.n	8008fe0 <__swsetup_r+0xbc>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60a3      	str	r3, [r4, #8]
 8008fce:	6963      	ldr	r3, [r4, #20]
 8008fd0:	425b      	negs	r3, r3
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	b943      	cbnz	r3, 8008fea <__swsetup_r+0xc6>
 8008fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fdc:	d1ba      	bne.n	8008f54 <__swsetup_r+0x30>
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	0781      	lsls	r1, r0, #30
 8008fe2:	bf58      	it	pl
 8008fe4:	6963      	ldrpl	r3, [r4, #20]
 8008fe6:	60a3      	str	r3, [r4, #8]
 8008fe8:	e7f4      	b.n	8008fd4 <__swsetup_r+0xb0>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e7f7      	b.n	8008fde <__swsetup_r+0xba>
 8008fee:	bf00      	nop
 8008ff0:	2000003c 	.word	0x2000003c
 8008ff4:	0800ae8c 	.word	0x0800ae8c
 8008ff8:	0800aeac 	.word	0x0800aeac
 8008ffc:	0800ae6c 	.word	0x0800ae6c

08009000 <abort>:
 8009000:	2006      	movs	r0, #6
 8009002:	b508      	push	{r3, lr}
 8009004:	f000 fa52 	bl	80094ac <raise>
 8009008:	2001      	movs	r0, #1
 800900a:	f7f8 fb34 	bl	8001676 <_exit>
	...

08009010 <__sflush_r>:
 8009010:	898a      	ldrh	r2, [r1, #12]
 8009012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009016:	4605      	mov	r5, r0
 8009018:	0710      	lsls	r0, r2, #28
 800901a:	460c      	mov	r4, r1
 800901c:	d458      	bmi.n	80090d0 <__sflush_r+0xc0>
 800901e:	684b      	ldr	r3, [r1, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc05      	bgt.n	8009030 <__sflush_r+0x20>
 8009024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	dc02      	bgt.n	8009030 <__sflush_r+0x20>
 800902a:	2000      	movs	r0, #0
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009032:	2e00      	cmp	r6, #0
 8009034:	d0f9      	beq.n	800902a <__sflush_r+0x1a>
 8009036:	2300      	movs	r3, #0
 8009038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800903c:	682f      	ldr	r7, [r5, #0]
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	d032      	beq.n	80090a8 <__sflush_r+0x98>
 8009042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	075a      	lsls	r2, r3, #29
 8009048:	d505      	bpl.n	8009056 <__sflush_r+0x46>
 800904a:	6863      	ldr	r3, [r4, #4]
 800904c:	1ac0      	subs	r0, r0, r3
 800904e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009050:	b10b      	cbz	r3, 8009056 <__sflush_r+0x46>
 8009052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009054:	1ac0      	subs	r0, r0, r3
 8009056:	2300      	movs	r3, #0
 8009058:	4602      	mov	r2, r0
 800905a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800905c:	4628      	mov	r0, r5
 800905e:	6a21      	ldr	r1, [r4, #32]
 8009060:	47b0      	blx	r6
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	d106      	bne.n	8009076 <__sflush_r+0x66>
 8009068:	6829      	ldr	r1, [r5, #0]
 800906a:	291d      	cmp	r1, #29
 800906c:	d82c      	bhi.n	80090c8 <__sflush_r+0xb8>
 800906e:	4a2a      	ldr	r2, [pc, #168]	; (8009118 <__sflush_r+0x108>)
 8009070:	40ca      	lsrs	r2, r1
 8009072:	07d6      	lsls	r6, r2, #31
 8009074:	d528      	bpl.n	80090c8 <__sflush_r+0xb8>
 8009076:	2200      	movs	r2, #0
 8009078:	6062      	str	r2, [r4, #4]
 800907a:	6922      	ldr	r2, [r4, #16]
 800907c:	04d9      	lsls	r1, r3, #19
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	d504      	bpl.n	800908c <__sflush_r+0x7c>
 8009082:	1c42      	adds	r2, r0, #1
 8009084:	d101      	bne.n	800908a <__sflush_r+0x7a>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b903      	cbnz	r3, 800908c <__sflush_r+0x7c>
 800908a:	6560      	str	r0, [r4, #84]	; 0x54
 800908c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800908e:	602f      	str	r7, [r5, #0]
 8009090:	2900      	cmp	r1, #0
 8009092:	d0ca      	beq.n	800902a <__sflush_r+0x1a>
 8009094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009098:	4299      	cmp	r1, r3
 800909a:	d002      	beq.n	80090a2 <__sflush_r+0x92>
 800909c:	4628      	mov	r0, r5
 800909e:	f7ff fae9 	bl	8008674 <_free_r>
 80090a2:	2000      	movs	r0, #0
 80090a4:	6360      	str	r0, [r4, #52]	; 0x34
 80090a6:	e7c1      	b.n	800902c <__sflush_r+0x1c>
 80090a8:	6a21      	ldr	r1, [r4, #32]
 80090aa:	2301      	movs	r3, #1
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b0      	blx	r6
 80090b0:	1c41      	adds	r1, r0, #1
 80090b2:	d1c7      	bne.n	8009044 <__sflush_r+0x34>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0c4      	beq.n	8009044 <__sflush_r+0x34>
 80090ba:	2b1d      	cmp	r3, #29
 80090bc:	d001      	beq.n	80090c2 <__sflush_r+0xb2>
 80090be:	2b16      	cmp	r3, #22
 80090c0:	d101      	bne.n	80090c6 <__sflush_r+0xb6>
 80090c2:	602f      	str	r7, [r5, #0]
 80090c4:	e7b1      	b.n	800902a <__sflush_r+0x1a>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	e7ad      	b.n	800902c <__sflush_r+0x1c>
 80090d0:	690f      	ldr	r7, [r1, #16]
 80090d2:	2f00      	cmp	r7, #0
 80090d4:	d0a9      	beq.n	800902a <__sflush_r+0x1a>
 80090d6:	0793      	lsls	r3, r2, #30
 80090d8:	bf18      	it	ne
 80090da:	2300      	movne	r3, #0
 80090dc:	680e      	ldr	r6, [r1, #0]
 80090de:	bf08      	it	eq
 80090e0:	694b      	ldreq	r3, [r1, #20]
 80090e2:	eba6 0807 	sub.w	r8, r6, r7
 80090e6:	600f      	str	r7, [r1, #0]
 80090e8:	608b      	str	r3, [r1, #8]
 80090ea:	f1b8 0f00 	cmp.w	r8, #0
 80090ee:	dd9c      	ble.n	800902a <__sflush_r+0x1a>
 80090f0:	4643      	mov	r3, r8
 80090f2:	463a      	mov	r2, r7
 80090f4:	4628      	mov	r0, r5
 80090f6:	6a21      	ldr	r1, [r4, #32]
 80090f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090fa:	47b0      	blx	r6
 80090fc:	2800      	cmp	r0, #0
 80090fe:	dc06      	bgt.n	800910e <__sflush_r+0xfe>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f04f 30ff 	mov.w	r0, #4294967295
 8009106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	e78e      	b.n	800902c <__sflush_r+0x1c>
 800910e:	4407      	add	r7, r0
 8009110:	eba8 0800 	sub.w	r8, r8, r0
 8009114:	e7e9      	b.n	80090ea <__sflush_r+0xda>
 8009116:	bf00      	nop
 8009118:	20400001 	.word	0x20400001

0800911c <_fflush_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	4605      	mov	r5, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b913      	cbnz	r3, 800912c <_fflush_r+0x10>
 8009126:	2500      	movs	r5, #0
 8009128:	4628      	mov	r0, r5
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	b118      	cbz	r0, 8009136 <_fflush_r+0x1a>
 800912e:	6983      	ldr	r3, [r0, #24]
 8009130:	b90b      	cbnz	r3, 8009136 <_fflush_r+0x1a>
 8009132:	f000 f887 	bl	8009244 <__sinit>
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <_fflush_r+0x6c>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d11b      	bne.n	8009174 <_fflush_r+0x58>
 800913c:	686c      	ldr	r4, [r5, #4]
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0ef      	beq.n	8009126 <_fflush_r+0xa>
 8009146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d404      	bmi.n	8009156 <_fflush_r+0x3a>
 800914c:	0599      	lsls	r1, r3, #22
 800914e:	d402      	bmi.n	8009156 <_fflush_r+0x3a>
 8009150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009152:	f000 f915 	bl	8009380 <__retarget_lock_acquire_recursive>
 8009156:	4628      	mov	r0, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff ff59 	bl	8009010 <__sflush_r>
 800915e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009160:	4605      	mov	r5, r0
 8009162:	07da      	lsls	r2, r3, #31
 8009164:	d4e0      	bmi.n	8009128 <_fflush_r+0xc>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d4dd      	bmi.n	8009128 <_fflush_r+0xc>
 800916c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800916e:	f000 f908 	bl	8009382 <__retarget_lock_release_recursive>
 8009172:	e7d9      	b.n	8009128 <_fflush_r+0xc>
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <_fflush_r+0x70>)
 8009176:	429c      	cmp	r4, r3
 8009178:	d101      	bne.n	800917e <_fflush_r+0x62>
 800917a:	68ac      	ldr	r4, [r5, #8]
 800917c:	e7df      	b.n	800913e <_fflush_r+0x22>
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <_fflush_r+0x74>)
 8009180:	429c      	cmp	r4, r3
 8009182:	bf08      	it	eq
 8009184:	68ec      	ldreq	r4, [r5, #12]
 8009186:	e7da      	b.n	800913e <_fflush_r+0x22>
 8009188:	0800ae8c 	.word	0x0800ae8c
 800918c:	0800aeac 	.word	0x0800aeac
 8009190:	0800ae6c 	.word	0x0800ae6c

08009194 <std>:
 8009194:	2300      	movs	r3, #0
 8009196:	b510      	push	{r4, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	e9c0 3300 	strd	r3, r3, [r0]
 800919e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a2:	6083      	str	r3, [r0, #8]
 80091a4:	8181      	strh	r1, [r0, #12]
 80091a6:	6643      	str	r3, [r0, #100]	; 0x64
 80091a8:	81c2      	strh	r2, [r0, #14]
 80091aa:	6183      	str	r3, [r0, #24]
 80091ac:	4619      	mov	r1, r3
 80091ae:	2208      	movs	r2, #8
 80091b0:	305c      	adds	r0, #92	; 0x5c
 80091b2:	f7fd fb87 	bl	80068c4 <memset>
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x38>)
 80091b8:	6224      	str	r4, [r4, #32]
 80091ba:	6263      	str	r3, [r4, #36]	; 0x24
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <std+0x3c>)
 80091be:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <std+0x40>)
 80091c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <std+0x44>)
 80091c6:	6323      	str	r3, [r4, #48]	; 0x30
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	080094e5 	.word	0x080094e5
 80091d0:	08009507 	.word	0x08009507
 80091d4:	0800953f 	.word	0x0800953f
 80091d8:	08009563 	.word	0x08009563

080091dc <_cleanup_r>:
 80091dc:	4901      	ldr	r1, [pc, #4]	; (80091e4 <_cleanup_r+0x8>)
 80091de:	f000 b8af 	b.w	8009340 <_fwalk_reent>
 80091e2:	bf00      	nop
 80091e4:	0800911d 	.word	0x0800911d

080091e8 <__sfmoreglue>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	2568      	movs	r5, #104	; 0x68
 80091ec:	1e4a      	subs	r2, r1, #1
 80091ee:	4355      	muls	r5, r2
 80091f0:	460e      	mov	r6, r1
 80091f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091f6:	f7ff fa89 	bl	800870c <_malloc_r>
 80091fa:	4604      	mov	r4, r0
 80091fc:	b140      	cbz	r0, 8009210 <__sfmoreglue+0x28>
 80091fe:	2100      	movs	r1, #0
 8009200:	e9c0 1600 	strd	r1, r6, [r0]
 8009204:	300c      	adds	r0, #12
 8009206:	60a0      	str	r0, [r4, #8]
 8009208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800920c:	f7fd fb5a 	bl	80068c4 <memset>
 8009210:	4620      	mov	r0, r4
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <__sfp_lock_acquire>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_acquire+0x8>)
 8009216:	f000 b8b3 	b.w	8009380 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	20000580 	.word	0x20000580

08009220 <__sfp_lock_release>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sfp_lock_release+0x8>)
 8009222:	f000 b8ae 	b.w	8009382 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	20000580 	.word	0x20000580

0800922c <__sinit_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sinit_lock_acquire+0x8>)
 800922e:	f000 b8a7 	b.w	8009380 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	2000057b 	.word	0x2000057b

08009238 <__sinit_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sinit_lock_release+0x8>)
 800923a:	f000 b8a2 	b.w	8009382 <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	2000057b 	.word	0x2000057b

08009244 <__sinit>:
 8009244:	b510      	push	{r4, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	f7ff fff0 	bl	800922c <__sinit_lock_acquire>
 800924c:	69a3      	ldr	r3, [r4, #24]
 800924e:	b11b      	cbz	r3, 8009258 <__sinit+0x14>
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f7ff bff0 	b.w	8009238 <__sinit_lock_release>
 8009258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800925c:	6523      	str	r3, [r4, #80]	; 0x50
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <__sinit+0x68>)
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <__sinit+0x6c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	62a2      	str	r2, [r4, #40]	; 0x28
 8009266:	42a3      	cmp	r3, r4
 8009268:	bf08      	it	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	4620      	mov	r0, r4
 800926e:	bf08      	it	eq
 8009270:	61a3      	streq	r3, [r4, #24]
 8009272:	f000 f81f 	bl	80092b4 <__sfp>
 8009276:	6060      	str	r0, [r4, #4]
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f81b 	bl	80092b4 <__sfp>
 800927e:	60a0      	str	r0, [r4, #8]
 8009280:	4620      	mov	r0, r4
 8009282:	f000 f817 	bl	80092b4 <__sfp>
 8009286:	2200      	movs	r2, #0
 8009288:	2104      	movs	r1, #4
 800928a:	60e0      	str	r0, [r4, #12]
 800928c:	6860      	ldr	r0, [r4, #4]
 800928e:	f7ff ff81 	bl	8009194 <std>
 8009292:	2201      	movs	r2, #1
 8009294:	2109      	movs	r1, #9
 8009296:	68a0      	ldr	r0, [r4, #8]
 8009298:	f7ff ff7c 	bl	8009194 <std>
 800929c:	2202      	movs	r2, #2
 800929e:	2112      	movs	r1, #18
 80092a0:	68e0      	ldr	r0, [r4, #12]
 80092a2:	f7ff ff77 	bl	8009194 <std>
 80092a6:	2301      	movs	r3, #1
 80092a8:	61a3      	str	r3, [r4, #24]
 80092aa:	e7d1      	b.n	8009250 <__sinit+0xc>
 80092ac:	0800aaec 	.word	0x0800aaec
 80092b0:	080091dd 	.word	0x080091dd

080092b4 <__sfp>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	4607      	mov	r7, r0
 80092b8:	f7ff ffac 	bl	8009214 <__sfp_lock_acquire>
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <__sfp+0x84>)
 80092be:	681e      	ldr	r6, [r3, #0]
 80092c0:	69b3      	ldr	r3, [r6, #24]
 80092c2:	b913      	cbnz	r3, 80092ca <__sfp+0x16>
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ffbd 	bl	8009244 <__sinit>
 80092ca:	3648      	adds	r6, #72	; 0x48
 80092cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	d503      	bpl.n	80092dc <__sfp+0x28>
 80092d4:	6833      	ldr	r3, [r6, #0]
 80092d6:	b30b      	cbz	r3, 800931c <__sfp+0x68>
 80092d8:	6836      	ldr	r6, [r6, #0]
 80092da:	e7f7      	b.n	80092cc <__sfp+0x18>
 80092dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e0:	b9d5      	cbnz	r5, 8009318 <__sfp+0x64>
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <__sfp+0x88>)
 80092e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092e8:	60e3      	str	r3, [r4, #12]
 80092ea:	6665      	str	r5, [r4, #100]	; 0x64
 80092ec:	f000 f847 	bl	800937e <__retarget_lock_init_recursive>
 80092f0:	f7ff ff96 	bl	8009220 <__sfp_lock_release>
 80092f4:	2208      	movs	r2, #8
 80092f6:	4629      	mov	r1, r5
 80092f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009300:	6025      	str	r5, [r4, #0]
 8009302:	61a5      	str	r5, [r4, #24]
 8009304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009308:	f7fd fadc 	bl	80068c4 <memset>
 800930c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009314:	4620      	mov	r0, r4
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	3468      	adds	r4, #104	; 0x68
 800931a:	e7d9      	b.n	80092d0 <__sfp+0x1c>
 800931c:	2104      	movs	r1, #4
 800931e:	4638      	mov	r0, r7
 8009320:	f7ff ff62 	bl	80091e8 <__sfmoreglue>
 8009324:	4604      	mov	r4, r0
 8009326:	6030      	str	r0, [r6, #0]
 8009328:	2800      	cmp	r0, #0
 800932a:	d1d5      	bne.n	80092d8 <__sfp+0x24>
 800932c:	f7ff ff78 	bl	8009220 <__sfp_lock_release>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	e7ee      	b.n	8009314 <__sfp+0x60>
 8009336:	bf00      	nop
 8009338:	0800aaec 	.word	0x0800aaec
 800933c:	ffff0001 	.word	0xffff0001

08009340 <_fwalk_reent>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	4688      	mov	r8, r1
 8009348:	2700      	movs	r7, #0
 800934a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800934e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009352:	f1b9 0901 	subs.w	r9, r9, #1
 8009356:	d505      	bpl.n	8009364 <_fwalk_reent+0x24>
 8009358:	6824      	ldr	r4, [r4, #0]
 800935a:	2c00      	cmp	r4, #0
 800935c:	d1f7      	bne.n	800934e <_fwalk_reent+0xe>
 800935e:	4638      	mov	r0, r7
 8009360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009364:	89ab      	ldrh	r3, [r5, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d907      	bls.n	800937a <_fwalk_reent+0x3a>
 800936a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936e:	3301      	adds	r3, #1
 8009370:	d003      	beq.n	800937a <_fwalk_reent+0x3a>
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	47c0      	blx	r8
 8009378:	4307      	orrs	r7, r0
 800937a:	3568      	adds	r5, #104	; 0x68
 800937c:	e7e9      	b.n	8009352 <_fwalk_reent+0x12>

0800937e <__retarget_lock_init_recursive>:
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_acquire_recursive>:
 8009380:	4770      	bx	lr

08009382 <__retarget_lock_release_recursive>:
 8009382:	4770      	bx	lr

08009384 <__swhatbuf_r>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	4614      	mov	r4, r2
 800938e:	2900      	cmp	r1, #0
 8009390:	461d      	mov	r5, r3
 8009392:	b096      	sub	sp, #88	; 0x58
 8009394:	da07      	bge.n	80093a6 <__swhatbuf_r+0x22>
 8009396:	2300      	movs	r3, #0
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	89b3      	ldrh	r3, [r6, #12]
 800939c:	061a      	lsls	r2, r3, #24
 800939e:	d410      	bmi.n	80093c2 <__swhatbuf_r+0x3e>
 80093a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a4:	e00e      	b.n	80093c4 <__swhatbuf_r+0x40>
 80093a6:	466a      	mov	r2, sp
 80093a8:	f000 f902 	bl	80095b0 <_fstat_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dbf2      	blt.n	8009396 <__swhatbuf_r+0x12>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093ba:	425a      	negs	r2, r3
 80093bc:	415a      	adcs	r2, r3
 80093be:	602a      	str	r2, [r5, #0]
 80093c0:	e7ee      	b.n	80093a0 <__swhatbuf_r+0x1c>
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	2000      	movs	r0, #0
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	b016      	add	sp, #88	; 0x58
 80093ca:	bd70      	pop	{r4, r5, r6, pc}

080093cc <__smakebuf_r>:
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d0:	079d      	lsls	r5, r3, #30
 80093d2:	4606      	mov	r6, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	d507      	bpl.n	80093e8 <__smakebuf_r+0x1c>
 80093d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	2301      	movs	r3, #1
 80093e2:	6163      	str	r3, [r4, #20]
 80093e4:	b002      	add	sp, #8
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	466a      	mov	r2, sp
 80093ea:	ab01      	add	r3, sp, #4
 80093ec:	f7ff ffca 	bl	8009384 <__swhatbuf_r>
 80093f0:	9900      	ldr	r1, [sp, #0]
 80093f2:	4605      	mov	r5, r0
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7ff f989 	bl	800870c <_malloc_r>
 80093fa:	b948      	cbnz	r0, 8009410 <__smakebuf_r+0x44>
 80093fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009400:	059a      	lsls	r2, r3, #22
 8009402:	d4ef      	bmi.n	80093e4 <__smakebuf_r+0x18>
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	f043 0302 	orr.w	r3, r3, #2
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	e7e3      	b.n	80093d8 <__smakebuf_r+0xc>
 8009410:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <__smakebuf_r+0x7c>)
 8009412:	62b3      	str	r3, [r6, #40]	; 0x28
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	6020      	str	r0, [r4, #0]
 8009418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	6120      	str	r0, [r4, #16]
 8009422:	6163      	str	r3, [r4, #20]
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	b15b      	cbz	r3, 8009440 <__smakebuf_r+0x74>
 8009428:	4630      	mov	r0, r6
 800942a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942e:	f000 f8d1 	bl	80095d4 <_isatty_r>
 8009432:	b128      	cbz	r0, 8009440 <__smakebuf_r+0x74>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	89a0      	ldrh	r0, [r4, #12]
 8009442:	4305      	orrs	r5, r0
 8009444:	81a5      	strh	r5, [r4, #12]
 8009446:	e7cd      	b.n	80093e4 <__smakebuf_r+0x18>
 8009448:	080091dd 	.word	0x080091dd

0800944c <_malloc_usable_size_r>:
 800944c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009450:	1f18      	subs	r0, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	bfbc      	itt	lt
 8009456:	580b      	ldrlt	r3, [r1, r0]
 8009458:	18c0      	addlt	r0, r0, r3
 800945a:	4770      	bx	lr

0800945c <_raise_r>:
 800945c:	291f      	cmp	r1, #31
 800945e:	b538      	push	{r3, r4, r5, lr}
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	d904      	bls.n	8009470 <_raise_r+0x14>
 8009466:	2316      	movs	r3, #22
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009472:	b112      	cbz	r2, 800947a <_raise_r+0x1e>
 8009474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009478:	b94b      	cbnz	r3, 800948e <_raise_r+0x32>
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f830 	bl	80094e0 <_getpid_r>
 8009480:	462a      	mov	r2, r5
 8009482:	4601      	mov	r1, r0
 8009484:	4620      	mov	r0, r4
 8009486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800948a:	f000 b817 	b.w	80094bc <_kill_r>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d00a      	beq.n	80094a8 <_raise_r+0x4c>
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	d103      	bne.n	800949e <_raise_r+0x42>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	2001      	movs	r0, #1
 800949c:	e7e7      	b.n	800946e <_raise_r+0x12>
 800949e:	2400      	movs	r4, #0
 80094a0:	4628      	mov	r0, r5
 80094a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094a6:	4798      	blx	r3
 80094a8:	2000      	movs	r0, #0
 80094aa:	e7e0      	b.n	800946e <_raise_r+0x12>

080094ac <raise>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <raise+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bfd3 	b.w	800945c <_raise_r>
 80094b6:	bf00      	nop
 80094b8:	2000003c 	.word	0x2000003c

080094bc <_kill_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	2300      	movs	r3, #0
 80094c0:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_kill_r+0x20>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7f8 f8c4 	bl	8001656 <_kill>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_kill_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_kill_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20000574 	.word	0x20000574

080094e0 <_getpid_r>:
 80094e0:	f7f8 b8b2 	b.w	8001648 <_getpid>

080094e4 <__sread>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	f000 f894 	bl	8009618 <_read_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	bfab      	itete	ge
 80094f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094f6:	89a3      	ldrhlt	r3, [r4, #12]
 80094f8:	181b      	addge	r3, r3, r0
 80094fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094fe:	bfac      	ite	ge
 8009500:	6563      	strge	r3, [r4, #84]	; 0x54
 8009502:	81a3      	strhlt	r3, [r4, #12]
 8009504:	bd10      	pop	{r4, pc}

08009506 <__swrite>:
 8009506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950a:	461f      	mov	r7, r3
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	4605      	mov	r5, r0
 8009510:	05db      	lsls	r3, r3, #23
 8009512:	460c      	mov	r4, r1
 8009514:	4616      	mov	r6, r2
 8009516:	d505      	bpl.n	8009524 <__swrite+0x1e>
 8009518:	2302      	movs	r3, #2
 800951a:	2200      	movs	r2, #0
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	f000 f868 	bl	80095f4 <_lseek_r>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	4632      	mov	r2, r6
 8009528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	4628      	mov	r0, r5
 8009530:	463b      	mov	r3, r7
 8009532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800953a:	f000 b817 	b.w	800956c <_write_r>

0800953e <__sseek>:
 800953e:	b510      	push	{r4, lr}
 8009540:	460c      	mov	r4, r1
 8009542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009546:	f000 f855 	bl	80095f4 <_lseek_r>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	bf15      	itete	ne
 8009550:	6560      	strne	r0, [r4, #84]	; 0x54
 8009552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800955a:	81a3      	strheq	r3, [r4, #12]
 800955c:	bf18      	it	ne
 800955e:	81a3      	strhne	r3, [r4, #12]
 8009560:	bd10      	pop	{r4, pc}

08009562 <__sclose>:
 8009562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009566:	f000 b813 	b.w	8009590 <_close_r>
	...

0800956c <_write_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	2200      	movs	r2, #0
 8009576:	4d05      	ldr	r5, [pc, #20]	; (800958c <_write_r+0x20>)
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7f8 f8a2 	bl	80016c4 <_write>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_write_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_write_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20000574 	.word	0x20000574

08009590 <_close_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	2300      	movs	r3, #0
 8009594:	4d05      	ldr	r5, [pc, #20]	; (80095ac <_close_r+0x1c>)
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	602b      	str	r3, [r5, #0]
 800959c:	f7f8 f8ae 	bl	80016fc <_close>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_close_r+0x1a>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_close_r+0x1a>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20000574 	.word	0x20000574

080095b0 <_fstat_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	2300      	movs	r3, #0
 80095b4:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_fstat_r+0x20>)
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	4611      	mov	r1, r2
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	f7f8 f8a8 	bl	8001712 <_fstat>
 80095c2:	1c43      	adds	r3, r0, #1
 80095c4:	d102      	bne.n	80095cc <_fstat_r+0x1c>
 80095c6:	682b      	ldr	r3, [r5, #0]
 80095c8:	b103      	cbz	r3, 80095cc <_fstat_r+0x1c>
 80095ca:	6023      	str	r3, [r4, #0]
 80095cc:	bd38      	pop	{r3, r4, r5, pc}
 80095ce:	bf00      	nop
 80095d0:	20000574 	.word	0x20000574

080095d4 <_isatty_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	2300      	movs	r3, #0
 80095d8:	4d05      	ldr	r5, [pc, #20]	; (80095f0 <_isatty_r+0x1c>)
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7f8 f8a6 	bl	8001730 <_isatty>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_isatty_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_isatty_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000574 	.word	0x20000574

080095f4 <_lseek_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	4d05      	ldr	r5, [pc, #20]	; (8009614 <_lseek_r+0x20>)
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f7f8 f89e 	bl	8001744 <_lseek>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_lseek_r+0x1e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_lseek_r+0x1e>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20000574 	.word	0x20000574

08009618 <_read_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	4611      	mov	r1, r2
 8009620:	2200      	movs	r2, #0
 8009622:	4d05      	ldr	r5, [pc, #20]	; (8009638 <_read_r+0x20>)
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7f8 f82f 	bl	800168a <_read>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_read_r+0x1e>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_read_r+0x1e>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	20000574 	.word	0x20000574
 800963c:	00000000 	.word	0x00000000

08009640 <atan>:
 8009640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	4bb6      	ldr	r3, [pc, #728]	; (8009920 <atan+0x2e0>)
 8009646:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800964a:	429e      	cmp	r6, r3
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
 8009650:	468b      	mov	fp, r1
 8009652:	dd17      	ble.n	8009684 <atan+0x44>
 8009654:	4bb3      	ldr	r3, [pc, #716]	; (8009924 <atan+0x2e4>)
 8009656:	429e      	cmp	r6, r3
 8009658:	dc01      	bgt.n	800965e <atan+0x1e>
 800965a:	d109      	bne.n	8009670 <atan+0x30>
 800965c:	b140      	cbz	r0, 8009670 <atan+0x30>
 800965e:	4622      	mov	r2, r4
 8009660:	462b      	mov	r3, r5
 8009662:	4620      	mov	r0, r4
 8009664:	4629      	mov	r1, r5
 8009666:	f7f6 fded 	bl	8000244 <__adddf3>
 800966a:	4604      	mov	r4, r0
 800966c:	460d      	mov	r5, r1
 800966e:	e005      	b.n	800967c <atan+0x3c>
 8009670:	f1bb 0f00 	cmp.w	fp, #0
 8009674:	4cac      	ldr	r4, [pc, #688]	; (8009928 <atan+0x2e8>)
 8009676:	f300 8121 	bgt.w	80098bc <atan+0x27c>
 800967a:	4dac      	ldr	r5, [pc, #688]	; (800992c <atan+0x2ec>)
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	4baa      	ldr	r3, [pc, #680]	; (8009930 <atan+0x2f0>)
 8009686:	429e      	cmp	r6, r3
 8009688:	dc11      	bgt.n	80096ae <atan+0x6e>
 800968a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800968e:	429e      	cmp	r6, r3
 8009690:	dc0a      	bgt.n	80096a8 <atan+0x68>
 8009692:	a38b      	add	r3, pc, #556	; (adr r3, 80098c0 <atan+0x280>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 fdd4 	bl	8000244 <__adddf3>
 800969c:	2200      	movs	r2, #0
 800969e:	4ba5      	ldr	r3, [pc, #660]	; (8009934 <atan+0x2f4>)
 80096a0:	f7f7 fa16 	bl	8000ad0 <__aeabi_dcmpgt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d1e9      	bne.n	800967c <atan+0x3c>
 80096a8:	f04f 3aff 	mov.w	sl, #4294967295
 80096ac:	e027      	b.n	80096fe <atan+0xbe>
 80096ae:	f000 f951 	bl	8009954 <fabs>
 80096b2:	4ba1      	ldr	r3, [pc, #644]	; (8009938 <atan+0x2f8>)
 80096b4:	4604      	mov	r4, r0
 80096b6:	429e      	cmp	r6, r3
 80096b8:	460d      	mov	r5, r1
 80096ba:	f300 80b8 	bgt.w	800982e <atan+0x1ee>
 80096be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80096c2:	429e      	cmp	r6, r3
 80096c4:	f300 809c 	bgt.w	8009800 <atan+0x1c0>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	f7f6 fdba 	bl	8000244 <__adddf3>
 80096d0:	2200      	movs	r2, #0
 80096d2:	4b98      	ldr	r3, [pc, #608]	; (8009934 <atan+0x2f4>)
 80096d4:	f7f6 fdb4 	bl	8000240 <__aeabi_dsub>
 80096d8:	2200      	movs	r2, #0
 80096da:	4606      	mov	r6, r0
 80096dc:	460f      	mov	r7, r1
 80096de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096e2:	4620      	mov	r0, r4
 80096e4:	4629      	mov	r1, r5
 80096e6:	f7f6 fdad 	bl	8000244 <__adddf3>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f7 f887 	bl	8000804 <__aeabi_ddiv>
 80096f6:	f04f 0a00 	mov.w	sl, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	460d      	mov	r5, r1
 80096fe:	4622      	mov	r2, r4
 8009700:	462b      	mov	r3, r5
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f6 ff53 	bl	80005b0 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4680      	mov	r8, r0
 8009710:	4689      	mov	r9, r1
 8009712:	f7f6 ff4d 	bl	80005b0 <__aeabi_dmul>
 8009716:	a36c      	add	r3, pc, #432	; (adr r3, 80098c8 <atan+0x288>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	f7f6 ff46 	bl	80005b0 <__aeabi_dmul>
 8009724:	a36a      	add	r3, pc, #424	; (adr r3, 80098d0 <atan+0x290>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fd8b 	bl	8000244 <__adddf3>
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	f7f6 ff3d 	bl	80005b0 <__aeabi_dmul>
 8009736:	a368      	add	r3, pc, #416	; (adr r3, 80098d8 <atan+0x298>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 fd82 	bl	8000244 <__adddf3>
 8009740:	4632      	mov	r2, r6
 8009742:	463b      	mov	r3, r7
 8009744:	f7f6 ff34 	bl	80005b0 <__aeabi_dmul>
 8009748:	a365      	add	r3, pc, #404	; (adr r3, 80098e0 <atan+0x2a0>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f6 fd79 	bl	8000244 <__adddf3>
 8009752:	4632      	mov	r2, r6
 8009754:	463b      	mov	r3, r7
 8009756:	f7f6 ff2b 	bl	80005b0 <__aeabi_dmul>
 800975a:	a363      	add	r3, pc, #396	; (adr r3, 80098e8 <atan+0x2a8>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 fd70 	bl	8000244 <__adddf3>
 8009764:	4632      	mov	r2, r6
 8009766:	463b      	mov	r3, r7
 8009768:	f7f6 ff22 	bl	80005b0 <__aeabi_dmul>
 800976c:	a360      	add	r3, pc, #384	; (adr r3, 80098f0 <atan+0x2b0>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fd67 	bl	8000244 <__adddf3>
 8009776:	4642      	mov	r2, r8
 8009778:	464b      	mov	r3, r9
 800977a:	f7f6 ff19 	bl	80005b0 <__aeabi_dmul>
 800977e:	a35e      	add	r3, pc, #376	; (adr r3, 80098f8 <atan+0x2b8>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	4680      	mov	r8, r0
 8009786:	4689      	mov	r9, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 ff10 	bl	80005b0 <__aeabi_dmul>
 8009790:	a35b      	add	r3, pc, #364	; (adr r3, 8009900 <atan+0x2c0>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd53 	bl	8000240 <__aeabi_dsub>
 800979a:	4632      	mov	r2, r6
 800979c:	463b      	mov	r3, r7
 800979e:	f7f6 ff07 	bl	80005b0 <__aeabi_dmul>
 80097a2:	a359      	add	r3, pc, #356	; (adr r3, 8009908 <atan+0x2c8>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fd4a 	bl	8000240 <__aeabi_dsub>
 80097ac:	4632      	mov	r2, r6
 80097ae:	463b      	mov	r3, r7
 80097b0:	f7f6 fefe 	bl	80005b0 <__aeabi_dmul>
 80097b4:	a356      	add	r3, pc, #344	; (adr r3, 8009910 <atan+0x2d0>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fd41 	bl	8000240 <__aeabi_dsub>
 80097be:	4632      	mov	r2, r6
 80097c0:	463b      	mov	r3, r7
 80097c2:	f7f6 fef5 	bl	80005b0 <__aeabi_dmul>
 80097c6:	a354      	add	r3, pc, #336	; (adr r3, 8009918 <atan+0x2d8>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 fd38 	bl	8000240 <__aeabi_dsub>
 80097d0:	4632      	mov	r2, r6
 80097d2:	463b      	mov	r3, r7
 80097d4:	f7f6 feec 	bl	80005b0 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4640      	mov	r0, r8
 80097de:	4649      	mov	r1, r9
 80097e0:	f7f6 fd30 	bl	8000244 <__adddf3>
 80097e4:	4622      	mov	r2, r4
 80097e6:	462b      	mov	r3, r5
 80097e8:	f7f6 fee2 	bl	80005b0 <__aeabi_dmul>
 80097ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	d144      	bne.n	8009880 <atan+0x240>
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fd21 	bl	8000240 <__aeabi_dsub>
 80097fe:	e734      	b.n	800966a <atan+0x2a>
 8009800:	2200      	movs	r2, #0
 8009802:	4b4c      	ldr	r3, [pc, #304]	; (8009934 <atan+0x2f4>)
 8009804:	f7f6 fd1c 	bl	8000240 <__aeabi_dsub>
 8009808:	2200      	movs	r2, #0
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	4b48      	ldr	r3, [pc, #288]	; (8009934 <atan+0x2f4>)
 8009814:	f7f6 fd16 	bl	8000244 <__adddf3>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fff0 	bl	8000804 <__aeabi_ddiv>
 8009824:	f04f 0a01 	mov.w	sl, #1
 8009828:	4604      	mov	r4, r0
 800982a:	460d      	mov	r5, r1
 800982c:	e767      	b.n	80096fe <atan+0xbe>
 800982e:	4b43      	ldr	r3, [pc, #268]	; (800993c <atan+0x2fc>)
 8009830:	429e      	cmp	r6, r3
 8009832:	da1a      	bge.n	800986a <atan+0x22a>
 8009834:	2200      	movs	r2, #0
 8009836:	4b42      	ldr	r3, [pc, #264]	; (8009940 <atan+0x300>)
 8009838:	f7f6 fd02 	bl	8000240 <__aeabi_dsub>
 800983c:	2200      	movs	r2, #0
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	4620      	mov	r0, r4
 8009844:	4629      	mov	r1, r5
 8009846:	4b3e      	ldr	r3, [pc, #248]	; (8009940 <atan+0x300>)
 8009848:	f7f6 feb2 	bl	80005b0 <__aeabi_dmul>
 800984c:	2200      	movs	r2, #0
 800984e:	4b39      	ldr	r3, [pc, #228]	; (8009934 <atan+0x2f4>)
 8009850:	f7f6 fcf8 	bl	8000244 <__adddf3>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 ffd2 	bl	8000804 <__aeabi_ddiv>
 8009860:	f04f 0a02 	mov.w	sl, #2
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	e749      	b.n	80096fe <atan+0xbe>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	2000      	movs	r0, #0
 8009870:	4934      	ldr	r1, [pc, #208]	; (8009944 <atan+0x304>)
 8009872:	f7f6 ffc7 	bl	8000804 <__aeabi_ddiv>
 8009876:	f04f 0a03 	mov.w	sl, #3
 800987a:	4604      	mov	r4, r0
 800987c:	460d      	mov	r5, r1
 800987e:	e73e      	b.n	80096fe <atan+0xbe>
 8009880:	4b31      	ldr	r3, [pc, #196]	; (8009948 <atan+0x308>)
 8009882:	4e32      	ldr	r6, [pc, #200]	; (800994c <atan+0x30c>)
 8009884:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009888:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800988c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009890:	f7f6 fcd6 	bl	8000240 <__aeabi_dsub>
 8009894:	4622      	mov	r2, r4
 8009896:	462b      	mov	r3, r5
 8009898:	f7f6 fcd2 	bl	8000240 <__aeabi_dsub>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80098a4:	f7f6 fccc 	bl	8000240 <__aeabi_dsub>
 80098a8:	f1bb 0f00 	cmp.w	fp, #0
 80098ac:	4604      	mov	r4, r0
 80098ae:	460d      	mov	r5, r1
 80098b0:	f6bf aee4 	bge.w	800967c <atan+0x3c>
 80098b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098b8:	461d      	mov	r5, r3
 80098ba:	e6df      	b.n	800967c <atan+0x3c>
 80098bc:	4d24      	ldr	r5, [pc, #144]	; (8009950 <atan+0x310>)
 80098be:	e6dd      	b.n	800967c <atan+0x3c>
 80098c0:	8800759c 	.word	0x8800759c
 80098c4:	7e37e43c 	.word	0x7e37e43c
 80098c8:	e322da11 	.word	0xe322da11
 80098cc:	3f90ad3a 	.word	0x3f90ad3a
 80098d0:	24760deb 	.word	0x24760deb
 80098d4:	3fa97b4b 	.word	0x3fa97b4b
 80098d8:	a0d03d51 	.word	0xa0d03d51
 80098dc:	3fb10d66 	.word	0x3fb10d66
 80098e0:	c54c206e 	.word	0xc54c206e
 80098e4:	3fb745cd 	.word	0x3fb745cd
 80098e8:	920083ff 	.word	0x920083ff
 80098ec:	3fc24924 	.word	0x3fc24924
 80098f0:	5555550d 	.word	0x5555550d
 80098f4:	3fd55555 	.word	0x3fd55555
 80098f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80098fc:	bfa2b444 	.word	0xbfa2b444
 8009900:	52defd9a 	.word	0x52defd9a
 8009904:	3fadde2d 	.word	0x3fadde2d
 8009908:	af749a6d 	.word	0xaf749a6d
 800990c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009910:	fe231671 	.word	0xfe231671
 8009914:	3fbc71c6 	.word	0x3fbc71c6
 8009918:	9998ebc4 	.word	0x9998ebc4
 800991c:	3fc99999 	.word	0x3fc99999
 8009920:	440fffff 	.word	0x440fffff
 8009924:	7ff00000 	.word	0x7ff00000
 8009928:	54442d18 	.word	0x54442d18
 800992c:	bff921fb 	.word	0xbff921fb
 8009930:	3fdbffff 	.word	0x3fdbffff
 8009934:	3ff00000 	.word	0x3ff00000
 8009938:	3ff2ffff 	.word	0x3ff2ffff
 800993c:	40038000 	.word	0x40038000
 8009940:	3ff80000 	.word	0x3ff80000
 8009944:	bff00000 	.word	0xbff00000
 8009948:	0800aef0 	.word	0x0800aef0
 800994c:	0800aed0 	.word	0x0800aed0
 8009950:	3ff921fb 	.word	0x3ff921fb

08009954 <fabs>:
 8009954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009958:	4770      	bx	lr

0800995a <atan2>:
 800995a:	f000 b8d9 	b.w	8009b10 <__ieee754_atan2>
	...

08009960 <pow>:
 8009960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009964:	461f      	mov	r7, r3
 8009966:	4680      	mov	r8, r0
 8009968:	4689      	mov	r9, r1
 800996a:	4616      	mov	r6, r2
 800996c:	f000 f9a4 	bl	8009cb8 <__ieee754_pow>
 8009970:	4b4d      	ldr	r3, [pc, #308]	; (8009aa8 <pow+0x148>)
 8009972:	4604      	mov	r4, r0
 8009974:	f993 3000 	ldrsb.w	r3, [r3]
 8009978:	460d      	mov	r5, r1
 800997a:	3301      	adds	r3, #1
 800997c:	d015      	beq.n	80099aa <pow+0x4a>
 800997e:	4632      	mov	r2, r6
 8009980:	463b      	mov	r3, r7
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f7 f8ad 	bl	8000ae4 <__aeabi_dcmpun>
 800998a:	b970      	cbnz	r0, 80099aa <pow+0x4a>
 800998c:	4642      	mov	r2, r8
 800998e:	464b      	mov	r3, r9
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f8a6 	bl	8000ae4 <__aeabi_dcmpun>
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	b148      	cbz	r0, 80099b2 <pow+0x52>
 800999e:	4630      	mov	r0, r6
 80099a0:	4639      	mov	r1, r7
 80099a2:	f7f7 f86d 	bl	8000a80 <__aeabi_dcmpeq>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d17b      	bne.n	8009aa2 <pow+0x142>
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f7 f863 	bl	8000a80 <__aeabi_dcmpeq>
 80099ba:	b1e0      	cbz	r0, 80099f6 <pow+0x96>
 80099bc:	2200      	movs	r2, #0
 80099be:	2300      	movs	r3, #0
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f85c 	bl	8000a80 <__aeabi_dcmpeq>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d16a      	bne.n	8009aa2 <pow+0x142>
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f000 ff34 	bl	800a83c <finite>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d0e8      	beq.n	80099aa <pow+0x4a>
 80099d8:	2200      	movs	r2, #0
 80099da:	2300      	movs	r3, #0
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f7 f858 	bl	8000a94 <__aeabi_dcmplt>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d0e0      	beq.n	80099aa <pow+0x4a>
 80099e8:	f7fc ff42 	bl	8006870 <__errno>
 80099ec:	2321      	movs	r3, #33	; 0x21
 80099ee:	2400      	movs	r4, #0
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	4d2e      	ldr	r5, [pc, #184]	; (8009aac <pow+0x14c>)
 80099f4:	e7d9      	b.n	80099aa <pow+0x4a>
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f000 ff1f 	bl	800a83c <finite>
 80099fe:	bba8      	cbnz	r0, 8009a6c <pow+0x10c>
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f000 ff1a 	bl	800a83c <finite>
 8009a08:	b380      	cbz	r0, 8009a6c <pow+0x10c>
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	4639      	mov	r1, r7
 8009a0e:	f000 ff15 	bl	800a83c <finite>
 8009a12:	b358      	cbz	r0, 8009a6c <pow+0x10c>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	4620      	mov	r0, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	f7f7 f862 	bl	8000ae4 <__aeabi_dcmpun>
 8009a20:	b160      	cbz	r0, 8009a3c <pow+0xdc>
 8009a22:	f7fc ff25 	bl	8006870 <__errno>
 8009a26:	2321      	movs	r3, #33	; 0x21
 8009a28:	2200      	movs	r2, #0
 8009a2a:	6003      	str	r3, [r0, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4610      	mov	r0, r2
 8009a30:	4619      	mov	r1, r3
 8009a32:	f7f6 fee7 	bl	8000804 <__aeabi_ddiv>
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	e7b6      	b.n	80099aa <pow+0x4a>
 8009a3c:	f7fc ff18 	bl	8006870 <__errno>
 8009a40:	2322      	movs	r3, #34	; 0x22
 8009a42:	2200      	movs	r2, #0
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	4649      	mov	r1, r9
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7f7 f822 	bl	8000a94 <__aeabi_dcmplt>
 8009a50:	2400      	movs	r4, #0
 8009a52:	b148      	cbz	r0, 8009a68 <pow+0x108>
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f000 fefc 	bl	800a854 <rint>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f7 f80e 	bl	8000a80 <__aeabi_dcmpeq>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0c4      	beq.n	80099f2 <pow+0x92>
 8009a68:	4d11      	ldr	r5, [pc, #68]	; (8009ab0 <pow+0x150>)
 8009a6a:	e79e      	b.n	80099aa <pow+0x4a>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4620      	mov	r0, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	f7f7 f804 	bl	8000a80 <__aeabi_dcmpeq>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d096      	beq.n	80099aa <pow+0x4a>
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f000 fedc 	bl	800a83c <finite>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d090      	beq.n	80099aa <pow+0x4a>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f000 fed6 	bl	800a83c <finite>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d08a      	beq.n	80099aa <pow+0x4a>
 8009a94:	f7fc feec 	bl	8006870 <__errno>
 8009a98:	2322      	movs	r3, #34	; 0x22
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	2500      	movs	r5, #0
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	e783      	b.n	80099aa <pow+0x4a>
 8009aa2:	2400      	movs	r4, #0
 8009aa4:	4d03      	ldr	r5, [pc, #12]	; (8009ab4 <pow+0x154>)
 8009aa6:	e780      	b.n	80099aa <pow+0x4a>
 8009aa8:	2000020c 	.word	0x2000020c
 8009aac:	fff00000 	.word	0xfff00000
 8009ab0:	7ff00000 	.word	0x7ff00000
 8009ab4:	3ff00000 	.word	0x3ff00000

08009ab8 <sqrt>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	f000 fe11 	bl	800a6e4 <__ieee754_sqrt>
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <sqrt+0x54>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8009aca:	460d      	mov	r5, r1
 8009acc:	3301      	adds	r3, #1
 8009ace:	d019      	beq.n	8009b04 <sqrt+0x4c>
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f7 f804 	bl	8000ae4 <__aeabi_dcmpun>
 8009adc:	b990      	cbnz	r0, 8009b04 <sqrt+0x4c>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 ffd5 	bl	8000a94 <__aeabi_dcmplt>
 8009aea:	b158      	cbz	r0, 8009b04 <sqrt+0x4c>
 8009aec:	f7fc fec0 	bl	8006870 <__errno>
 8009af0:	2321      	movs	r3, #33	; 0x21
 8009af2:	2200      	movs	r2, #0
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	2300      	movs	r3, #0
 8009af8:	4610      	mov	r0, r2
 8009afa:	4619      	mov	r1, r3
 8009afc:	f7f6 fe82 	bl	8000804 <__aeabi_ddiv>
 8009b00:	4604      	mov	r4, r0
 8009b02:	460d      	mov	r5, r1
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000020c 	.word	0x2000020c

08009b10 <__ieee754_atan2>:
 8009b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4692      	mov	sl, r2
 8009b16:	4699      	mov	r9, r3
 8009b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b1c:	461f      	mov	r7, r3
 8009b1e:	f1ca 0300 	rsb	r3, sl, #0
 8009b22:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8009cb0 <__ieee754_atan2+0x1a0>
 8009b26:	ea43 030a 	orr.w	r3, r3, sl
 8009b2a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b2e:	4573      	cmp	r3, lr
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	d808      	bhi.n	8009b48 <__ieee754_atan2+0x38>
 8009b36:	4246      	negs	r6, r0
 8009b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b3c:	4306      	orrs	r6, r0
 8009b3e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009b42:	4576      	cmp	r6, lr
 8009b44:	468c      	mov	ip, r1
 8009b46:	d908      	bls.n	8009b5a <__ieee754_atan2+0x4a>
 8009b48:	4652      	mov	r2, sl
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fb78 	bl	8000244 <__adddf3>
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	e019      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009b5a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8009b5e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009b62:	ea56 060a 	orrs.w	r6, r6, sl
 8009b66:	d103      	bne.n	8009b70 <__ieee754_atan2+0x60>
 8009b68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	f7ff bd68 	b.w	8009640 <atan>
 8009b70:	17be      	asrs	r6, r7, #30
 8009b72:	f006 0602 	and.w	r6, r6, #2
 8009b76:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009b7a:	ea53 0100 	orrs.w	r1, r3, r0
 8009b7e:	d10a      	bne.n	8009b96 <__ieee754_atan2+0x86>
 8009b80:	2e02      	cmp	r6, #2
 8009b82:	d067      	beq.n	8009c54 <__ieee754_atan2+0x144>
 8009b84:	2e03      	cmp	r6, #3
 8009b86:	d102      	bne.n	8009b8e <__ieee754_atan2+0x7e>
 8009b88:	a53b      	add	r5, pc, #236	; (adr r5, 8009c78 <__ieee754_atan2+0x168>)
 8009b8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	ea52 010a 	orrs.w	r1, r2, sl
 8009b9a:	d106      	bne.n	8009baa <__ieee754_atan2+0x9a>
 8009b9c:	f1bc 0f00 	cmp.w	ip, #0
 8009ba0:	da63      	bge.n	8009c6a <__ieee754_atan2+0x15a>
 8009ba2:	a537      	add	r5, pc, #220	; (adr r5, 8009c80 <__ieee754_atan2+0x170>)
 8009ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ba8:	e7f1      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009baa:	4572      	cmp	r2, lr
 8009bac:	d10f      	bne.n	8009bce <__ieee754_atan2+0xbe>
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	f106 36ff 	add.w	r6, r6, #4294967295
 8009bb4:	d107      	bne.n	8009bc6 <__ieee754_atan2+0xb6>
 8009bb6:	2e02      	cmp	r6, #2
 8009bb8:	d850      	bhi.n	8009c5c <__ieee754_atan2+0x14c>
 8009bba:	4b3b      	ldr	r3, [pc, #236]	; (8009ca8 <__ieee754_atan2+0x198>)
 8009bbc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009bc0:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009bc4:	e7e3      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009bc6:	2e02      	cmp	r6, #2
 8009bc8:	d84c      	bhi.n	8009c64 <__ieee754_atan2+0x154>
 8009bca:	4b38      	ldr	r3, [pc, #224]	; (8009cac <__ieee754_atan2+0x19c>)
 8009bcc:	e7f6      	b.n	8009bbc <__ieee754_atan2+0xac>
 8009bce:	4573      	cmp	r3, lr
 8009bd0:	d0e4      	beq.n	8009b9c <__ieee754_atan2+0x8c>
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009bd8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bdc:	da20      	bge.n	8009c20 <__ieee754_atan2+0x110>
 8009bde:	2f00      	cmp	r7, #0
 8009be0:	da01      	bge.n	8009be6 <__ieee754_atan2+0xd6>
 8009be2:	323c      	adds	r2, #60	; 0x3c
 8009be4:	db20      	blt.n	8009c28 <__ieee754_atan2+0x118>
 8009be6:	4652      	mov	r2, sl
 8009be8:	464b      	mov	r3, r9
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 fe09 	bl	8000804 <__aeabi_ddiv>
 8009bf2:	f7ff feaf 	bl	8009954 <fabs>
 8009bf6:	f7ff fd23 	bl	8009640 <atan>
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	2e01      	cmp	r6, #1
 8009c00:	d015      	beq.n	8009c2e <__ieee754_atan2+0x11e>
 8009c02:	2e02      	cmp	r6, #2
 8009c04:	d017      	beq.n	8009c36 <__ieee754_atan2+0x126>
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d0c1      	beq.n	8009b8e <__ieee754_atan2+0x7e>
 8009c0a:	a31f      	add	r3, pc, #124	; (adr r3, 8009c88 <__ieee754_atan2+0x178>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	4620      	mov	r0, r4
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 fb14 	bl	8000240 <__aeabi_dsub>
 8009c18:	a31d      	add	r3, pc, #116	; (adr r3, 8009c90 <__ieee754_atan2+0x180>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	e016      	b.n	8009c4e <__ieee754_atan2+0x13e>
 8009c20:	a51d      	add	r5, pc, #116	; (adr r5, 8009c98 <__ieee754_atan2+0x188>)
 8009c22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c26:	e7ea      	b.n	8009bfe <__ieee754_atan2+0xee>
 8009c28:	2400      	movs	r4, #0
 8009c2a:	2500      	movs	r5, #0
 8009c2c:	e7e7      	b.n	8009bfe <__ieee754_atan2+0xee>
 8009c2e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009c32:	461d      	mov	r5, r3
 8009c34:	e7ab      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009c36:	a314      	add	r3, pc, #80	; (adr r3, 8009c88 <__ieee754_atan2+0x178>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	f7f6 fafe 	bl	8000240 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	a111      	add	r1, pc, #68	; (adr r1, 8009c90 <__ieee754_atan2+0x180>)
 8009c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4e:	f7f6 faf7 	bl	8000240 <__aeabi_dsub>
 8009c52:	e77f      	b.n	8009b54 <__ieee754_atan2+0x44>
 8009c54:	a50e      	add	r5, pc, #56	; (adr r5, 8009c90 <__ieee754_atan2+0x180>)
 8009c56:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c5a:	e798      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009c5c:	a510      	add	r5, pc, #64	; (adr r5, 8009ca0 <__ieee754_atan2+0x190>)
 8009c5e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c62:	e794      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009c64:	2400      	movs	r4, #0
 8009c66:	2500      	movs	r5, #0
 8009c68:	e791      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009c6a:	a50b      	add	r5, pc, #44	; (adr r5, 8009c98 <__ieee754_atan2+0x188>)
 8009c6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c70:	e78d      	b.n	8009b8e <__ieee754_atan2+0x7e>
 8009c72:	bf00      	nop
 8009c74:	f3af 8000 	nop.w
 8009c78:	54442d18 	.word	0x54442d18
 8009c7c:	c00921fb 	.word	0xc00921fb
 8009c80:	54442d18 	.word	0x54442d18
 8009c84:	bff921fb 	.word	0xbff921fb
 8009c88:	33145c07 	.word	0x33145c07
 8009c8c:	3ca1a626 	.word	0x3ca1a626
 8009c90:	54442d18 	.word	0x54442d18
 8009c94:	400921fb 	.word	0x400921fb
 8009c98:	54442d18 	.word	0x54442d18
 8009c9c:	3ff921fb 	.word	0x3ff921fb
 8009ca0:	54442d18 	.word	0x54442d18
 8009ca4:	3fe921fb 	.word	0x3fe921fb
 8009ca8:	0800af10 	.word	0x0800af10
 8009cac:	0800af28 	.word	0x0800af28
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	00000000 	.word	0x00000000

08009cb8 <__ieee754_pow>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	b093      	sub	sp, #76	; 0x4c
 8009cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cc2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8009cc6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009cca:	ea55 0302 	orrs.w	r3, r5, r2
 8009cce:	4607      	mov	r7, r0
 8009cd0:	4688      	mov	r8, r1
 8009cd2:	f000 84bf 	beq.w	800a654 <__ieee754_pow+0x99c>
 8009cd6:	4b7e      	ldr	r3, [pc, #504]	; (8009ed0 <__ieee754_pow+0x218>)
 8009cd8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	4689      	mov	r9, r1
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	dc09      	bgt.n	8009cf8 <__ieee754_pow+0x40>
 8009ce4:	d103      	bne.n	8009cee <__ieee754_pow+0x36>
 8009ce6:	b978      	cbnz	r0, 8009d08 <__ieee754_pow+0x50>
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	dd02      	ble.n	8009cf2 <__ieee754_pow+0x3a>
 8009cec:	e00c      	b.n	8009d08 <__ieee754_pow+0x50>
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	dc02      	bgt.n	8009cf8 <__ieee754_pow+0x40>
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	d10e      	bne.n	8009d14 <__ieee754_pow+0x5c>
 8009cf6:	b16a      	cbz	r2, 8009d14 <__ieee754_pow+0x5c>
 8009cf8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009cfc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d00:	ea54 030a 	orrs.w	r3, r4, sl
 8009d04:	f000 84a6 	beq.w	800a654 <__ieee754_pow+0x99c>
 8009d08:	4872      	ldr	r0, [pc, #456]	; (8009ed4 <__ieee754_pow+0x21c>)
 8009d0a:	b013      	add	sp, #76	; 0x4c
 8009d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	f000 bd9a 	b.w	800a848 <nan>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	da39      	bge.n	8009d8e <__ieee754_pow+0xd6>
 8009d1a:	4b6f      	ldr	r3, [pc, #444]	; (8009ed8 <__ieee754_pow+0x220>)
 8009d1c:	429d      	cmp	r5, r3
 8009d1e:	dc54      	bgt.n	8009dca <__ieee754_pow+0x112>
 8009d20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009d24:	429d      	cmp	r5, r3
 8009d26:	f340 84a6 	ble.w	800a676 <__ieee754_pow+0x9be>
 8009d2a:	152b      	asrs	r3, r5, #20
 8009d2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d30:	2b14      	cmp	r3, #20
 8009d32:	dd0f      	ble.n	8009d54 <__ieee754_pow+0x9c>
 8009d34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009d38:	fa22 f103 	lsr.w	r1, r2, r3
 8009d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d40:	4293      	cmp	r3, r2
 8009d42:	f040 8498 	bne.w	800a676 <__ieee754_pow+0x9be>
 8009d46:	f001 0101 	and.w	r1, r1, #1
 8009d4a:	f1c1 0302 	rsb	r3, r1, #2
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	b182      	cbz	r2, 8009d74 <__ieee754_pow+0xbc>
 8009d52:	e05e      	b.n	8009e12 <__ieee754_pow+0x15a>
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	d15a      	bne.n	8009e0e <__ieee754_pow+0x156>
 8009d58:	f1c3 0314 	rsb	r3, r3, #20
 8009d5c:	fa45 f103 	asr.w	r1, r5, r3
 8009d60:	fa01 f303 	lsl.w	r3, r1, r3
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	f040 8483 	bne.w	800a670 <__ieee754_pow+0x9b8>
 8009d6a:	f001 0101 	and.w	r1, r1, #1
 8009d6e:	f1c1 0302 	rsb	r3, r1, #2
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4b59      	ldr	r3, [pc, #356]	; (8009edc <__ieee754_pow+0x224>)
 8009d76:	429d      	cmp	r5, r3
 8009d78:	d130      	bne.n	8009ddc <__ieee754_pow+0x124>
 8009d7a:	2e00      	cmp	r6, #0
 8009d7c:	f280 8474 	bge.w	800a668 <__ieee754_pow+0x9b0>
 8009d80:	463a      	mov	r2, r7
 8009d82:	4643      	mov	r3, r8
 8009d84:	2000      	movs	r0, #0
 8009d86:	4955      	ldr	r1, [pc, #340]	; (8009edc <__ieee754_pow+0x224>)
 8009d88:	f7f6 fd3c 	bl	8000804 <__aeabi_ddiv>
 8009d8c:	e02f      	b.n	8009dee <__ieee754_pow+0x136>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	2a00      	cmp	r2, #0
 8009d94:	d13d      	bne.n	8009e12 <__ieee754_pow+0x15a>
 8009d96:	4b4e      	ldr	r3, [pc, #312]	; (8009ed0 <__ieee754_pow+0x218>)
 8009d98:	429d      	cmp	r5, r3
 8009d9a:	d1eb      	bne.n	8009d74 <__ieee754_pow+0xbc>
 8009d9c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009da0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009da4:	ea53 030a 	orrs.w	r3, r3, sl
 8009da8:	f000 8454 	beq.w	800a654 <__ieee754_pow+0x99c>
 8009dac:	4b4c      	ldr	r3, [pc, #304]	; (8009ee0 <__ieee754_pow+0x228>)
 8009dae:	429c      	cmp	r4, r3
 8009db0:	dd0d      	ble.n	8009dce <__ieee754_pow+0x116>
 8009db2:	2e00      	cmp	r6, #0
 8009db4:	f280 8454 	bge.w	800a660 <__ieee754_pow+0x9a8>
 8009db8:	f04f 0b00 	mov.w	fp, #0
 8009dbc:	f04f 0c00 	mov.w	ip, #0
 8009dc0:	4658      	mov	r0, fp
 8009dc2:	4661      	mov	r1, ip
 8009dc4:	b013      	add	sp, #76	; 0x4c
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	2302      	movs	r3, #2
 8009dcc:	e7e0      	b.n	8009d90 <__ieee754_pow+0xd8>
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	daf2      	bge.n	8009db8 <__ieee754_pow+0x100>
 8009dd2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009dd6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009dda:	e7f1      	b.n	8009dc0 <__ieee754_pow+0x108>
 8009ddc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8009de0:	d108      	bne.n	8009df4 <__ieee754_pow+0x13c>
 8009de2:	463a      	mov	r2, r7
 8009de4:	4643      	mov	r3, r8
 8009de6:	4638      	mov	r0, r7
 8009de8:	4641      	mov	r1, r8
 8009dea:	f7f6 fbe1 	bl	80005b0 <__aeabi_dmul>
 8009dee:	4683      	mov	fp, r0
 8009df0:	468c      	mov	ip, r1
 8009df2:	e7e5      	b.n	8009dc0 <__ieee754_pow+0x108>
 8009df4:	4b3b      	ldr	r3, [pc, #236]	; (8009ee4 <__ieee754_pow+0x22c>)
 8009df6:	429e      	cmp	r6, r3
 8009df8:	d10b      	bne.n	8009e12 <__ieee754_pow+0x15a>
 8009dfa:	f1b9 0f00 	cmp.w	r9, #0
 8009dfe:	db08      	blt.n	8009e12 <__ieee754_pow+0x15a>
 8009e00:	4638      	mov	r0, r7
 8009e02:	4641      	mov	r1, r8
 8009e04:	b013      	add	sp, #76	; 0x4c
 8009e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f000 bc6b 	b.w	800a6e4 <__ieee754_sqrt>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4638      	mov	r0, r7
 8009e14:	4641      	mov	r1, r8
 8009e16:	f7ff fd9d 	bl	8009954 <fabs>
 8009e1a:	4683      	mov	fp, r0
 8009e1c:	468c      	mov	ip, r1
 8009e1e:	f1ba 0f00 	cmp.w	sl, #0
 8009e22:	d129      	bne.n	8009e78 <__ieee754_pow+0x1c0>
 8009e24:	b124      	cbz	r4, 8009e30 <__ieee754_pow+0x178>
 8009e26:	4b2d      	ldr	r3, [pc, #180]	; (8009edc <__ieee754_pow+0x224>)
 8009e28:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d123      	bne.n	8009e78 <__ieee754_pow+0x1c0>
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	da07      	bge.n	8009e44 <__ieee754_pow+0x18c>
 8009e34:	465a      	mov	r2, fp
 8009e36:	4663      	mov	r3, ip
 8009e38:	2000      	movs	r0, #0
 8009e3a:	4928      	ldr	r1, [pc, #160]	; (8009edc <__ieee754_pow+0x224>)
 8009e3c:	f7f6 fce2 	bl	8000804 <__aeabi_ddiv>
 8009e40:	4683      	mov	fp, r0
 8009e42:	468c      	mov	ip, r1
 8009e44:	f1b9 0f00 	cmp.w	r9, #0
 8009e48:	daba      	bge.n	8009dc0 <__ieee754_pow+0x108>
 8009e4a:	9b00      	ldr	r3, [sp, #0]
 8009e4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e54:	4323      	orrs	r3, r4
 8009e56:	d108      	bne.n	8009e6a <__ieee754_pow+0x1b2>
 8009e58:	465a      	mov	r2, fp
 8009e5a:	4663      	mov	r3, ip
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	4661      	mov	r1, ip
 8009e60:	f7f6 f9ee 	bl	8000240 <__aeabi_dsub>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e78e      	b.n	8009d88 <__ieee754_pow+0xd0>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d1a7      	bne.n	8009dc0 <__ieee754_pow+0x108>
 8009e70:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009e74:	469c      	mov	ip, r3
 8009e76:	e7a3      	b.n	8009dc0 <__ieee754_pow+0x108>
 8009e78:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e82:	9b00      	ldr	r3, [sp, #0]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	d104      	bne.n	8009e92 <__ieee754_pow+0x1da>
 8009e88:	463a      	mov	r2, r7
 8009e8a:	4643      	mov	r3, r8
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	4641      	mov	r1, r8
 8009e90:	e7e6      	b.n	8009e60 <__ieee754_pow+0x1a8>
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <__ieee754_pow+0x230>)
 8009e94:	429d      	cmp	r5, r3
 8009e96:	f340 80f9 	ble.w	800a08c <__ieee754_pow+0x3d4>
 8009e9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <__ieee754_pow+0x228>)
 8009ea2:	dd09      	ble.n	8009eb8 <__ieee754_pow+0x200>
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	dc0c      	bgt.n	8009ec2 <__ieee754_pow+0x20a>
 8009ea8:	2e00      	cmp	r6, #0
 8009eaa:	da85      	bge.n	8009db8 <__ieee754_pow+0x100>
 8009eac:	a306      	add	r3, pc, #24	; (adr r3, 8009ec8 <__ieee754_pow+0x210>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	e798      	b.n	8009dea <__ieee754_pow+0x132>
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	dbf5      	blt.n	8009ea8 <__ieee754_pow+0x1f0>
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <__ieee754_pow+0x224>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	dd14      	ble.n	8009eec <__ieee754_pow+0x234>
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	dcf2      	bgt.n	8009eac <__ieee754_pow+0x1f4>
 8009ec6:	e777      	b.n	8009db8 <__ieee754_pow+0x100>
 8009ec8:	8800759c 	.word	0x8800759c
 8009ecc:	7e37e43c 	.word	0x7e37e43c
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	0800ad60 	.word	0x0800ad60
 8009ed8:	433fffff 	.word	0x433fffff
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	3fefffff 	.word	0x3fefffff
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	41e00000 	.word	0x41e00000
 8009eec:	4661      	mov	r1, ip
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4658      	mov	r0, fp
 8009ef2:	4b61      	ldr	r3, [pc, #388]	; (800a078 <__ieee754_pow+0x3c0>)
 8009ef4:	f7f6 f9a4 	bl	8000240 <__aeabi_dsub>
 8009ef8:	a355      	add	r3, pc, #340	; (adr r3, 800a050 <__ieee754_pow+0x398>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	f7f6 fb55 	bl	80005b0 <__aeabi_dmul>
 8009f06:	a354      	add	r3, pc, #336	; (adr r3, 800a058 <__ieee754_pow+0x3a0>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	460f      	mov	r7, r1
 8009f10:	4620      	mov	r0, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	f7f6 fb4c 	bl	80005b0 <__aeabi_dmul>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	4682      	mov	sl, r0
 8009f1c:	468b      	mov	fp, r1
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	4b56      	ldr	r3, [pc, #344]	; (800a07c <__ieee754_pow+0x3c4>)
 8009f24:	f7f6 fb44 	bl	80005b0 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	a14c      	add	r1, pc, #304	; (adr r1, 800a060 <__ieee754_pow+0x3a8>)
 8009f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f32:	f7f6 f985 	bl	8000240 <__aeabi_dsub>
 8009f36:	4622      	mov	r2, r4
 8009f38:	462b      	mov	r3, r5
 8009f3a:	f7f6 fb39 	bl	80005b0 <__aeabi_dmul>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	2000      	movs	r0, #0
 8009f44:	494e      	ldr	r1, [pc, #312]	; (800a080 <__ieee754_pow+0x3c8>)
 8009f46:	f7f6 f97b 	bl	8000240 <__aeabi_dsub>
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	4680      	mov	r8, r0
 8009f50:	4689      	mov	r9, r1
 8009f52:	4620      	mov	r0, r4
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 fb2b 	bl	80005b0 <__aeabi_dmul>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 fb25 	bl	80005b0 <__aeabi_dmul>
 8009f66:	a340      	add	r3, pc, #256	; (adr r3, 800a068 <__ieee754_pow+0x3b0>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f7f6 fb20 	bl	80005b0 <__aeabi_dmul>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4650      	mov	r0, sl
 8009f76:	4659      	mov	r1, fp
 8009f78:	f7f6 f962 	bl	8000240 <__aeabi_dsub>
 8009f7c:	f04f 0a00 	mov.w	sl, #0
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4604      	mov	r4, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f7f6 f95a 	bl	8000244 <__adddf3>
 8009f90:	4632      	mov	r2, r6
 8009f92:	463b      	mov	r3, r7
 8009f94:	4650      	mov	r0, sl
 8009f96:	468b      	mov	fp, r1
 8009f98:	f7f6 f952 	bl	8000240 <__aeabi_dsub>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 f94c 	bl	8000240 <__aeabi_dsub>
 8009fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f04f 0600 	mov.w	r6, #0
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	bf0c      	ite	eq
 8009fbe:	4b31      	ldreq	r3, [pc, #196]	; (800a084 <__ieee754_pow+0x3cc>)
 8009fc0:	4b2d      	ldrne	r3, [pc, #180]	; (800a078 <__ieee754_pow+0x3c0>)
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fca:	e9cd 2300 	strd	r2, r3, [sp]
 8009fce:	4632      	mov	r2, r6
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	f7f6 f935 	bl	8000240 <__aeabi_dsub>
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	465b      	mov	r3, fp
 8009fda:	f7f6 fae9 	bl	80005b0 <__aeabi_dmul>
 8009fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 fae1 	bl	80005b0 <__aeabi_dmul>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	f7f6 f925 	bl	8000244 <__adddf3>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4680      	mov	r8, r0
 800a000:	4689      	mov	r9, r1
 800a002:	4650      	mov	r0, sl
 800a004:	4659      	mov	r1, fp
 800a006:	f7f6 fad3 	bl	80005b0 <__aeabi_dmul>
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	460b      	mov	r3, r1
 800a010:	4602      	mov	r2, r0
 800a012:	4649      	mov	r1, r9
 800a014:	4640      	mov	r0, r8
 800a016:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a01a:	f7f6 f913 	bl	8000244 <__adddf3>
 800a01e:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <__ieee754_pow+0x3d0>)
 800a020:	4682      	mov	sl, r0
 800a022:	4299      	cmp	r1, r3
 800a024:	460f      	mov	r7, r1
 800a026:	460e      	mov	r6, r1
 800a028:	f340 82ed 	ble.w	800a606 <__ieee754_pow+0x94e>
 800a02c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a030:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a034:	4303      	orrs	r3, r0
 800a036:	f000 81e7 	beq.w	800a408 <__ieee754_pow+0x750>
 800a03a:	a30d      	add	r3, pc, #52	; (adr r3, 800a070 <__ieee754_pow+0x3b8>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a044:	f7f6 fab4 	bl	80005b0 <__aeabi_dmul>
 800a048:	a309      	add	r3, pc, #36	; (adr r3, 800a070 <__ieee754_pow+0x3b8>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	e6cc      	b.n	8009dea <__ieee754_pow+0x132>
 800a050:	60000000 	.word	0x60000000
 800a054:	3ff71547 	.word	0x3ff71547
 800a058:	f85ddf44 	.word	0xf85ddf44
 800a05c:	3e54ae0b 	.word	0x3e54ae0b
 800a060:	55555555 	.word	0x55555555
 800a064:	3fd55555 	.word	0x3fd55555
 800a068:	652b82fe 	.word	0x652b82fe
 800a06c:	3ff71547 	.word	0x3ff71547
 800a070:	8800759c 	.word	0x8800759c
 800a074:	7e37e43c 	.word	0x7e37e43c
 800a078:	3ff00000 	.word	0x3ff00000
 800a07c:	3fd00000 	.word	0x3fd00000
 800a080:	3fe00000 	.word	0x3fe00000
 800a084:	bff00000 	.word	0xbff00000
 800a088:	408fffff 	.word	0x408fffff
 800a08c:	4bd4      	ldr	r3, [pc, #848]	; (800a3e0 <__ieee754_pow+0x728>)
 800a08e:	2200      	movs	r2, #0
 800a090:	ea09 0303 	and.w	r3, r9, r3
 800a094:	b943      	cbnz	r3, 800a0a8 <__ieee754_pow+0x3f0>
 800a096:	4658      	mov	r0, fp
 800a098:	4661      	mov	r1, ip
 800a09a:	4bd2      	ldr	r3, [pc, #840]	; (800a3e4 <__ieee754_pow+0x72c>)
 800a09c:	f7f6 fa88 	bl	80005b0 <__aeabi_dmul>
 800a0a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a0a4:	4683      	mov	fp, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	1523      	asrs	r3, r4, #20
 800a0aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0ae:	4413      	add	r3, r2
 800a0b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0b2:	4bcd      	ldr	r3, [pc, #820]	; (800a3e8 <__ieee754_pow+0x730>)
 800a0b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a0b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a0c2:	dd08      	ble.n	800a0d6 <__ieee754_pow+0x41e>
 800a0c4:	4bc9      	ldr	r3, [pc, #804]	; (800a3ec <__ieee754_pow+0x734>)
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	f340 819c 	ble.w	800a404 <__ieee754_pow+0x74c>
 800a0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	00f3      	lsls	r3, r6, #3
 800a0da:	930d      	str	r3, [sp, #52]	; 0x34
 800a0dc:	4bc4      	ldr	r3, [pc, #784]	; (800a3f0 <__ieee754_pow+0x738>)
 800a0de:	4658      	mov	r0, fp
 800a0e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	f7f6 f8a5 	bl	8000240 <__aeabi_dsub>
 800a0f6:	46da      	mov	sl, fp
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a100:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a104:	f7f6 f89e 	bl	8000244 <__adddf3>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	2000      	movs	r0, #0
 800a10e:	49b9      	ldr	r1, [pc, #740]	; (800a3f4 <__ieee754_pow+0x73c>)
 800a110:	f7f6 fb78 	bl	8000804 <__aeabi_ddiv>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a11c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a120:	f7f6 fa46 	bl	80005b0 <__aeabi_dmul>
 800a124:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a128:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a12c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a130:	2300      	movs	r3, #0
 800a132:	2200      	movs	r2, #0
 800a134:	46ab      	mov	fp, r5
 800a136:	106d      	asrs	r5, r5, #1
 800a138:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a142:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a146:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a14a:	4640      	mov	r0, r8
 800a14c:	4649      	mov	r1, r9
 800a14e:	4614      	mov	r4, r2
 800a150:	461d      	mov	r5, r3
 800a152:	f7f6 fa2d 	bl	80005b0 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a15e:	f7f6 f86f 	bl	8000240 <__aeabi_dsub>
 800a162:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a166:	4606      	mov	r6, r0
 800a168:	460f      	mov	r7, r1
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7f6 f867 	bl	8000240 <__aeabi_dsub>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4650      	mov	r0, sl
 800a178:	4659      	mov	r1, fp
 800a17a:	f7f6 f861 	bl	8000240 <__aeabi_dsub>
 800a17e:	4642      	mov	r2, r8
 800a180:	464b      	mov	r3, r9
 800a182:	f7f6 fa15 	bl	80005b0 <__aeabi_dmul>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f857 	bl	8000240 <__aeabi_dsub>
 800a192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a196:	f7f6 fa0b 	bl	80005b0 <__aeabi_dmul>
 800a19a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a19e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f7f6 fa03 	bl	80005b0 <__aeabi_dmul>
 800a1aa:	a37b      	add	r3, pc, #492	; (adr r3, 800a398 <__ieee754_pow+0x6e0>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	f7f6 f9fc 	bl	80005b0 <__aeabi_dmul>
 800a1b8:	a379      	add	r3, pc, #484	; (adr r3, 800a3a0 <__ieee754_pow+0x6e8>)
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	f7f6 f841 	bl	8000244 <__adddf3>
 800a1c2:	4622      	mov	r2, r4
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	f7f6 f9f3 	bl	80005b0 <__aeabi_dmul>
 800a1ca:	a377      	add	r3, pc, #476	; (adr r3, 800a3a8 <__ieee754_pow+0x6f0>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f7f6 f838 	bl	8000244 <__adddf3>
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	f7f6 f9ea 	bl	80005b0 <__aeabi_dmul>
 800a1dc:	a374      	add	r3, pc, #464	; (adr r3, 800a3b0 <__ieee754_pow+0x6f8>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f82f 	bl	8000244 <__adddf3>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	f7f6 f9e1 	bl	80005b0 <__aeabi_dmul>
 800a1ee:	a372      	add	r3, pc, #456	; (adr r3, 800a3b8 <__ieee754_pow+0x700>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f7f6 f826 	bl	8000244 <__adddf3>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	f7f6 f9d8 	bl	80005b0 <__aeabi_dmul>
 800a200:	a36f      	add	r3, pc, #444	; (adr r3, 800a3c0 <__ieee754_pow+0x708>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 f81d 	bl	8000244 <__adddf3>
 800a20a:	4622      	mov	r2, r4
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	462b      	mov	r3, r5
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f9cb 	bl	80005b0 <__aeabi_dmul>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 f9c5 	bl	80005b0 <__aeabi_dmul>
 800a226:	4604      	mov	r4, r0
 800a228:	460d      	mov	r5, r1
 800a22a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	f7f6 f807 	bl	8000244 <__adddf3>
 800a236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a23a:	f7f6 f9b9 	bl	80005b0 <__aeabi_dmul>
 800a23e:	4622      	mov	r2, r4
 800a240:	462b      	mov	r3, r5
 800a242:	f7f5 ffff 	bl	8000244 <__adddf3>
 800a246:	4642      	mov	r2, r8
 800a248:	4606      	mov	r6, r0
 800a24a:	460f      	mov	r7, r1
 800a24c:	464b      	mov	r3, r9
 800a24e:	4640      	mov	r0, r8
 800a250:	4649      	mov	r1, r9
 800a252:	f7f6 f9ad 	bl	80005b0 <__aeabi_dmul>
 800a256:	2200      	movs	r2, #0
 800a258:	4b67      	ldr	r3, [pc, #412]	; (800a3f8 <__ieee754_pow+0x740>)
 800a25a:	4682      	mov	sl, r0
 800a25c:	468b      	mov	fp, r1
 800a25e:	f7f5 fff1 	bl	8000244 <__adddf3>
 800a262:	4632      	mov	r2, r6
 800a264:	463b      	mov	r3, r7
 800a266:	f7f5 ffed 	bl	8000244 <__adddf3>
 800a26a:	9c04      	ldr	r4, [sp, #16]
 800a26c:	460d      	mov	r5, r1
 800a26e:	4622      	mov	r2, r4
 800a270:	460b      	mov	r3, r1
 800a272:	4640      	mov	r0, r8
 800a274:	4649      	mov	r1, r9
 800a276:	f7f6 f99b 	bl	80005b0 <__aeabi_dmul>
 800a27a:	2200      	movs	r2, #0
 800a27c:	4680      	mov	r8, r0
 800a27e:	4689      	mov	r9, r1
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	4b5c      	ldr	r3, [pc, #368]	; (800a3f8 <__ieee754_pow+0x740>)
 800a286:	f7f5 ffdb 	bl	8000240 <__aeabi_dsub>
 800a28a:	4652      	mov	r2, sl
 800a28c:	465b      	mov	r3, fp
 800a28e:	f7f5 ffd7 	bl	8000240 <__aeabi_dsub>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f5 ffd1 	bl	8000240 <__aeabi_dsub>
 800a29e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2a2:	f7f6 f985 	bl	80005b0 <__aeabi_dmul>
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2b0:	462b      	mov	r3, r5
 800a2b2:	f7f6 f97d 	bl	80005b0 <__aeabi_dmul>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 ffc1 	bl	8000244 <__adddf3>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	f7f5 ffb9 	bl	8000244 <__adddf3>
 800a2d2:	a33d      	add	r3, pc, #244	; (adr r3, 800a3c8 <__ieee754_pow+0x710>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	9c04      	ldr	r4, [sp, #16]
 800a2da:	460d      	mov	r5, r1
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7f6 f967 	bl	80005b0 <__aeabi_dmul>
 800a2e2:	4642      	mov	r2, r8
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f7f5 ffa7 	bl	8000240 <__aeabi_dsub>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	f7f5 ffa1 	bl	8000240 <__aeabi_dsub>
 800a2fe:	a334      	add	r3, pc, #208	; (adr r3, 800a3d0 <__ieee754_pow+0x718>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f6 f954 	bl	80005b0 <__aeabi_dmul>
 800a308:	a333      	add	r3, pc, #204	; (adr r3, 800a3d8 <__ieee754_pow+0x720>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	4606      	mov	r6, r0
 800a310:	460f      	mov	r7, r1
 800a312:	4620      	mov	r0, r4
 800a314:	4629      	mov	r1, r5
 800a316:	f7f6 f94b 	bl	80005b0 <__aeabi_dmul>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	4630      	mov	r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	f7f5 ff8f 	bl	8000244 <__adddf3>
 800a326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a328:	4b34      	ldr	r3, [pc, #208]	; (800a3fc <__ieee754_pow+0x744>)
 800a32a:	4413      	add	r3, r2
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ff88 	bl	8000244 <__adddf3>
 800a334:	4680      	mov	r8, r0
 800a336:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a338:	4689      	mov	r9, r1
 800a33a:	f7f6 f8cf 	bl	80004dc <__aeabi_i2d>
 800a33e:	4604      	mov	r4, r0
 800a340:	460d      	mov	r5, r1
 800a342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a344:	4b2e      	ldr	r3, [pc, #184]	; (800a400 <__ieee754_pow+0x748>)
 800a346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a34a:	4413      	add	r3, r2
 800a34c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a350:	4642      	mov	r2, r8
 800a352:	464b      	mov	r3, r9
 800a354:	f7f5 ff76 	bl	8000244 <__adddf3>
 800a358:	4632      	mov	r2, r6
 800a35a:	463b      	mov	r3, r7
 800a35c:	f7f5 ff72 	bl	8000244 <__adddf3>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f5 ff6e 	bl	8000244 <__adddf3>
 800a368:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a36c:	4622      	mov	r2, r4
 800a36e:	462b      	mov	r3, r5
 800a370:	4650      	mov	r0, sl
 800a372:	468b      	mov	fp, r1
 800a374:	f7f5 ff64 	bl	8000240 <__aeabi_dsub>
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	f7f5 ff60 	bl	8000240 <__aeabi_dsub>
 800a380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a384:	f7f5 ff5c 	bl	8000240 <__aeabi_dsub>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	e608      	b.n	8009fa4 <__ieee754_pow+0x2ec>
 800a392:	bf00      	nop
 800a394:	f3af 8000 	nop.w
 800a398:	4a454eef 	.word	0x4a454eef
 800a39c:	3fca7e28 	.word	0x3fca7e28
 800a3a0:	93c9db65 	.word	0x93c9db65
 800a3a4:	3fcd864a 	.word	0x3fcd864a
 800a3a8:	a91d4101 	.word	0xa91d4101
 800a3ac:	3fd17460 	.word	0x3fd17460
 800a3b0:	518f264d 	.word	0x518f264d
 800a3b4:	3fd55555 	.word	0x3fd55555
 800a3b8:	db6fabff 	.word	0xdb6fabff
 800a3bc:	3fdb6db6 	.word	0x3fdb6db6
 800a3c0:	33333303 	.word	0x33333303
 800a3c4:	3fe33333 	.word	0x3fe33333
 800a3c8:	e0000000 	.word	0xe0000000
 800a3cc:	3feec709 	.word	0x3feec709
 800a3d0:	dc3a03fd 	.word	0xdc3a03fd
 800a3d4:	3feec709 	.word	0x3feec709
 800a3d8:	145b01f5 	.word	0x145b01f5
 800a3dc:	be3e2fe0 	.word	0xbe3e2fe0
 800a3e0:	7ff00000 	.word	0x7ff00000
 800a3e4:	43400000 	.word	0x43400000
 800a3e8:	0003988e 	.word	0x0003988e
 800a3ec:	000bb679 	.word	0x000bb679
 800a3f0:	0800af40 	.word	0x0800af40
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	40080000 	.word	0x40080000
 800a3fc:	0800af60 	.word	0x0800af60
 800a400:	0800af50 	.word	0x0800af50
 800a404:	2601      	movs	r6, #1
 800a406:	e667      	b.n	800a0d8 <__ieee754_pow+0x420>
 800a408:	a39d      	add	r3, pc, #628	; (adr r3, 800a680 <__ieee754_pow+0x9c8>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	4640      	mov	r0, r8
 800a410:	4649      	mov	r1, r9
 800a412:	f7f5 ff17 	bl	8000244 <__adddf3>
 800a416:	4622      	mov	r2, r4
 800a418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a41c:	462b      	mov	r3, r5
 800a41e:	4650      	mov	r0, sl
 800a420:	4639      	mov	r1, r7
 800a422:	f7f5 ff0d 	bl	8000240 <__aeabi_dsub>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a42e:	f7f6 fb4f 	bl	8000ad0 <__aeabi_dcmpgt>
 800a432:	2800      	cmp	r0, #0
 800a434:	f47f ae01 	bne.w	800a03a <__ieee754_pow+0x382>
 800a438:	4aa5      	ldr	r2, [pc, #660]	; (800a6d0 <__ieee754_pow+0xa18>)
 800a43a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a43e:	4293      	cmp	r3, r2
 800a440:	f340 8103 	ble.w	800a64a <__ieee754_pow+0x992>
 800a444:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a448:	2000      	movs	r0, #0
 800a44a:	151b      	asrs	r3, r3, #20
 800a44c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a450:	fa4a f303 	asr.w	r3, sl, r3
 800a454:	4433      	add	r3, r6
 800a456:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a45a:	4f9e      	ldr	r7, [pc, #632]	; (800a6d4 <__ieee754_pow+0xa1c>)
 800a45c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a460:	4117      	asrs	r7, r2
 800a462:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a466:	ea23 0107 	bic.w	r1, r3, r7
 800a46a:	f1c2 0214 	rsb	r2, r2, #20
 800a46e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a472:	460b      	mov	r3, r1
 800a474:	fa4a fa02 	asr.w	sl, sl, r2
 800a478:	2e00      	cmp	r6, #0
 800a47a:	4602      	mov	r2, r0
 800a47c:	4629      	mov	r1, r5
 800a47e:	4620      	mov	r0, r4
 800a480:	bfb8      	it	lt
 800a482:	f1ca 0a00 	rsblt	sl, sl, #0
 800a486:	f7f5 fedb 	bl	8000240 <__aeabi_dsub>
 800a48a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a492:	2400      	movs	r4, #0
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	f7f5 fed4 	bl	8000244 <__adddf3>
 800a49c:	a37a      	add	r3, pc, #488	; (adr r3, 800a688 <__ieee754_pow+0x9d0>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	f7f6 f883 	bl	80005b0 <__aeabi_dmul>
 800a4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	f7f5 fec3 	bl	8000240 <__aeabi_dsub>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f5 febd 	bl	8000240 <__aeabi_dsub>
 800a4c6:	a372      	add	r3, pc, #456	; (adr r3, 800a690 <__ieee754_pow+0x9d8>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f6 f870 	bl	80005b0 <__aeabi_dmul>
 800a4d0:	a371      	add	r3, pc, #452	; (adr r3, 800a698 <__ieee754_pow+0x9e0>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	4689      	mov	r9, r1
 800a4da:	4620      	mov	r0, r4
 800a4dc:	4629      	mov	r1, r5
 800a4de:	f7f6 f867 	bl	80005b0 <__aeabi_dmul>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	f7f5 feab 	bl	8000244 <__adddf3>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	460d      	mov	r5, r1
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f5 fea3 	bl	8000244 <__adddf3>
 800a4fe:	4632      	mov	r2, r6
 800a500:	463b      	mov	r3, r7
 800a502:	4680      	mov	r8, r0
 800a504:	4689      	mov	r9, r1
 800a506:	f7f5 fe9b 	bl	8000240 <__aeabi_dsub>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	f7f5 fe95 	bl	8000240 <__aeabi_dsub>
 800a516:	4642      	mov	r2, r8
 800a518:	4606      	mov	r6, r0
 800a51a:	460f      	mov	r7, r1
 800a51c:	464b      	mov	r3, r9
 800a51e:	4640      	mov	r0, r8
 800a520:	4649      	mov	r1, r9
 800a522:	f7f6 f845 	bl	80005b0 <__aeabi_dmul>
 800a526:	a35e      	add	r3, pc, #376	; (adr r3, 800a6a0 <__ieee754_pow+0x9e8>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	f7f6 f83e 	bl	80005b0 <__aeabi_dmul>
 800a534:	a35c      	add	r3, pc, #368	; (adr r3, 800a6a8 <__ieee754_pow+0x9f0>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 fe81 	bl	8000240 <__aeabi_dsub>
 800a53e:	4622      	mov	r2, r4
 800a540:	462b      	mov	r3, r5
 800a542:	f7f6 f835 	bl	80005b0 <__aeabi_dmul>
 800a546:	a35a      	add	r3, pc, #360	; (adr r3, 800a6b0 <__ieee754_pow+0x9f8>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f5 fe7a 	bl	8000244 <__adddf3>
 800a550:	4622      	mov	r2, r4
 800a552:	462b      	mov	r3, r5
 800a554:	f7f6 f82c 	bl	80005b0 <__aeabi_dmul>
 800a558:	a357      	add	r3, pc, #348	; (adr r3, 800a6b8 <__ieee754_pow+0xa00>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f7f5 fe6f 	bl	8000240 <__aeabi_dsub>
 800a562:	4622      	mov	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	f7f6 f823 	bl	80005b0 <__aeabi_dmul>
 800a56a:	a355      	add	r3, pc, #340	; (adr r3, 800a6c0 <__ieee754_pow+0xa08>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f5 fe68 	bl	8000244 <__adddf3>
 800a574:	4622      	mov	r2, r4
 800a576:	462b      	mov	r3, r5
 800a578:	f7f6 f81a 	bl	80005b0 <__aeabi_dmul>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4640      	mov	r0, r8
 800a582:	4649      	mov	r1, r9
 800a584:	f7f5 fe5c 	bl	8000240 <__aeabi_dsub>
 800a588:	4604      	mov	r4, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	f7f6 f80c 	bl	80005b0 <__aeabi_dmul>
 800a598:	2200      	movs	r2, #0
 800a59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	f7f5 fe4b 	bl	8000240 <__aeabi_dsub>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b2:	f7f6 f927 	bl	8000804 <__aeabi_ddiv>
 800a5b6:	4632      	mov	r2, r6
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	463b      	mov	r3, r7
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f5 fff5 	bl	80005b0 <__aeabi_dmul>
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	f7f5 fe3b 	bl	8000244 <__adddf3>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	f7f5 fe33 	bl	8000240 <__aeabi_dsub>
 800a5da:	4642      	mov	r2, r8
 800a5dc:	464b      	mov	r3, r9
 800a5de:	f7f5 fe2f 	bl	8000240 <__aeabi_dsub>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	493b      	ldr	r1, [pc, #236]	; (800a6d8 <__ieee754_pow+0xa20>)
 800a5ea:	f7f5 fe29 	bl	8000240 <__aeabi_dsub>
 800a5ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a5f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a5f6:	da2b      	bge.n	800a650 <__ieee754_pow+0x998>
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	f000 f9b5 	bl	800a968 <scalbn>
 800a5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a602:	f7ff bbf2 	b.w	8009dea <__ieee754_pow+0x132>
 800a606:	4b35      	ldr	r3, [pc, #212]	; (800a6dc <__ieee754_pow+0xa24>)
 800a608:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a60c:	429f      	cmp	r7, r3
 800a60e:	f77f af13 	ble.w	800a438 <__ieee754_pow+0x780>
 800a612:	4b33      	ldr	r3, [pc, #204]	; (800a6e0 <__ieee754_pow+0xa28>)
 800a614:	440b      	add	r3, r1
 800a616:	4303      	orrs	r3, r0
 800a618:	d00b      	beq.n	800a632 <__ieee754_pow+0x97a>
 800a61a:	a32b      	add	r3, pc, #172	; (adr r3, 800a6c8 <__ieee754_pow+0xa10>)
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a624:	f7f5 ffc4 	bl	80005b0 <__aeabi_dmul>
 800a628:	a327      	add	r3, pc, #156	; (adr r3, 800a6c8 <__ieee754_pow+0xa10>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7ff bbdc 	b.w	8009dea <__ieee754_pow+0x132>
 800a632:	4622      	mov	r2, r4
 800a634:	462b      	mov	r3, r5
 800a636:	f7f5 fe03 	bl	8000240 <__aeabi_dsub>
 800a63a:	4642      	mov	r2, r8
 800a63c:	464b      	mov	r3, r9
 800a63e:	f7f6 fa3d 	bl	8000abc <__aeabi_dcmpge>
 800a642:	2800      	cmp	r0, #0
 800a644:	f43f aef8 	beq.w	800a438 <__ieee754_pow+0x780>
 800a648:	e7e7      	b.n	800a61a <__ieee754_pow+0x962>
 800a64a:	f04f 0a00 	mov.w	sl, #0
 800a64e:	e71e      	b.n	800a48e <__ieee754_pow+0x7d6>
 800a650:	4621      	mov	r1, r4
 800a652:	e7d4      	b.n	800a5fe <__ieee754_pow+0x946>
 800a654:	f04f 0b00 	mov.w	fp, #0
 800a658:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a6d8 <__ieee754_pow+0xa20>
 800a65c:	f7ff bbb0 	b.w	8009dc0 <__ieee754_pow+0x108>
 800a660:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800a664:	f7ff bbac 	b.w	8009dc0 <__ieee754_pow+0x108>
 800a668:	4638      	mov	r0, r7
 800a66a:	4641      	mov	r1, r8
 800a66c:	f7ff bbbf 	b.w	8009dee <__ieee754_pow+0x136>
 800a670:	9200      	str	r2, [sp, #0]
 800a672:	f7ff bb7f 	b.w	8009d74 <__ieee754_pow+0xbc>
 800a676:	2300      	movs	r3, #0
 800a678:	f7ff bb69 	b.w	8009d4e <__ieee754_pow+0x96>
 800a67c:	f3af 8000 	nop.w
 800a680:	652b82fe 	.word	0x652b82fe
 800a684:	3c971547 	.word	0x3c971547
 800a688:	00000000 	.word	0x00000000
 800a68c:	3fe62e43 	.word	0x3fe62e43
 800a690:	fefa39ef 	.word	0xfefa39ef
 800a694:	3fe62e42 	.word	0x3fe62e42
 800a698:	0ca86c39 	.word	0x0ca86c39
 800a69c:	be205c61 	.word	0xbe205c61
 800a6a0:	72bea4d0 	.word	0x72bea4d0
 800a6a4:	3e663769 	.word	0x3e663769
 800a6a8:	c5d26bf1 	.word	0xc5d26bf1
 800a6ac:	3ebbbd41 	.word	0x3ebbbd41
 800a6b0:	af25de2c 	.word	0xaf25de2c
 800a6b4:	3f11566a 	.word	0x3f11566a
 800a6b8:	16bebd93 	.word	0x16bebd93
 800a6bc:	3f66c16c 	.word	0x3f66c16c
 800a6c0:	5555553e 	.word	0x5555553e
 800a6c4:	3fc55555 	.word	0x3fc55555
 800a6c8:	c2f8f359 	.word	0xc2f8f359
 800a6cc:	01a56e1f 	.word	0x01a56e1f
 800a6d0:	3fe00000 	.word	0x3fe00000
 800a6d4:	000fffff 	.word	0x000fffff
 800a6d8:	3ff00000 	.word	0x3ff00000
 800a6dc:	4090cbff 	.word	0x4090cbff
 800a6e0:	3f6f3400 	.word	0x3f6f3400

0800a6e4 <__ieee754_sqrt>:
 800a6e4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a838 <__ieee754_sqrt+0x154>
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	ea3c 0c01 	bics.w	ip, ip, r1
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	460a      	mov	r2, r1
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	d10e      	bne.n	800a71c <__ieee754_sqrt+0x38>
 800a6fe:	4602      	mov	r2, r0
 800a700:	f7f5 ff56 	bl	80005b0 <__aeabi_dmul>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4630      	mov	r0, r6
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f5 fd9a 	bl	8000244 <__adddf3>
 800a710:	4606      	mov	r6, r0
 800a712:	460d      	mov	r5, r1
 800a714:	4630      	mov	r0, r6
 800a716:	4629      	mov	r1, r5
 800a718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a71c:	2900      	cmp	r1, #0
 800a71e:	dc0d      	bgt.n	800a73c <__ieee754_sqrt+0x58>
 800a720:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a724:	ea5c 0707 	orrs.w	r7, ip, r7
 800a728:	d0f4      	beq.n	800a714 <__ieee754_sqrt+0x30>
 800a72a:	b139      	cbz	r1, 800a73c <__ieee754_sqrt+0x58>
 800a72c:	4602      	mov	r2, r0
 800a72e:	f7f5 fd87 	bl	8000240 <__aeabi_dsub>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	f7f6 f865 	bl	8000804 <__aeabi_ddiv>
 800a73a:	e7e9      	b.n	800a710 <__ieee754_sqrt+0x2c>
 800a73c:	1512      	asrs	r2, r2, #20
 800a73e:	d074      	beq.n	800a82a <__ieee754_sqrt+0x146>
 800a740:	2000      	movs	r0, #0
 800a742:	07d5      	lsls	r5, r2, #31
 800a744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a748:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a74c:	bf5e      	ittt	pl
 800a74e:	0fe3      	lsrpl	r3, r4, #31
 800a750:	0064      	lslpl	r4, r4, #1
 800a752:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a756:	0fe3      	lsrs	r3, r4, #31
 800a758:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a75c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a760:	2516      	movs	r5, #22
 800a762:	4601      	mov	r1, r0
 800a764:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a768:	1076      	asrs	r6, r6, #1
 800a76a:	0064      	lsls	r4, r4, #1
 800a76c:	188f      	adds	r7, r1, r2
 800a76e:	429f      	cmp	r7, r3
 800a770:	bfde      	ittt	le
 800a772:	1bdb      	suble	r3, r3, r7
 800a774:	18b9      	addle	r1, r7, r2
 800a776:	1880      	addle	r0, r0, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	3d01      	subs	r5, #1
 800a77c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a780:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a784:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a788:	d1f0      	bne.n	800a76c <__ieee754_sqrt+0x88>
 800a78a:	462a      	mov	r2, r5
 800a78c:	f04f 0e20 	mov.w	lr, #32
 800a790:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a794:	428b      	cmp	r3, r1
 800a796:	eb07 0c05 	add.w	ip, r7, r5
 800a79a:	dc02      	bgt.n	800a7a2 <__ieee754_sqrt+0xbe>
 800a79c:	d113      	bne.n	800a7c6 <__ieee754_sqrt+0xe2>
 800a79e:	45a4      	cmp	ip, r4
 800a7a0:	d811      	bhi.n	800a7c6 <__ieee754_sqrt+0xe2>
 800a7a2:	f1bc 0f00 	cmp.w	ip, #0
 800a7a6:	eb0c 0507 	add.w	r5, ip, r7
 800a7aa:	da43      	bge.n	800a834 <__ieee754_sqrt+0x150>
 800a7ac:	2d00      	cmp	r5, #0
 800a7ae:	db41      	blt.n	800a834 <__ieee754_sqrt+0x150>
 800a7b0:	f101 0801 	add.w	r8, r1, #1
 800a7b4:	1a5b      	subs	r3, r3, r1
 800a7b6:	4641      	mov	r1, r8
 800a7b8:	45a4      	cmp	ip, r4
 800a7ba:	bf88      	it	hi
 800a7bc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a7c0:	eba4 040c 	sub.w	r4, r4, ip
 800a7c4:	443a      	add	r2, r7
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	f1be 0e01 	subs.w	lr, lr, #1
 800a7cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a7d0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a7d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a7d8:	d1dc      	bne.n	800a794 <__ieee754_sqrt+0xb0>
 800a7da:	4323      	orrs	r3, r4
 800a7dc:	d006      	beq.n	800a7ec <__ieee754_sqrt+0x108>
 800a7de:	1c54      	adds	r4, r2, #1
 800a7e0:	bf0b      	itete	eq
 800a7e2:	4672      	moveq	r2, lr
 800a7e4:	3201      	addne	r2, #1
 800a7e6:	3001      	addeq	r0, #1
 800a7e8:	f022 0201 	bicne.w	r2, r2, #1
 800a7ec:	1043      	asrs	r3, r0, #1
 800a7ee:	07c1      	lsls	r1, r0, #31
 800a7f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a7f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7fc:	bf48      	it	mi
 800a7fe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a802:	4610      	mov	r0, r2
 800a804:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a808:	e782      	b.n	800a710 <__ieee754_sqrt+0x2c>
 800a80a:	0ae3      	lsrs	r3, r4, #11
 800a80c:	3915      	subs	r1, #21
 800a80e:	0564      	lsls	r4, r4, #21
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0fa      	beq.n	800a80a <__ieee754_sqrt+0x126>
 800a814:	02de      	lsls	r6, r3, #11
 800a816:	d50a      	bpl.n	800a82e <__ieee754_sqrt+0x14a>
 800a818:	f1c2 0020 	rsb	r0, r2, #32
 800a81c:	fa24 f000 	lsr.w	r0, r4, r0
 800a820:	1e55      	subs	r5, r2, #1
 800a822:	4094      	lsls	r4, r2
 800a824:	4303      	orrs	r3, r0
 800a826:	1b4a      	subs	r2, r1, r5
 800a828:	e78a      	b.n	800a740 <__ieee754_sqrt+0x5c>
 800a82a:	4611      	mov	r1, r2
 800a82c:	e7f0      	b.n	800a810 <__ieee754_sqrt+0x12c>
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	3201      	adds	r2, #1
 800a832:	e7ef      	b.n	800a814 <__ieee754_sqrt+0x130>
 800a834:	4688      	mov	r8, r1
 800a836:	e7bd      	b.n	800a7b4 <__ieee754_sqrt+0xd0>
 800a838:	7ff00000 	.word	0x7ff00000

0800a83c <finite>:
 800a83c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a840:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a844:	0fc0      	lsrs	r0, r0, #31
 800a846:	4770      	bx	lr

0800a848 <nan>:
 800a848:	2000      	movs	r0, #0
 800a84a:	4901      	ldr	r1, [pc, #4]	; (800a850 <nan+0x8>)
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	7ff80000 	.word	0x7ff80000

0800a854 <rint>:
 800a854:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800a858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a85a:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800a85e:	2f13      	cmp	r7, #19
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	460c      	mov	r4, r1
 800a866:	4605      	mov	r5, r0
 800a868:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800a86c:	dc59      	bgt.n	800a922 <rint+0xce>
 800a86e:	2f00      	cmp	r7, #0
 800a870:	da2a      	bge.n	800a8c8 <rint+0x74>
 800a872:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a876:	4301      	orrs	r1, r0
 800a878:	d022      	beq.n	800a8c0 <rint+0x6c>
 800a87a:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800a87e:	4301      	orrs	r1, r0
 800a880:	424d      	negs	r5, r1
 800a882:	430d      	orrs	r5, r1
 800a884:	4936      	ldr	r1, [pc, #216]	; (800a960 <rint+0x10c>)
 800a886:	0c5c      	lsrs	r4, r3, #17
 800a888:	0b2d      	lsrs	r5, r5, #12
 800a88a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800a88e:	0464      	lsls	r4, r4, #17
 800a890:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a894:	ea45 0304 	orr.w	r3, r5, r4
 800a898:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fcd0 	bl	8000244 <__adddf3>
 800a8a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a8a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	f7f5 fcc6 	bl	8000240 <__aeabi_dsub>
 800a8b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8b8:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c8:	4926      	ldr	r1, [pc, #152]	; (800a964 <rint+0x110>)
 800a8ca:	4139      	asrs	r1, r7
 800a8cc:	ea03 0001 	and.w	r0, r3, r1
 800a8d0:	4310      	orrs	r0, r2
 800a8d2:	d0f5      	beq.n	800a8c0 <rint+0x6c>
 800a8d4:	084b      	lsrs	r3, r1, #1
 800a8d6:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800a8da:	ea52 0501 	orrs.w	r5, r2, r1
 800a8de:	d00c      	beq.n	800a8fa <rint+0xa6>
 800a8e0:	ea24 0303 	bic.w	r3, r4, r3
 800a8e4:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800a8e8:	2f13      	cmp	r7, #19
 800a8ea:	bf0c      	ite	eq
 800a8ec:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800a8f0:	2500      	movne	r5, #0
 800a8f2:	fa44 f707 	asr.w	r7, r4, r7
 800a8f6:	ea43 0407 	orr.w	r4, r3, r7
 800a8fa:	4919      	ldr	r1, [pc, #100]	; (800a960 <rint+0x10c>)
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800a902:	462a      	mov	r2, r5
 800a904:	e9d6 4500 	ldrd	r4, r5, [r6]
 800a908:	4620      	mov	r0, r4
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7f5 fc9a 	bl	8000244 <__adddf3>
 800a910:	e9cd 0100 	strd	r0, r1, [sp]
 800a914:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	f7f5 fc90 	bl	8000240 <__aeabi_dsub>
 800a920:	e7cc      	b.n	800a8bc <rint+0x68>
 800a922:	2f33      	cmp	r7, #51	; 0x33
 800a924:	dd05      	ble.n	800a932 <rint+0xde>
 800a926:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800a92a:	d1c9      	bne.n	800a8c0 <rint+0x6c>
 800a92c:	f7f5 fc8a 	bl	8000244 <__adddf3>
 800a930:	e7c4      	b.n	800a8bc <rint+0x68>
 800a932:	f04f 31ff 	mov.w	r1, #4294967295
 800a936:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800a93a:	fa21 f10c 	lsr.w	r1, r1, ip
 800a93e:	4208      	tst	r0, r1
 800a940:	d0be      	beq.n	800a8c0 <rint+0x6c>
 800a942:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800a946:	bf18      	it	ne
 800a948:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800a94c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800a950:	bf1e      	ittt	ne
 800a952:	ea20 0303 	bicne.w	r3, r0, r3
 800a956:	fa45 fc0c 	asrne.w	ip, r5, ip
 800a95a:	ea43 050c 	orrne.w	r5, r3, ip
 800a95e:	e7cc      	b.n	800a8fa <rint+0xa6>
 800a960:	0800af70 	.word	0x0800af70
 800a964:	000fffff 	.word	0x000fffff

0800a968 <scalbn>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	4617      	mov	r7, r2
 800a974:	460b      	mov	r3, r1
 800a976:	b996      	cbnz	r6, 800a99e <scalbn+0x36>
 800a978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a97c:	4303      	orrs	r3, r0
 800a97e:	d039      	beq.n	800a9f4 <scalbn+0x8c>
 800a980:	4b35      	ldr	r3, [pc, #212]	; (800aa58 <scalbn+0xf0>)
 800a982:	2200      	movs	r2, #0
 800a984:	f7f5 fe14 	bl	80005b0 <__aeabi_dmul>
 800a988:	4b34      	ldr	r3, [pc, #208]	; (800aa5c <scalbn+0xf4>)
 800a98a:	4604      	mov	r4, r0
 800a98c:	429f      	cmp	r7, r3
 800a98e:	460d      	mov	r5, r1
 800a990:	da0f      	bge.n	800a9b2 <scalbn+0x4a>
 800a992:	a32d      	add	r3, pc, #180	; (adr r3, 800aa48 <scalbn+0xe0>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f7f5 fe0a 	bl	80005b0 <__aeabi_dmul>
 800a99c:	e006      	b.n	800a9ac <scalbn+0x44>
 800a99e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a9a2:	4296      	cmp	r6, r2
 800a9a4:	d10a      	bne.n	800a9bc <scalbn+0x54>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f7f5 fc4c 	bl	8000244 <__adddf3>
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	e020      	b.n	800a9f4 <scalbn+0x8c>
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a9b8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a9bc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a9c0:	19b9      	adds	r1, r7, r6
 800a9c2:	4291      	cmp	r1, r2
 800a9c4:	dd0e      	ble.n	800a9e4 <scalbn+0x7c>
 800a9c6:	a322      	add	r3, pc, #136	; (adr r3, 800aa50 <scalbn+0xe8>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a9d0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a9d4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a9d8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a9dc:	4820      	ldr	r0, [pc, #128]	; (800aa60 <scalbn+0xf8>)
 800a9de:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a9e2:	e7d9      	b.n	800a998 <scalbn+0x30>
 800a9e4:	2900      	cmp	r1, #0
 800a9e6:	dd08      	ble.n	800a9fa <scalbn+0x92>
 800a9e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9f0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a9fe:	da16      	bge.n	800aa2e <scalbn+0xc6>
 800aa00:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa04:	429f      	cmp	r7, r3
 800aa06:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800aa0a:	dd08      	ble.n	800aa1e <scalbn+0xb6>
 800aa0c:	4c15      	ldr	r4, [pc, #84]	; (800aa64 <scalbn+0xfc>)
 800aa0e:	4814      	ldr	r0, [pc, #80]	; (800aa60 <scalbn+0xf8>)
 800aa10:	f363 74df 	bfi	r4, r3, #31, #1
 800aa14:	a30e      	add	r3, pc, #56	; (adr r3, 800aa50 <scalbn+0xe8>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	e7bc      	b.n	800a998 <scalbn+0x30>
 800aa1e:	4c12      	ldr	r4, [pc, #72]	; (800aa68 <scalbn+0x100>)
 800aa20:	4812      	ldr	r0, [pc, #72]	; (800aa6c <scalbn+0x104>)
 800aa22:	f363 74df 	bfi	r4, r3, #31, #1
 800aa26:	a308      	add	r3, pc, #32	; (adr r3, 800aa48 <scalbn+0xe0>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	e7f5      	b.n	800aa1a <scalbn+0xb2>
 800aa2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa32:	3136      	adds	r1, #54	; 0x36
 800aa34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	2200      	movs	r2, #0
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <scalbn+0x108>)
 800aa44:	e7a8      	b.n	800a998 <scalbn+0x30>
 800aa46:	bf00      	nop
 800aa48:	c2f8f359 	.word	0xc2f8f359
 800aa4c:	01a56e1f 	.word	0x01a56e1f
 800aa50:	8800759c 	.word	0x8800759c
 800aa54:	7e37e43c 	.word	0x7e37e43c
 800aa58:	43500000 	.word	0x43500000
 800aa5c:	ffff3cb0 	.word	0xffff3cb0
 800aa60:	8800759c 	.word	0x8800759c
 800aa64:	7e37e43c 	.word	0x7e37e43c
 800aa68:	01a56e1f 	.word	0x01a56e1f
 800aa6c:	c2f8f359 	.word	0xc2f8f359
 800aa70:	3c900000 	.word	0x3c900000

0800aa74 <_init>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_fini>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr
